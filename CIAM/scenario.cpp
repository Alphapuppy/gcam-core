/* scenario.cpp										*
 * This file contains the methods definition for the 	*
 * the scenario class.								*
 * SHK  3/12/02										*/

#include "Definitions.h"
#include <string>
#include <iostream>
#include <cassert>
#include <xercesc/util/XMLString.hpp>
#include <xercesc/dom/DOM.hpp>
#include "scenario.h"
#include "modeltime.h"
#include "world.h"
#include "xmlHelper.h"

using namespace std; // enables elimination of std::

extern Modeltime modeltime;
extern World world;
extern time_t ltime;
// scenario class methods

//! Default construtor
Scenario::Scenario() {
}

//! Clear all datamembers.
void Scenario::clear() {
	name = "";
	scenarioSummary = "";
}

//! Set data members from XML input.
void Scenario::XMLParse( const DOMNode* node ){
	
	DOMNode* curr = 0;
	DOMNodeList* nodeList;
	string nodeName;
	
	// assume we were passed a valid node.
	assert( node );
	
	// set the scenario name
	name = XMLHelper<string>::getAttrString( node, "name" );
	
	// get the children of the node.
	nodeList = node->getChildNodes();

	// loop through the children
	for ( int i = 0; i < nodeList->getLength(); i++ ){
		curr = nodeList->item( i );
		nodeName = XMLString::transcode( curr->getNodeName() );
		
		if ( nodeName == "summary" ){
			scenarioSummary = XMLHelper<string>::getValueString( curr );
		}

		else if ( nodeName == "modeltime" ){
			modeltime.XMLParse( curr );
			modeltime.set(); // calculate time parameters and conversions
		}
		else if ( nodeName == "world" ){
			world.XMLParse( curr );
		}
	}
}

//! Write object to xml output stream.
void Scenario::toXML( ostream& out ) const {
	
	// write heading for XML input file
	bool header = true;
	if (header) {
		out << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << endl;
		out << "<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com)";
		out << "by Son H. Kim (PNNL) -->" << endl;
		out << "<!--XML file generated by XMLSPY v5 rel. 2 U (http://www.xmlspy.com)-->" << endl;
	}
	
	string dateString = XMLCreateDate( ltime );
	out << "<scenario xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
	out << " xsi:noNamespaceSchemaLocation=\"C:\\PNNL\\CIAM\\CVS\\CIAM\\Ciam.xsd\"";
	out << " name=\"" << name << "\" date=\"" << dateString << "\">" << endl;

	// increase the indent.
	Tabs::increaseIndent();

	// summary notes on scenario
	Tabs::writeTabs( out );
	out << "<summary>\"SRES B2 Scenario is used for this Reference Scenario\"</summary>" << endl;

	// write the xml for the class members.
	modeltime.toXML( out );
	world.toXML( out );
	// finished writing xml for the class members.
	
	// decrease the indent.
	Tabs::decreaseIndent();
	
	// write the closing tag.
	Tabs::writeTabs( out );
	out << "</scenario>" << endl;
}

//! Write out object to output stream for debugging.
void Scenario::toDebugXMLOpen( const int period, ostream& out ) const {
	
	Tabs::writeTabs( out );
	string dateString = XMLCreateDate( ltime );
	out << "<scenario name=\"" << name << "\" date=\"" << dateString << "\">" << endl;
	
	Tabs::increaseIndent();
	Tabs::writeTabs( out );
	out << "<summary>\"Debugging output\"</summary>" << endl;

	// write the xml for the class members.
	modeltime.toDebugXML( period, out );
	world.toDebugXML( period, out );
	// finished writing xml for the class members.
	
}

//! Write out close scenario tag to output stream for debugging.
void Scenario::toDebugXMLClose( const int period, ostream& out ) const {
		
	// decrease the indent.
	Tabs::decreaseIndent();
	
	// write the closing tag.
	Tabs::writeTabs( out );
	out << "</scenario>" << endl;
}

//! Return scenario name.
string Scenario::getName() const {
	return name; 
}


//! Function which creates an XML compliant date time string.

/*! 
* This function takes as an argument a time_t object and returns a string containing the date and time in the following format:
* yyyy-mm-dd-Thh:mm-GMTOFFSET
* ie: 2003-01-11T09:30:47-05:00
* \param time time_t to convert to XML string form.
* \return string The time converted to XML date string format.
* \todo Find a better location for this function. 
* \bug GMT offset does not work properly.
*/

string Scenario::XMLCreateDate( const time_t& time ) const {
	stringstream buffer;
	string retString;
	struct tm* timeInfo;
	struct tm* umtTimeInfo;

	timeInfo = localtime( &time );
	umtTimeInfo = gmtime( &time );

	// Create the string
	buffer << ( timeInfo->tm_year + 1900 ); // Set the year
	buffer << "-";
	buffer << timeInfo->tm_mday; // Set the day
	buffer << "-";
	buffer << ( timeInfo->tm_mon + 1 ); // Month's in ctime range from 0-11
	buffer << "T";
	buffer << timeInfo->tm_hour;
	buffer << ":";
	buffer << timeInfo->tm_min;
	buffer << ":";
	buffer << timeInfo->tm_sec;
	buffer << "-";

	int umtDiff = timeInfo->tm_hour - umtTimeInfo->tm_hour;
	if( umtDiff < 10 ) {
		buffer << "0";
	}
	buffer << umtDiff;
	buffer << ":00";
	// Completed creating the string;
	buffer >> retString;

	return retString;
}

