unique(L210.DepRsrcTechChange$depresource)
subset(L210.DepRsrcTechChange, depresource=="uranium")
source("../energy-processing-code/level1/L111.rsrc_fos_Prod.R")
L111.RsrcCurves_EJ_R_Ffos
L210.RsrcCurves_EJ_R_Ffos <- add_region_name( L111.RsrcCurves_EJ_R_Ffos )
subset(L210.RsrcCurves_EJ_R_Ffos, region=="Japan")
L210.DepRsrcCurves_fos <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_Ffos, "depresource" )
subset(L210.DepRsrcCurves_fos, region=="Japan")
convert_rsrc_to_L2
digits_depresource
logstop()
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L242.building.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Model input for aggregate building sectors" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
fuel_energy_input <- readdata( "ENERGY_MAPPINGS", "fuel_energy_input" )#
calibrated_techs_bld_agg <- readdata( "ENERGY_MAPPINGS", "calibrated_techs_bld_agg" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
A42.sector <- readdata( "ENERGY_ASSUMPTIONS", "A42.sector" )#
A42.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A42.subsector_interp" )#
A42.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A42.subsector_logit" )#
A42.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A42.subsector_shrwt" )#
A42.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A42.globaltech_cost" )#
A42.globaltech_eff <- readdata( "ENERGY_ASSUMPTIONS", "A42.globaltech_eff" )#
A42.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A42.globaltech_shrwt" )#
A42.fuelprefElasticity <- readdata( "ENERGY_ASSUMPTIONS", "A42.fuelprefElasticity" )#
A42.demand <- readdata( "ENERGY_ASSUMPTIONS", "A42.demand" )#
L124.in_EJ_R_heat_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L124.in_EJ_R_heat_F_Yh" )#
L142.in_EJ_R_bld_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L142.in_EJ_R_bld_F_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
#Build table to drop heat subsectors and technologies in regions where heat is not modeled as a separate fuel#
L242.heat_techs <- unique( calibrated_techs_bld_agg[ grepl( "bld", calibrated_techs_bld_agg$sector ) & calibrated_techs_bld_agg$fuel == "heat", s_s_t ] )#
L242.rm_heat_techs_R <- repeat_and_add_vector( L242.heat_techs, R, A_regions[[R]][ A_regions$heat == 0 ] )#
L242.rm_heat_techs_R <- add_region_name( L242.rm_heat_techs_R )#
#
# 2a. Supplysector information#
printlog( "L242.Supplysector_bld: Supply sector information for building sector" )#
L242.Supplysector_bld <- write_to_all_regions( A42.sector, names_Supplysector )#
#
# 2b. Subsector information#
printlog( "L242.SubsectorLogit_bld: Subsector logit exponents of building sector" )#
L242.SubsectorLogit_bld <- write_to_all_regions( A42.subsector_logit, names_SubsectorLogit )#
L242.SubsectorLogit_bld <- L242.SubsectorLogit_bld[#
      vecpaste( L242.SubsectorLogit_bld[ c( "region", "subsector" ) ] ) %!in% vecpaste( L242.rm_heat_techs_R[ c( "region", "subsector" ) ] ), ]#
#
printlog( "L242.SubsectorShrwt_bld and L242.SubsectorShrwtFllt_bld: Subsector shareweights of building sector" )#
if( any( !is.na( A42.subsector_shrwt$year ) ) ){#
	L242.SubsectorShrwt_bld <- write_to_all_regions( A42.subsector_shrwt[ !is.na( A42.subsector_shrwt$year ), ], names_SubsectorShrwt )#
	#Remove non-existent heat subsectors from each region#
	L242.SubsectorShrwt_bld <- L242.SubsectorShrwt_bld[#
      vecpaste( L242.SubsectorShrwt_bld[ c( "region", "subsector" ) ] ) %!in% vecpaste( L242.rm_heat_techs_R[ c( "region", "subsector" ) ] ), ]#
	}#
if( any( !is.na( A42.subsector_shrwt$year.fillout ) ) ){#
	L242.SubsectorShrwtFllt_bld <- write_to_all_regions( A42.subsector_shrwt[ !is.na( A42.subsector_shrwt$year.fillout ), ], names_SubsectorShrwtFllt )#
	#Remove non-existent heat subsectors from each region#
	L242.SubsectorShrwtFllt_bld <- L242.SubsectorShrwtFllt_bld[#
      vecpaste( L242.SubsectorShrwtFllt_bld[ c( "region", "subsector" ) ] ) %!in% vecpaste( L242.rm_heat_techs_R[ c( "region", "subsector" ) ] ), ]#
	}#
#
printlog( "L242.SubsectorInterp_bld and L242.SubsectorInterpTo_bld: Subsector shareweight interpolation of building sector" )#
if( any( is.na( A42.subsector_interp$to.value ) ) ){#
	L242.SubsectorInterp_bld <- write_to_all_regions( A42.subsector_interp[ is.na( A42.subsector_interp$to.value ), ], names_SubsectorInterp )#
	#Remove non-existent heat subsectors from each region#
	L242.SubsectorInterp_bld <- L242.SubsectorInterp_bld[#
      vecpaste( L242.SubsectorInterp_bld[ c( "region", "subsector" ) ] ) %!in% vecpaste( L242.rm_heat_techs_R[ c( "region", "subsector" ) ] ), ]#
	}#
if( any( !is.na( A42.subsector_interp$to.value ) ) ){#
	L242.SubsectorInterpTo_bld <- write_to_all_regions( A42.subsector_interp[ !is.na( A42.subsector_interp$to.value ), ], names_SubsectorInterpTo )#
	#Remove non-existent heat subsectors from each region#
	L242.SubsectorInterpTo_bld <- L242.SubsectorInterpTo_bld[#
      vecpaste( L242.SubsectorInterpTo_bld[ c( "region", "subsector" ) ] ) %!in% vecpaste( L242.rm_heat_techs_R[ c( "region", "subsector" ) ] ), ]#
	}#
#
# 2c. Technology information#
printlog( "L242.StubTech_bld: Identification of stub technologies of building sector" )#
#Note: assuming that technology list in the shareweight table includes the full set (any others would default to a 0 shareweight)#
L242.StubTech_bld <- write_to_all_regions( A42.globaltech_shrwt, names_Tech )#
names( L242.StubTech_bld ) <- names_StubTech#
#Drop heat as a stub-technology in regions where it is not modeled as a fuel#
L242.StubTech_bld <- L242.StubTech_bld[#
      vecpaste( L242.StubTech_bld[ c( "region", "stub.technology" ) ] ) %!in% vecpaste( L242.rm_heat_techs_R[ c( "region", "technology" ) ] ), ]#
#
printlog( "L242.GlobalTechShrwt_bld: Shareweights of global building sector technologies" )#
L242.globaltech_shrwt.melt <- interpolate_and_melt( A42.globaltech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L242.globaltech_shrwt.melt[ c( "sector.name", "subsector.name" ) ] <- L242.globaltech_shrwt.melt[ c( "supplysector", "subsector" ) ]#
L242.GlobalTechShrwt_bld <- L242.globaltech_shrwt.melt[ c( names_GlobalTechYr, "share.weight" ) ]#
#
printlog( "L242.GlobalTechEff_bld: Energy inputs and coefficients of global building energy use and feedstocks technologies" )#
L242.globaltech_eff.melt <- interpolate_and_melt( A42.globaltech_eff, c( model_base_years, model_future_years ), value.name="efficiency" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L242.globaltech_eff.melt[ c( "sector.name", "subsector.name" ) ] <- L242.globaltech_eff.melt[ c( "supplysector", "subsector" ) ]#
L242.GlobalTechEff_bld <- L242.globaltech_eff.melt[ names_GlobalTechEff ]#
L242.GlobalTechEff_bld$efficiency <- round( L242.GlobalTechEff_bld$efficiency, digits_efficiency )#
#
#Costs of global technologies#
printlog( "L242.GlobalTechCost_bld: Capital costs of global building technologies" )#
L242.globaltech_cost.melt <- interpolate_and_melt( A42.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
L242.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L242.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L242.GlobalTechCost_bld <- L242.globaltech_cost.melt[ names_GlobalTechCost ]#
#
#Calibration and region-specific data#
printlog( "L242.StubTechCalInput_bld: calibrated input of building energy use technologies (including cogen)")#
L242.in_EJ_R_bld_F_Yh <- interpolate_and_melt( L142.in_EJ_R_bld_F_Yh, model_base_years )#
L242.in_EJ_R_bld_F_Yh <- add_region_name( L242.in_EJ_R_bld_F_Yh )#
L242.in_EJ_R_bld_F_Yh[ c( "supplysector", "subsector", "stub.technology" ) ] <- calibrated_techs_bld_agg[#
      match( vecpaste( L242.in_EJ_R_bld_F_Yh[ S_F ] ),#
             vecpaste( calibrated_techs_bld_agg[ S_F ] ) ),#
      c( "supplysector", "subsector", "technology" ) ]#
#
#Aggregate as indicated in the supplysector/subsector/technology mapping#
L242.in_EJ_R_bld_F_Yh <- aggregate( L242.in_EJ_R_bld_F_Yh[ "value" ],#
      by=as.list( L242.in_EJ_R_bld_F_Yh[ c( "region", "supplysector", "subsector", "stub.technology", Y ) ] ), sum )#
#
L242.StubTechCalInput_bld <- L242.in_EJ_R_bld_F_Yh[ names_StubTechYr ]#
L242.StubTechCalInput_bld$minicam.energy.input <- A42.globaltech_eff$minicam.energy.input[ #
      match( vecpaste( L242.StubTechCalInput_bld[ c( "subsector", "stub.technology" ) ] ),#
             vecpaste( A42.globaltech_eff[ c( "subsector", "technology" ) ] ) ) ]#
L242.StubTechCalInput_bld$calibrated.value <- round( L242.in_EJ_R_bld_F_Yh$value, digits_calOutput )#
L242.StubTechCalInput_bld$share.weight.year <- L242.StubTechCalInput_bld$year#
L242.StubTechCalInput_bld <- set_subsector_shrwt( L242.StubTechCalInput_bld, value.name = "calibrated.value" )#
L242.StubTechCalInput_bld$tech.share.weight <- ifelse( L242.StubTechCalInput_bld$calibrated.value > 0, 1, 0 )#
L242.StubTechCalInput_bld <- L242.StubTechCalInput_bld[ names_StubTechCalInput ]#
#
printlog( "L242.FuelPrefElast_bld: fuel preference elasticities of building energy use" )#
A42.fuelprefElasticity$year.fillout <- min( model_future_years )#
L242.FuelPrefElast_bld <- write_to_all_regions( A42.fuelprefElasticity, names_FuelPrefElasticity )#
#
printlog( "L242.PerCapitaBased_bld: per-capita based flag for building final demand" )#
L242.PerCapitaBased_bld <- write_to_all_regions( A42.demand, names_PerCapitaBased )#
#
printlog( "L242.PriceElasticity_bld: price elasticity of building final demand" )#
#Price elasticities are only applied to future periods. Application in base years will cause solution failure#
L242.PriceElasticity_bld <- repeat_and_add_vector( A42.demand, Y, model_future_years )#
L242.PriceElasticity_bld <- write_to_all_regions( L242.PriceElasticity_bld, names_PriceElasticity )#
#
printlog( "L242.BaseService_bld: base-year service output of building final demand" )#
#Base service is equal to the output of the building supplysector#
L242.caloutput_bld_tech <- L242.StubTechCalInput_bld#
L242.caloutput_bld_tech$efficiency <- L242.GlobalTechEff_bld$efficiency[#
      match( vecpaste( L242.caloutput_bld_tech[ c( "supplysector", "subsector" , "stub.technology", Y ) ] ),#
             vecpaste( L242.GlobalTechEff_bld[ c( "sector.name", "subsector.name", "technology", Y ) ] ) ) ]#
L242.caloutput_bld_tech$output <- L242.caloutput_bld_tech$calibrated.value * L242.caloutput_bld_tech$efficiency#
L242.caloutput_bld <- aggregate( L242.caloutput_bld_tech[ "output" ], by=as.list( L242.caloutput_bld_tech[ c( "region", "supplysector", Y ) ] ), sum )#
#
L242.BaseService_bld <- data.frame(#
      region = L242.caloutput_bld$region,#
      energy.final.demand = L242.caloutput_bld$supplysector,#
      year = L242.caloutput_bld$year,#
      base.service = round( L242.caloutput_bld$output, digits_calOutput ) )
A42.globaltech_shrwt
subset(L242.StubTechCalInput_bld, subsector == "traditional biomass")
head(L142.in_EJ_R_bld_F_Yh)
unique(L142.in_EJ_R_bld_F_Yh$sector)
unique(L142.in_EJ_R_bld_F_Yh$fuel)
subset(L142.in_EJ_R_bld_F_Yh, fuel=="traditional biomass")
A42.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A42.globaltech_shrwt" )
A42.globaltech_shrwt
A42.globaltech_interp <- readdata( "ENERGY_ASSUMPTIONS", "A42.globaltech_interp" )
A42.globaltech_interp <- readdata( "ENERGY_ASSUMPTIONS", "A42.globaltech_interp" )
A42.globaltech_interp
L242.GlobalTechInterp_bld <- set_years( A42.globaltech_interp )
L242.GlobalTechInterp_bld
L242.GlobalTechInterp_bld[ c( "sector.name", "subsector.name" ) ] <- L242.GlobalTechInterp_bld[ c( "supplysector", "subsector" ) ]
L242.GlobalTechInterp_bld
names_GlobalTechInterp
names_GlobalTechInterp <- c( "sector.name", "subsector.name", "technology", "apply.to","from.year", "to.year", "interpolation.function" )
L242.GlobalTechInterp_bld <- set_years( A42.globaltech_interp )#
L242.GlobalTechInterp_bld[ c( "sector.name", "subsector.name" ) ] <- L242.GlobalTechInterp_bld[ c( "supplysector", "subsector" ) ]#
L242.GlobalTechInterp_bld <- GlobalTechInterp_bld[ names_GlobalTechInterp ]
L242.GlobalTechInterp_bld <- set_years( A42.globaltech_interp )#
L242.GlobalTechInterp_bld[ c( "sector.name", "subsector.name" ) ] <- L242.GlobalTechInterp_bld[ c( "supplysector", "subsector" ) ]#
L242.GlobalTechInterp_bld <- L242.GlobalTechInterp_bld[ names_GlobalTechInterp ]
L242.GlobalTechInterp_bld
write_mi_data( L242.GlobalTechInterp_bld, "GlobalTechInterp", "ENERGY_LEVEL2_DATA", "L242.GlobalTechInterp_bld", "ENERGY_XML_BATCH", "batch_building_agg.xml" )
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L2321.cement.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Model input for cement manufacturing and use" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )
A321.sector <- readdata( "ENERGY_ASSUMPTIONS", "A321.sector" )
A321.sector <- readdata( "ENERGY_ASSUMPTIONS", "A321.sector" )
A321.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_interp" )
A321.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_logit" )
A321.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_shrwt" )
A321.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_coef" )
A321.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_shrwt" )
A321.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_co2capture" )
A321.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_co2capture" )
A321.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_cost" )
A321.globaltech_cost
A321.sector <- readdata( "ENERGY_ASSUMPTIONS", "A321.sector" )#
A321.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_interp" )#
A321.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_logit" )#
A321.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_shrwt" )#
A321.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_coef" )#
A321.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_cost" )#
A321.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_shrwt" )#
A321.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_co2capture" )#
A321.demand <- readdata( "ENERGY_ASSUMPTIONS", "A321.demand" )
A321.sector
A321.subsector_interp
A321.subsector_logit
A321.subsector_shrwt
A321.globaltech_coef
A321.globaltech_cost
A321.globaltech_shrwt
A321.globaltech_co2capture
A321.demand
L1321.out_Mt_R_cement_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1321.out_Mt_R_cement_Yh")#
L1321.IO_GJkg_R_cement_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1321.IO_GJkg_R_cement_F_Yh" )#
L1321.in_EJ_R_cement_F_Y <- readdata( "AGLU_LEVEL1_DATA", "L1321.in_EJ_R_cement_F_Y" )
L1321.in_EJ_R_cement_F_Y <- readdata( "ENERGY_LEVEL1_DATA", "L1321.in_EJ_R_cement_F_Y" )
L1321.out_Mt_R_cement_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1321.out_Mt_R_cement_Yh")#
L1321.IO_GJkg_R_cement_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1321.IO_GJkg_R_cement_F_Yh" )#
L1321.in_EJ_R_cement_F_Y <- readdata( "ENERGY_LEVEL1_DATA", "L1321.in_EJ_R_cement_F_Y" )
L2321.Supplysector_cement <- write_to_all_regions( A321.sector, names_Supplysector )
head(L2321.Supplysector_cement)
A321.sector <- readdata( "ENERGY_ASSUMPTIONS", "A321.sector" )
L2321.Supplysector_cement <- write_to_all_regions( A321.sector, names_Supplysector )
L2321.Supplysector_cement
L2321.SubsectorLogit_cement <- write_to_all_regions( A321.subsector_logit, names_SubsectorLogit )
L2321.SubsectorLogit_cement
printlog( "L2321.SubsectorShrwt_cement and L2321.SubsectorShrwtFllt_cement: Subsector shareweights of fertilizer sector" )#
if( any( !is.na( A321.subsector_shrwt$year ) ) ){#
	L2321.SubsectorShrwt_cement <- write_to_all_regions( A321.subsector_shrwt[ !is.na( A321.subsector_shrwt$year ), ], names_SubsectorShrwt )#
	}#
if( any( !is.na( A321.subsector_shrwt$year.fillout ) ) ){#
	L2321.SubsectorShrwtFllt_cement <- write_to_all_regions( A321.subsector_shrwt[ !is.na( A321.subsector_shrwt$year.fillout ), ], names_SubsectorShrwtFllt )#
	}
printlog( "L2321.SubsectorInterp_cement and L2321.SubsectorInterpTo_cement: Subsector shareweight interpolation of fertilizer sector" )#
if( any( is.na( A321.subsector_interp$to.value ) ) ){#
	L2321.SubsectorInterp_cement <- write_to_all_regions( A321.subsector_interp[ is.na( A321.subsector_interp$to.value ), ], names_SubsectorInterp )#
	}#
if( any( !is.na( A321.subsector_interp$to.value ) ) ){#
	L2321.SubsectorInterpTo_cement <- write_to_all_regions( A321.subsector_interp[ !is.na( A321.subsector_interp$to.value ), ], names_SubsectorInterpTo )#
	}
printlog( "L2321.StubTech_cement: Identification of stub technologies of industrial sector" )#
#Note: assuming that technology list in the shareweight table includes the full set (any others would default to a 0 shareweight)#
L2321.StubTech_cement <- write_to_all_regions( A321.globaltech_shrwt, names_Tech )#
names( L2321.StubTech_cement ) <- names_StubTech
head(L2321.StubTech_cement)
write_to_all_regions
names_StubTech
dim(L2321.StubTech_cement)
L2321.StubTech_cement
L2321.globaltech_shrwt.melt <- interpolate_and_melt( A321.globaltech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L2321.globaltech_shrwt.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_shrwt.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechShrwt_cement <- L2321.globaltech_shrwt.melt[ c( names_GlobalTechYr, "share.weight" ) ]
L2321.GlobalTechShrwt_cement
head(L2321.GlobalTechShrwt_cement)
printlog( "L2321.GlobalTechCoef_cement: Energy inputs and coefficients of global industrial energy use and feedstocks technologies" )#
L2321.globaltech_coef.melt <- interpolate_and_melt( A321.globaltech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_coef.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_coef.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCoef_cement <- L2321.globaltech_coef.melt[ names_GlobalTechCoef ]#
L2321.GlobalTechCoef_cement$coefficient <- round( L2321.GlobalTechCoef_cement$coefficient, digits_coefficient )
head(L2321.GlobalTechCoef_cement)
dim(L1321.IO_GJkg_R_cement_F_Yh)
L1321.IO_GJkg_R_cement_F_Yh[1:3,38:43]
L1321.IO_GJkg_R_cement_F_Yh[,c(1:3,38:43)]
A321.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_coef" )
L2321.globaltech_coef.melt <- interpolate_and_melt( A321.globaltech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_coef.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_coef.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCoef_cement <- L2321.globaltech_coef.melt[ names_GlobalTechCoef ]#
L2321.GlobalTechCoef_cement$coefficient <- round( L2321.GlobalTechCoef_cement$coefficient, digits_coefficient )
dim(L2321.GlobalTechCoef_cement)
subset(L2321.GlobalTechCoef_cement, region=="USA")
L2321.GlobalTechCoef_cement
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
A321.sector <- readdata( "ENERGY_ASSUMPTIONS", "A321.sector" )#
A321.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_interp" )#
A321.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_logit" )#
A321.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A321.subsector_shrwt" )#
A321.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_coef" )#
A321.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_cost" )#
A321.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_shrwt" )#
A321.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_co2capture" )#
A321.demand <- readdata( "ENERGY_ASSUMPTIONS", "A321.demand" )#
L1321.out_Mt_R_cement_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1321.out_Mt_R_cement_Yh")#
L1321.IO_GJkg_R_cement_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1321.IO_GJkg_R_cement_F_Yh" )#
L1321.in_EJ_R_cement_F_Y <- readdata( "ENERGY_LEVEL1_DATA", "L1321.in_EJ_R_cement_F_Y" )
printlog( "L2321.Supplysector_cement: Supply sector information for fertilizer sector" )#
L2321.Supplysector_cement <- write_to_all_regions( A321.sector, names_Supplysector )#
#
# 2b. Subsector information#
printlog( "L2321.SubsectorLogit_cement: Subsector logit exponents of fertilizer sector" )#
L2321.SubsectorLogit_cement <- write_to_all_regions( A321.subsector_logit, names_SubsectorLogit )#
#
printlog( "L2321.SubsectorShrwt_cement and L2321.SubsectorShrwtFllt_cement: Subsector shareweights of fertilizer sector" )#
if( any( !is.na( A321.subsector_shrwt$year ) ) ){#
	L2321.SubsectorShrwt_cement <- write_to_all_regions( A321.subsector_shrwt[ !is.na( A321.subsector_shrwt$year ), ], names_SubsectorShrwt )#
	}#
if( any( !is.na( A321.subsector_shrwt$year.fillout ) ) ){#
	L2321.SubsectorShrwtFllt_cement <- write_to_all_regions( A321.subsector_shrwt[ !is.na( A321.subsector_shrwt$year.fillout ), ], names_SubsectorShrwtFllt )#
	}#
#
printlog( "L2321.SubsectorInterp_cement and L2321.SubsectorInterpTo_cement: Subsector shareweight interpolation of fertilizer sector" )#
if( any( is.na( A321.subsector_interp$to.value ) ) ){#
	L2321.SubsectorInterp_cement <- write_to_all_regions( A321.subsector_interp[ is.na( A321.subsector_interp$to.value ), ], names_SubsectorInterp )#
	}#
if( any( !is.na( A321.subsector_interp$to.value ) ) ){#
	L2321.SubsectorInterpTo_cement <- write_to_all_regions( A321.subsector_interp[ !is.na( A321.subsector_interp$to.value ), ], names_SubsectorInterpTo )#
	}#
#
# 2c. Technology information#
printlog( "L2321.StubTech_cement: Identification of stub technologies of cement" )#
#Note: assuming that technology list in the shareweight table includes the full set (any others would default to a 0 shareweight)#
L2321.StubTech_cement <- write_to_all_regions( A321.globaltech_shrwt, names_Tech )#
names( L2321.StubTech_cement ) <- names_StubTech#
#
printlog( "L2321.GlobalTechShrwt_cement: Shareweights of global cement technologies" )#
L2321.globaltech_shrwt.melt <- interpolate_and_melt( A321.globaltech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L2321.globaltech_shrwt.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_shrwt.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechShrwt_cement <- L2321.globaltech_shrwt.melt[ c( names_GlobalTechYr, "share.weight" ) ]#
#
printlog( "L2321.GlobalTechCoef_cement: Energy inputs and coefficients of cement technologies" )#
L2321.globaltech_coef.melt <- interpolate_and_melt( A321.globaltech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_coef.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_coef.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCoef_cement <- L2321.globaltech_coef.melt[ names_GlobalTechCoef ]#
L2321.GlobalTechCoef_cement$coefficient <- round( L2321.GlobalTechCoef_cement$coefficient, digits_coefficient )
digits_cost
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCost_cement <- L2321.globaltech_cost.melt[ names_GlobalTechCost ]#
L2321.GlobalTechCost_cement$input.cost <- round( L2321.GlobalTechCoef_cement$input.cost, digits_cost )
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]
names_GlobalTechCost
A321.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_cost" )
printlog( "L2321.GlobalTechCost_cement: Non-energy costs of global cement manufacturing technologies" )#
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCost_cement <- L2321.globaltech_cost.melt[ names_GlobalTechCost ]#
L2321.GlobalTechCost_cement$input.cost <- round( L2321.GlobalTechCoef_cement$input.cost, digits_cost )
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]
head(L2321.globaltech_cost.melt)
A321.globaltech_cost
A321.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_cost" )
A321.globaltech_cost
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCost_cement <- L2321.globaltech_cost.melt[ names_GlobalTechCost ]
dim(L2321.GlobalTechCost_cement)
head(L2321.GlobalTechCost_cement)
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCost_cement <- L2321.globaltech_cost.melt[ names_GlobalTechCost ]#
L2321.GlobalTechCost_cement$input.cost <- round( L2321.GlobalTechCoef_cement$input.cost, digits_cost )
L2321.GlobalTechCost_cement$input.cost <- round( L2321.GlobalTechCost_cement$input.cost, digits_cost )
head(L2321.GlobalTechCost_cement)
L2321.globaltech_co2capture.melt <- interpolate_and_melt( A321.globaltech_co2capture, model_future_years, value.name="remove.fraction" )#
L2321.globaltech_co2capture.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_co2capture.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCapture_cement <- data.frame(#
      L2321.globaltech_co2capture.melt[ names_GlobalTechYr ],#
      remove.fraction = round( L2321.globaltech_co2capture.melt$remove.fraction, digits = digits_remove.fraction ) )#
L2321.GlobalTechCapture_cement$storage.market <- CO2.storage.market
A321.globaltech_co2capture
L2321.globaltech_co2capture.melt <- interpolate_and_melt( A321.globaltech_co2capture, model_future_years, value.name="remove.fraction" )
A321.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A321.globaltech_co2capture" )
L2321.globaltech_co2capture.melt <- interpolate_and_melt( A321.globaltech_co2capture, model_future_years, value.name="remove.fraction" )
L2321.globaltech_co2capture.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_co2capture.melt[ c( "supplysector", "subsector" ) ]
head(L2321.globaltech_co2capture.melt)
L2321.GlobalTechCapture_cement <- L2321.globaltech_co2capture.melt[ names_GlobalTechYr ]
L2321.globaltech_co2capture.melt <- interpolate_and_melt( A321.globaltech_co2capture, model_future_years, value.name="remove.fraction" )#
L2321.globaltech_co2capture.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_co2capture.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCapture_cement <- L2321.globaltech_co2capture.melt[ names_GlobalTechYr ]#
L2321.GlobalTechCapture_cement$remove.fraction <- round( L2321.globaltech_co2capture.melt$remove.fraction, digits = digits_remove.fraction )#
L2321.GlobalTechCapture_cement$storage.market <- CO2.storage.market
dim(L2321.GlobalTechCapture_cement)
L2321.GlobalTechCapture_cement
L1321.in_EJ_R_cement_F_Y
L2321.StubTechProd_cement <- interpolate_and_melt( L1321.out_Mt_R_cement_Yh, model_base_years, value.name = "calOutputValue" )#
L2321.StubTechProd_cement <- add_region_name( L2321.StubTechProd_cement )
head(L2321.StubTechProd_cement)
head(L1321.out_Mt_R_cement_Yh)
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )
subset(calibrated_techs, sector=="cement")
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[ match( vecpaste( L2321.StubTechProd_cement[ S_F ] ), vecpaste( calibrated_techs[ S_F ] ) ), s_s_t ]
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[ match( L2321.StubTechProd_cement[[ S]] ), vecpaste( calibrated_techs[ S_F ] ) ), s_s_t ]
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[ match( L2321.StubTechProd_cement[[ S]], vecpaste( calibrated_techs[ S_F ] ) ), s_s_t ]
S
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[ match( L2321.StubTechProd_cement[[ "sector" ]], vecpaste( calibrated_techs[ S_F ] ) ), s_s_t ]
head(L2321.StubTechProd_cement)
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )
subset(calibrated_techs, sector == "cement")
A321.globaltech_shrwt
match( L2321.StubTechProd_cement$sector, calibrated_techs$sector )
match( L2321.StubTechProd_cement$sector, calibrated_techs$sector[ calibrated_techs$calibration == "output" ] )
calibrated_techs[#
      match( L2321.StubTechProd_cement$sector, calibrated_techs$sector[ calibrated_techs$calibration == "output" ] ) ), s_s_t ]
calibrated_techs[#
      match( L2321.StubTechProd_cement$sector, calibrated_techs$sector[ calibrated_techs$calibration == "output" ] ), s_s_t ]
calibrated_techs[#
      match( paste( L2321.StubTechProd_cement$sector, "output" ),#
             paste( calibrated_techs$sector, calibrated_techs$calibration ), s_s_t ]
calibrated_techs[#
      match( paste( L2321.StubTechProd_cement$sector, "output" ),#
             paste( calibrated_techs$sector, calibrated_techs$calibration ) ), s_s_t ]
L2321.StubTechProd_cement <- interpolate_and_melt( L1321.out_Mt_R_cement_Yh, model_base_years, value.name = "calOutputValue" )#
L2321.StubTechProd_cement <- add_region_name( L2321.StubTechProd_cement )#
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[#
      match( paste( L2321.StubTechProd_cement$sector, "output" ),#
             paste( calibrated_techs$sector, calibrated_techs$calibration ) ), s_s_t ]
L2321.StubTechProd_cement <- interpolate_and_melt( L1321.out_Mt_R_cement_Yh, model_base_years, value.name = "calOutputValue" )#
L2321.StubTechProd_cement <- add_region_name( L2321.StubTechProd_cement )#
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[#
      match( paste( L2321.StubTechProd_cement$sector, "output" ),  #Only take the tech IDs where the calibration is identified as output#
             paste( calibrated_techs$sector, calibrated_techs$calibration ) ), s_s_t ]#
L2321.StubTechProd_cement$stub.technology <- L2321.StubTechProd_cement$technology#
L2321.StubTechProd_cement$calOutputValue <- round( L2321.StubTechProd_cement$calOutputValue, digits_calOutput )#
L2321.StubTechProd_cement$share.weight.year <- L2321.StubTechProd_cement[[Y]]#
L2321.StubTechProd_cement$subs.share.weight <- ifelse( L2321.StubTechProd_cement$calOutputValue > 0, 1, 0 )#
L2321.StubTechProd_cement$tech.share.weight <- L2321.StubTechProd_cement$subs.share.weight#
L2321.StubTechProd_cement <- L2321.StubTechProd_cement[ names_StubTechProd ]
dim(L2321.StubTechProd_cement)
L2321.StubTechProd_cement
L2321.StubTechProd_cement <- interpolate_and_melt( L1321.out_Mt_R_cement_Yh, model_base_years, value.name = "calOutputValue" )#
L2321.StubTechProd_cement <- add_region_name( L2321.StubTechProd_cement )#
L2321.StubTechProd_cement[ s_s_t ] <- calibrated_techs[#
      match( paste( L2321.StubTechProd_cement$sector, "output" ),  #Only take the tech IDs where the calibration is identified as output#
             paste( calibrated_techs$sector, calibrated_techs$calibration ) ), s_s_t ]#
L2321.StubTechProd_cement$stub.technology <- L2321.StubTechProd_cement$technology#
L2321.StubTechProd_cement$calOutputValue <- round( L2321.StubTechProd_cement$calOutputValue, digits_calOutput )#
L2321.StubTechProd_cement$share.weight.year <- L2321.StubTechProd_cement[[Y]]#
L2321.StubTechProd_cement$subs.share.weight <- ifelse( L2321.StubTechProd_cement$calOutputValue > 0, 1, 0 )#
L2321.StubTechProd_cement$tech.share.weight <- L2321.StubTechProd_cement$subs.share.weight#
L2321.StubTechProd_cement <- L2321.StubTechProd_cement[ names_StubTechProd ]
dim(L2321.StubTechProd_cement)
L2321.StubTechProd_cement
L2321.StubTechCoef_cement <- interpolate_and_melt( L1321.IO_GJkg_R_cement_F_Yh, model_base_years, value.name = "coefficient" )
head(L2321.StubTechCoef_cement)
subset( L2321.StubTechCoef_cement, coefficient == 0 )
L2321.StubTechCoef_cement <- add_region_name( L2321.StubTechCoef_cement )#
L2321.StubTechCoef_cement[ s_s_t_i ] <- calibrated_techs[ match( vecpaste( L2321.StubTechCoef_cement[ S_F ] ), vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]
head(L2321.StubTechCoef_cement)
subset(L2321.StubTechCoef_cement, GCAM_region_ID==1)
L2321.StubTechCoef_cement$stub.technology <- L2321.StubTechCoef_cement$technology#
L2321.StubTechCoef_cement$coefficient <- round( L2321.StubTechCoef_cement$coefficient, digits_coefficient )#
L2321.StubTechCoef_cement$market.name <- L2321.StubTechCoef_cement$region#
L2321.StubTechCoef_cement <- L2321.StubTechCoef_cement[ names_StubTechCoef ]
dim(L2321.StubTechCoef_cement)
L2321.StubTechCoef_cement[1:20,]
L2321.StubTechCoef_cement <- interpolate_and_melt( L1321.IO_GJkg_R_cement_F_Yh,#
      historical_years %in% c( model_base_years, model_future_years ), value.name = "coefficient" )
historical_years %in% c( model_base_years, model_future_years )
L2321.StubTechCoef_cement <- interpolate_and_melt( L1321.IO_GJkg_R_cement_F_Yh,#
      historical_years[ historical_years %in% c( model_base_years, model_future_years ) ], value.name = "coefficient" )
head(L2321.StubTechCoef_cement)
A321.globaltech_coef
names_PerCapitaBased
L2321.PerCapitaBased_cement <- write_to_all_regions( A321.demand )[ names_PerCapitaBased ]
L2321.PerCapitaBased_cement
head(L2321.StubTechProd_cement)
A321.demand$energy.final.demand[1]
A321.demand$energy.final.demand
L2321.BaseService_cement <- data.frame(#
      region = L2321.StubTechProd_cement$region,#
      energy.final.demand = A321.demand$energy.final.demand,#
      year = L2321.StubTechProd_cement$year,#
      base.service = L2321.StubTechProd_cement$calOutputValue )
L2321.BaseService_cement <- data.frame(#
      region = L2321.StubTechProd_cement$region,#
      energy.final.demand = A321.demand$energy.final.demand,#
      year = L2321.StubTechProd_cement$year,#
      base.service = L2321.StubTechProd_cement$calOutputValue )
names_PriceElasticity
L2321.PriceElasticity_cement <- write_to_all_regions( A321.demand )
L2321.PriceElasticity_cement <- write_to_all_regions( A321.demand )#
L2321.PriceElasticity_cement <- repeat_and_add_vector( L2321.PriceElasticity_cement, Y, model_future_years )[ names_PriceElasticity ]
L2321.PriceElasticity_cement
interpolate_and_melt
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]
head(L2321.StubTechCalInput_cement_heat)
subset( calibrated_techs, sector == "cement")
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]#
L2321.StubTechCalInput_cement_heat$stub.technology <- L2321.StubTechCalInput_cement_heat$technology#
L2321.StubTechCalInput_cement_heat$calOutputValue <- round( L2321.StubTechCalInput_cement_heat$calOutputValue, digits_calOutput )#
L2321.StubTechCalInput_cement_heat$share.weight.year <- L2321.StubTechCalInput_cement_heat[[Y]]#
L2321.StubTechCalInput_cement_heat$subs.share.weight <- ifelse( L2321.StubTechCalInput_cement_heat$calOutputValue > 0, 1, 0 )#
L2321.StubTechCalInput_cement_heat$tech.share.weight <- L2321.StubTechCalInput_cement_heat$subs.share.weight#
L2321.StubTechCalInput_cement_heat <- L2321.StubTechCalInput_cement_heat[ names_StubTechProd ]
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]#
L2321.StubTechCalInput_cement_heat$stub.technology <- L2321.StubTechCalInput_cement_heat$technology#
L2321.StubTechCalInput_cement_heat$calibrated.value <- round( L2321.StubTechCalInput_cement_heat$calibrated.value, digits_calOutput )
head(L2321.StubTechCalInput_cement_heat)
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]#
L2321.StubTechCalInput_cement_heat$stub.technology <- L2321.StubTechCalInput_cement_heat$technology#
L2321.StubTechCalInput_cement_heat$calibrated.value <- round( L2321.StubTechCalInput_cement_heat$calibrated.value, digits_calOutput )#
L2321.StubTechCalInput_cement_heat$share.weight.year <- L2321.StubTechCalInput_cement_heat[[Y]]#
L2321.StubTechCalInput_cement_heat$subs.share.weight <- ifelse( L2321.StubTechCalInput_cement_heat$calOutputValue > 0, 1, 0 )#
L2321.StubTechCalInput_cement_heat$tech.share.weight <- L2321.StubTechCalInput_cement_heat$subs.share.weight#
L2321.StubTechCalInput_cement_heat <- L2321.StubTechCalInput_cement_heat[ names_StubTechProd ]
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]#
L2321.StubTechCalInput_cement_heat$stub.technology <- L2321.StubTechCalInput_cement_heat$technology#
L2321.StubTechCalInput_cement_heat$calibrated.value <- round( L2321.StubTechCalInput_cement_heat$calibrated.value, digits_calOutput )#
L2321.StubTechCalInput_cement_heat$share.weight.year <- L2321.StubTechCalInput_cement_heat[[Y]]#
L2321.StubTechCalInput_cement_heat$subs.share.weight <- ifelse( L2321.StubTechCalInput_cement_heat$calibrated.value > 0, 1, 0 )#
L2321.StubTechCalInput_cement_heat$tech.share.weight <- L2321.StubTechCalInput_cement_heat$subs.share.weight#
L2321.StubTechCalInput_cement_heat <- L2321.StubTechCalInput_cement_heat[ names_StubTechProd ]
names_StubTechCalInput
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]#
L2321.StubTechCalInput_cement_heat$stub.technology <- L2321.StubTechCalInput_cement_heat$technology#
L2321.StubTechCalInput_cement_heat$calibrated.value <- round( L2321.StubTechCalInput_cement_heat$calibrated.value, digits_calOutput )#
L2321.StubTechCalInput_cement_heat$share.weight.year <- L2321.StubTechCalInput_cement_heat[[Y]]#
L2321.StubTechCalInput_cement_heat$subs.share.weight <- ifelse( L2321.StubTechCalInput_cement_heat$calibrated.value > 0, 1, 0 )#
L2321.StubTechCalInput_cement_heat$tech.share.weight <- L2321.StubTechCalInput_cement_heat$subs.share.weight#
L2321.StubTechCalInput_cement_heat <- L2321.StubTechCalInput_cement_heat[ names_StubTechCalInput ]
head(L2321.StubTechCalInput_cement_heat)
cement_CCS_cost_2000USDtCO2 <- 50#
CO2_storage_cost_1990USDtC <- 42
A321.globaltech_co2capture
cement_CO2_capture_frac <- mean( L2321.GlobalTechCapture_cement$remove.fraction )
cement_CO2_capture_frac
cement_CCS_cost_2000USDtCO2
conv_2000_1975_USD
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )
conv_C_CO2 <- 44/12
cement_CCS_cost_2000USDtCO2 * conv_2000_1975_USD * conv_C_CO2
conv_1990_2005_USD
conv_1990_1975_USD <- 0.4649
CO2_storage_cost <- CO2_storage_cost_1990USDtC * conv_1990_1975_USD
CO2_storage_cost
cement_CCS_cost_total_1975USDtC <- cement_CCS_cost_2000USDtCO2 * conv_2000_1975_USD * conv_C_CO2#
CO2_storage_cost_1975USDtC <- CO2_storage_cost_1990USDtC * conv_1990_1975_USD
CO2_storage_cost_1975USDtC
mean(L2321.GlobalTechCoef_cement$coefficient[ L2321.GlobalTechCoef_cement$minicam.energy.input == "limestone"])
cement_CCS_cost_1975USDtC <- cement_CCS_cost_total_1975USDtC - CO2_storage_cost_1975USDtC
cement_CCS_cost_1975USDtC
mean( L2321.GlobalTechCoef_cement$coefficient[ L2321.GlobalTechCoef_cement$minicam.energy.input == "limestone" ] )
A_PrimaryFuelCCoef <- readdata( "EMISSIONS_ASSUMPTIONS", "A_PrimaryFuelCCoef" )
A_PrimaryFuelCCoef
CO2_IO_kgCkgcement <- mean( L2321.GlobalTechCoef_cement$coefficient[ L2321.GlobalTechCoef_cement$minicam.energy.input == "limestone" ] ) * #
      A_PrimaryFuelCCoef$PrimaryFuelCO2Coef[ A_PrimaryFuelCCoef$PrimaryFuelCO2Coef.name == "limestone" ]
CO2_IO_kgCkgcement
CO2stored_IO_kgCkgcement <- CO2_IO_kgCkgcement * cement_CO2_capture_frac
CO2stored_IO_kgCkgcement
cement_CCS_cost <- cement_CCS_cost_1975USDtC * CO2stored_IO_kgCkgcement
cement_CCS_cost
cement_CCS_cost_75USD_tcement <- cement_CCS_cost_1975USDtC * CO2stored_IO_kgCkgcement
L2321.GlobalTechCost_cement$input.cost[ grepl( "CCS", L2321.GlobalTechCost_cement$input.cost$technology ) ]
L2321.GlobalTechCost_cement$input.cost[ grepl( "CCS", L2321.GlobalTechCost_cement$technology ) ]
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCost_cement <- L2321.globaltech_cost.melt[ names_GlobalTechCost ]#
#
##NOTE: The additional CCS-related non-energy costs are not included in the global technology assessment. Calculate here.#
#First calculate the additional CCS costs per unit of carbon produced in 1975$#
cement_CCS_cost_total_1975USDtC <- cement_CCS_cost_2000USDtCO2 * conv_2000_1975_USD * conv_C_CO2#
CO2_storage_cost_1975USDtC <- CO2_storage_cost_1990USDtC * conv_1990_1975_USD#
cement_CCS_cost_1975USDtC <- cement_CCS_cost_total_1975USDtC - CO2_storage_cost_1975USDtC#
#
#Next calculate the quantity of CO2 produced per unit of cement produced (in kgC per kg cement)#
cement_CO2_capture_frac <- mean( L2321.GlobalTechCapture_cement$remove.fraction )#
CO2_IO_kgCkgcement <- mean( L2321.GlobalTechCoef_cement$coefficient[ L2321.GlobalTechCoef_cement$minicam.energy.input == "limestone" ] ) * #
      A_PrimaryFuelCCoef$PrimaryFuelCO2Coef[ A_PrimaryFuelCCoef$PrimaryFuelCO2Coef.name == "limestone" ]#
CO2stored_IO_kgCkgcement <- CO2_IO_kgCkgcement * cement_CO2_capture_frac#
cement_CCS_cost_75USD_tcement <- cement_CCS_cost_1975USDtC * CO2stored_IO_kgCkgcement#
#
#Adjust the non-energy costs in the table for model input#
L2321.GlobalTechCost_cement$input.cost[ grepl( "CCS", L2321.GlobalTechCost_cement$technology ) ] <-#
      L2321.GlobalTechCost_cement$input.cost[ grepl( "CCS", L2321.GlobalTechCost_cement$technology ) ] + cement_CCS_cost_75USD_tcement#
L2321.GlobalTechCost_cement$input.cost <- round( L2321.GlobalTechCost_cement$input.cost, digits_cost )
dim(L2321.GlobalTechCost_cement)
L2321.GlobalTechCost_cement
conv_t_kg
conv_kg_t
L2321.globaltech_cost.melt <- interpolate_and_melt( A321.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L2321.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L2321.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L2321.GlobalTechCost_cement <- L2321.globaltech_cost.melt[ names_GlobalTechCost ]#
#
##NOTE: The additional CCS-related non-energy costs are not included in the global technology assessment. Calculate here.#
#First calculate the additional CCS costs per unit of carbon produced in 1975$#
cement_CCS_cost_total_1975USDtC <- cement_CCS_cost_2000USDtCO2 * conv_2000_1975_USD * conv_C_CO2#
CO2_storage_cost_1975USDtC <- CO2_storage_cost_1990USDtC * conv_1990_1975_USD#
cement_CCS_cost_1975USDtC <- cement_CCS_cost_total_1975USDtC - CO2_storage_cost_1975USDtC#
#
#Next calculate the quantity of CO2 produced per unit of cement produced (in kgC per kg cement)#
cement_CO2_capture_frac <- mean( L2321.GlobalTechCapture_cement$remove.fraction )#
CO2_IO_kgCkgcement <- mean( L2321.GlobalTechCoef_cement$coefficient[ L2321.GlobalTechCoef_cement$minicam.energy.input == "limestone" ] ) * #
      A_PrimaryFuelCCoef$PrimaryFuelCO2Coef[ A_PrimaryFuelCCoef$PrimaryFuelCO2Coef.name == "limestone" ]#
CO2stored_IO_kgCkgcement <- CO2_IO_kgCkgcement * cement_CO2_capture_frac#
cement_CCS_cost_75USD_tcement <- cement_CCS_cost_1975USDtC * CO2stored_IO_kgCkgcement / conv_t_kg#
#
#Adjust the non-energy costs in the table for model input#
L2321.GlobalTechCost_cement$input.cost[ grepl( "CCS", L2321.GlobalTechCost_cement$technology ) ] <-#
      L2321.GlobalTechCost_cement$input.cost[ grepl( "CCS", L2321.GlobalTechCost_cement$technology ) ] + cement_CCS_cost_75USD_tcement#
L2321.GlobalTechCost_cement$input.cost <- round( L2321.GlobalTechCost_cement$input.cost, digits_cost )
L2321.GlobalTechCost_cement
head(L2321.GlobalTechCost_cement)
head(L2321.GlobalTechCapture_cement)
logstop()
source("../energy-processing-code/level2/L2321.cement.R")
source(paste(SOCIOPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(SOCIOPROC_DIR,"/../_common/headers/SOCIO_header.R",sep=""))#
logstart( "L2321.Cement_Inc_Elas_scenarios.R" )#
adddep(paste(SOCIOPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(SOCIOPROC_DIR,"/../_common/headers/SOCIO_header.R",sep=""))#
printlog( "Cement income elasticities by socioeconomic scenario and GCAM region" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "SOCIO_ASSUMPTIONS", "A_socioeconomics_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
A321.demand <- readdata( "ENERGY_ASSUMPTIONS", "A321.demand" )#
A321.inc_elas <- readdata( "SOCIO_ASSUMPTIONS", "A321.inc_elas" )#
L101.Pop_thous_GCAM3_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L101.Pop_thous_GCAM3_R_Y" )#
L102.gdp_mil90usd_GCAM3_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L102.gdp_mil90usd_GCAM3_R_Y" )#
L102.pcgdp_thous90USD_SSP_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L102.pcgdp_thous90USD_SSP_R_Y" )
printlog( "L2321.IncomeElasticity_cement_GCAM3: cement sector income elasticity for GCAM 3.0 socioeconomics" )#
#For the GCAM 3.0 scenario, calculate the per-capita GDP#
L2321.Pop_thous_GCAM3_R_Y <- add_region_name( L101.Pop_thous_GCAM3_R_Y )#
L2321.gdp_mil90usd_GCAM3_R_Y <- add_region_name( L102.gdp_mil90usd_GCAM3_R_Y )#
L2321.pcgdp_GCAM3_R_Y <- data.frame( L2321.gdp_mil90usd_GCAM3_R_Y[ c( "region", X_model_years ) ] )#
L2321.pcgdp_GCAM3_R_Y[ X_model_years ] <- L2321.gdp_mil90usd_GCAM3_R_Y[ X_model_years ] / L2321.Pop_thous_GCAM3_R_Y[#
      match( L2321.gdp_mil90usd_GCAM3_R_Y$region, L2321.Pop_thous_GCAM3_R_Y$region ),#
      X_model_years ]#
L2321.IncomeElasticity_cement_GCAM3 <- interpolate_and_melt( L2321.pcgdp_GCAM3_R_Y, model_future_years, value = "pcgdp_90thousUSD" )
L2321.IncomeElasticity_cement_GCAM3
L2321.IncomeElasticity_cement_GCAM3$income.elasticity <- round(#
      approx( A321.inc_elas$pcgdp_90thousUSD, A321.inc_elas$inc_elas, xout = L2321.IncomeElasticity_cement_GCAM3$pcgdp_90thousUSD, rule = 2 )$y,#
      digits_IncElas_ind )#
L2321.IncomeElasticity_cement_GCAM3$energy.final.demand <- A321.demand$energy.final.demand#
L2321.IncomeElasticity_cement_GCAM3 <- L2321.IncomeElasticity_cement_GCAM3[ names_IncomeElasticity]
head(L2321.IncomeElasticity_cement_GCAM3)
source("../socioeconomics-processing-code/level2/L2321.Cement_Inc_Elas_scenarios.R")
SOCIOPROC_DIR <-"../socioeconomics-processing-code/"
source("../socioeconomics-processing-code/level2/L2321.Cement_Inc_Elas_scenarios.R")
logstop()
logstop()
dim(L2321.StubTechCalInput_cement_heat)
head(L2321.StubTechCalInput_cement_heat)
L2321.StubTechCoef_cement$supplysector
L2321.StubTechCalInput_cement_heat <- interpolate_and_melt( L1321.in_EJ_R_cement_F_Y, model_base_years, value.name = "calibrated.value" )#
L2321.StubTechCalInput_cement_heat <- add_region_name( L2321.StubTechCalInput_cement_heat )#
L2321.StubTechCalInput_cement_heat[ s_s_t_i ] <- calibrated_techs[#
      match( vecpaste( L2321.StubTechCalInput_cement_heat[ S_F] ),#
             vecpaste( calibrated_techs[ S_F ] ) ), s_s_t_i ]#
#
#This table should only be the technologies for producing heat - drop the electricity inputs to the cement production technology#
L2321.StubTechCalInput_cement_heat <- subset( L2321.StubTechCalInput_cement_heat, supplysector %!in% L2321.StubTechCoef_cement$supplysector )#
L2321.StubTechCalInput_cement_heat$stub.technology <- L2321.StubTechCalInput_cement_heat$technology#
L2321.StubTechCalInput_cement_heat$calibrated.value <- round( L2321.StubTechCalInput_cement_heat$calibrated.value, digits_calOutput )#
L2321.StubTechCalInput_cement_heat$share.weight.year <- L2321.StubTechCalInput_cement_heat[[Y]]#
L2321.StubTechCalInput_cement_heat$subs.share.weight <- ifelse( L2321.StubTechCalInput_cement_heat$calibrated.value > 0, 1, 0 )#
L2321.StubTechCalInput_cement_heat$tech.share.weight <- L2321.StubTechCalInput_cement_heat$subs.share.weight#
L2321.StubTechCalInput_cement_heat <- L2321.StubTechCalInput_cement_heat[ names_StubTechCalInput ]
dim(L2321.StubTechCalInput_cement_heat)
head(L2321.StubTechCalInput_cement_heat)
source("../energy-processing-code/level2/L2321.cement.R")
q()
