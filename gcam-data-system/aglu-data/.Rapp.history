L1322.Fert_modify <- subset( L1322.Fert_ALL_MtN_R_F_Y, check < 0 )#
L1322.Fert_modify$mult <- 1 - (-1 * L1322.Fert_modify$check / L1322.Fert_modify$in_Fert )
L1322.Fert_modify
L1322.Fert_Prod_MtN_ctry_F_Y.melt$mult <- L1322.Fert_modify$mult[#
      match( vecpaste( L1322.Fert_Prod_MtN_ctry_F_Y.melt[ R_F_Xyr ] ), vecpaste( L1322.Fert_modify[ R_F_Xyr ] ) ) ]#
L1322.Fert_Prod_MtN_ctry_F_Y.melt$mult[ is.na( L1322.Fert_Prod_MtN_ctry_F_Y.melt$mult ) ] <- 1#
L1322.Fert_Prod_MtN_ctry_F_Y.melt$share_adj <- with( L1322.Fert_Prod_MtN_ctry_F_Y.melt, share * mult )#
#
#For regions whose fuel shares changed, re-assign the production and energy inputs to the oil-based technology#
L1322.Fert_Prod_MtN_ctry_F_Y.melt$share_adj[ L1322.Fert_Prod_MtN_ctry_F_Y.melt$fuel == "refined liquids" ] <-#
      1 - L1322.Fert_Prod_MtN_ctry_F_Y.melt$share_adj[ L1322.Fert_Prod_MtN_ctry_F_Y.melt$fuel == "coal" ] - #
          L1322.Fert_Prod_MtN_ctry_F_Y.melt$share_adj[ L1322.Fert_Prod_MtN_ctry_F_Y.melt$fuel == "gas" ]#
#
#Re-compute fertilizer production and energy requirements using these new shares#
L1322.Fert_Prod_MtN_ctry_F_Y.melt$Fert_Prod_MtN_adj <- with( L1322.Fert_Prod_MtN_ctry_F_Y.melt, value * share_adj )#
L1322.Fert_Prod_MtN_ctry_F_Y.melt$in_Fert_adj <- with( L1322.Fert_Prod_MtN_ctry_F_Y.melt, Fert_Prod_MtN_adj * intensity_GJkgN )
head(L1322.Fert_Prod_MtN_ctry_F_Y.melt)
L1322.Fert_ALL_MtN_R_F_Y_adj <- aggregate( L1322.Fert_Prod_MtN_ctry_F_Y.melt[ c( "Fert_Prod_MtN_adj", "in_Fert_adj" ) ],#
      by=as.list( L1322.Fert_Prod_MtN_ctry_F_Y.melt[ R_F_Xyr ] ), sum )
head(L1322.Fert_ALL_MtN_R_F_Y_adj)
L1322.Fert_ALL_MtN_R_F_Y_adj <- translate_to_full_table( L1322.Fert_ALL_MtN_R_F_Y_adj,#
      R, unique( iso_GCAM_regID[[R]] ),#
      "fuel", unique( L1322.Fert_ALL_MtN_R_F_Y_adj$fuel ),#
      "Xyear", X_historical_years,#
      datacols = c( "Fert_Prod_MtN_adj", "in_Fert_adj" ) )
L1322.Fert_ALL_MtN_R_F_Y_adj[ c( "in_indenergy", "in_indfeed" ) ] <-#
      L1322.Fert_ALL_MtN_R_F_Y[ c( "in_indenergy", "in_indfeed" ) ]
head(L1322.Fert_ALL_MtN_R_F_Y_adj)
L1322.Fert_ALL_MtN_R_F_Y_adj$check <- with( L1322.Fert_ALL_MtN_R_F_Y_adj, in_indenergy + in_indfeed - in_Fert_adj )#
L1322.Fert_ALL_MtN_R_F_Y_adj$check[ abs( L1322.Fert_ALL_MtN_R_F_Y_adj$check ) < 1e-6 ] <- 0#
if( any( L1322.Fert_ALL_MtN_R_F_Y_adj$check < 0 ) ){#
	printlog( "ERROR: the following regions have negative industrial energy consumption after adjustment")#
	print( subset( L1322.Fert_ALL_MtN_R_F_Y_adj, check < 0 ) )#
}
The "feedstock" requirement is equal to the energy content of the hydrogen in NH3#
# see http://www.iea.org/papers/2009/chemical_petrochemical_sector.pdf#
NH3_energy_GJtNH3 <- H_energy_GJtH2 * NH3_H_frac#
#
# Convert from GJ per t NH3 to GJ per kg N#
NH3_energy_GJkgN <- NH3_energy_GJtNH3  / conv_t_kg / conv_NH3_N#
#
L1322.Fert_ALL_MtN_R_F_Y_adj$intensity_GJkgN <- with( L1322.Fert_ALL_MtN_R_F_Y_adj, in_Fert_adj / Fert_Prod_MtN_adj )#
L1322.Fert_ALL_MtN_R_F_Y_adj$intensity_GJkgN[ is.na( L1322.Fert_ALL_MtN_R_F_Y_adj$intensity_GJkgN ) ] <- 0#
L1322.Fert_ALL_MtN_R_F_Y_adj$feedstock_GJkgN <- NH3_energy_GJkgN#
L1322.Fert_ALL_MtN_R_F_Y_adj$energy_GJkgN <- L1322.Fert_ALL_MtN_R_F_Y_adj$intensity_GJkgN - NH3_energy_GJkgN#
#
#Calculate first-order estimate of energy and feedstock quantities in the industrial sector#
L1322.Fert_ALL_MtN_R_F_Y_adj$indfeed_to_Fert <- with( L1322.Fert_ALL_MtN_R_F_Y_adj, Fert_Prod_MtN_adj * feedstock_GJkgN )#
L1322.Fert_ALL_MtN_R_F_Y_adj$indenergy_to_Fert <- with( L1322.Fert_ALL_MtN_R_F_Y_adj, Fert_Prod_MtN_adj * energy_GJkgN )#
#
#Calculate remaining industrial energy and feedstock consumption re-allocating to avoid negative values#
L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert <- with( L1322.Fert_ALL_MtN_R_F_Y_adj, in_indenergy - indenergy_to_Fert )#
L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert <- with( L1322.Fert_ALL_MtN_R_F_Y_adj, in_indfeed - indfeed_to_Fert )#
#
#This is complicated. This last step pertains to the available energy and feedstock quantities for the industrial sector, in regions#
# where either went negative as a result of including the fertilizer industry (using the IEA's shares of production by fuel type, #
# modified so that no regions went negative, and following the IEA's conventions on disaggregation of feedstocks and energy-use.#
# We are assuming that for the purposes of re-allocation of energy from the (general) industrial sector to the fertilizer sector, all energy#
# is available, whether initially classified as feedstocks or energy-use. This may zero out both energy and feedstocks or both in the#
# general industrial sector, causing all industrial demands of natural gas to be for the ammonia industry.#
# Note that the quantities are added because one is negative.#
L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert < 0 ] <-#
      L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert < 0 ] +#
      L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert < 0 ]#
L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert < 0 ] <- 0#
#
L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert < 0 ] <-#
      L1322.Fert_ALL_MtN_R_F_Y_adj$in_indfeed_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert < 0 ] +#
      L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert < 0 ]#
L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert[ L1322.Fert_ALL_MtN_R_F_Y_adj$in_indenergy_netFert < 0 ] <- 0#
#
printlog( "Building tables of fertilizer production by technology, IO coefs, and energy/feedstock inputs to rest of industry")#
L1322.Fert_ALL_MtN_R_F_Y_adj$sector <- Fert_name#
L1322.Fert_Prod_MtN_R_F_Y <- cast( L1322.Fert_ALL_MtN_R_F_Y_adj, GCAM_region_ID + sector + fuel ~ Xyear, value = "Fert_Prod_MtN_adj" )#
L1322.IO_R_Fert_F_Yh <- cast( L1322.Fert_ALL_MtN_R_F_Y_adj, GCAM_region_ID + sector + fuel ~ Xyear, value = "intensity_GJkgN" )#
L1322.in_EJ_R_indenergy_Ffert_Yh <- cast( L1322.Fert_ALL_MtN_R_F_Y_adj, GCAM_region_ID  + fuel ~ Xyear, value = "in_indenergy_netFert" )#
L1322.in_EJ_R_indfeed_Ffert_Yh <- cast( L1322.Fert_ALL_MtN_R_F_Y_adj, GCAM_region_ID + fuel ~ Xyear, value = "in_indfeed_netFert" )
L1322.in_EJ_R_indenergy_F_Yh <- L1321.in_EJ_R_indenergy_F_Yh#
#Need to match this in due to different sorting in the two tables#
L1322.in_EJ_R_indenergy_F_Yh[#
      vecpaste( L1322.in_EJ_R_indenergy_F_Yh[ R_F ] ) %in% vecpaste( L1322.in_EJ_R_indenergy_Ffert_Yh[ R_F ] ), X_historical_years ] <-#
      L1322.in_EJ_R_indenergy_Ffert_Yh[ #
          match( vecpaste( L1322.in_EJ_R_indenergy_F_Yh[#
                     vecpaste( L1322.in_EJ_R_indenergy_F_Yh[ R_F ] ) %in% vecpaste( L1322.in_EJ_R_indenergy_Ffert_Yh[ R_F ] ), R_F ] ),#
                 vecpaste( L1322.in_EJ_R_indenergy_Ffert_Yh[ R_F ] ) ),#
      X_historical_years ]#
#
L1322.in_EJ_R_indfeed_F_Yh <- L132.in_EJ_R_indfeed_F_Yh#
L1322.in_EJ_R_indfeed_F_Yh[#
      vecpaste( L1322.in_EJ_R_indfeed_F_Yh[ R_F ] ) %in% vecpaste( L1322.in_EJ_R_indfeed_Ffert_Yh[ R_F ] ), X_historical_years ] <-#
      L1322.in_EJ_R_indfeed_Ffert_Yh[#
          match( vecpaste( L1322.in_EJ_R_indfeed_F_Yh[#
                     vecpaste( L1322.in_EJ_R_indfeed_F_Yh[ R_F ] ) %in% vecpaste( L1322.in_EJ_R_indfeed_Ffert_Yh[ R_F ] ), R_F ] ),#
                 vecpaste( L1322.in_EJ_R_indfeed_Ffert_Yh[ R_F ] ) ),      #
      X_historical_years ]#
#
#Base year costs of fertilizer manufacturing#
#Calculate gas cost per kg N#
printlog( "Calculating non-energy costs for gas technology as USA market fertilizer price minus GCAM fuel costs" )#
#First, calculate the gas price as the sum of resource costs plus intermediate sectoral mark-ups#
#2005 is used as the fertilizer base price. Interpolate cost tables to make sure this year is included#
A10.rsrc_info <- gcam_interp( A10.rsrc_info, 2005 )#
A21.globaltech_cost <- gcam_interp( A21.globaltech_cost, 2005 )#
A22.globaltech_cost <- gcam_interp( A22.globaltech_cost, 2005 )#
#
L1322.P_gas_75USDGJ <- sum( A10.rsrc_info$X2005[ A10.rsrc_info$resource == "natural gas" ],#
                       A21.globaltech_cost$X2005[ A21.globaltech_cost$technology == "regional natural gas" ],#
                       A22.globaltech_cost$X2005[ A22.globaltech_cost$technology == "natural gas" ] )#
#
L1322.IO_GJkgN_Fert_gas <- L1322.IO_R_Fert_F_Yh$X2005[#
      L1322.IO_R_Fert_F_Yh$GCAM_region_ID == 1 &#
      L1322.IO_R_Fert_F_Yh$fuel == "gas" ]#
L1322.Fert_Fuelcost_75USDGJ_gas <- L1322.P_gas_75USDGJ * L1322.IO_GJkgN_Fert_gas
Convert total NH3 cost (2007$/tNH3) to N cost (1975$/kgN)#
Fert_Cost_75USDkgN <- Fert_Cost_07USDtNH3 * conv_2007_1975_USD * conv_kg_t / conv_NH3_N#
#
#Calculate non-fuel cost of natural gas steam reforming (includes delivery charges)#
L1322.Fert_NEcost_75USDkgN_gas <- Fert_Cost_75USDkgN - L1322.Fert_Fuelcost_75USDGJ_gas#
#
#Use H2A technology characteristics to derive characteristics of other technologies#
printlog( "Deriving costs for gas with CCS, coal, and coal with CCS using H2A model inputs" )#
#NOTE: Because our NGSR NEcosts were calculated as a residual from mkt prices, and include delivery costs,#
#not using a ratio of costs, but rather an arithmetic adder. H2A costs are in $/kgH; convert to N-equivalent#
printlog( "NOTE: Using arithmetic cost adders based on costs of natural gas steam reforming" )#
#Gas with CCS#
#First, calculate costs in 1975USD per kg N#
H2A_Prod_Tech$NEcost_75USDkgN <- H2A_Prod_Tech$NEcost * conv_2005_1975_USD * NH3_H_frac / conv_NH3_N#
#
#Derive costs as the cost of NGSR plus the specified cost adder#
L1322.Fert_NEcost_75USDkgN_gasCCS <- L1322.Fert_NEcost_75USDkgN_gas +#
      H2A_Prod_Tech$NEcost_75USDkgN[ H2A_Prod_Tech$Technology == "Central Natural Gas Sequestration" ] -#
      H2A_Prod_Tech$NEcost_75USDkgN[ H2A_Prod_Tech$Technology == "Central Natural Gas" ]#
#
#Coal#
L1322.Fert_NEcost_75USDkgN_coal <- L1322.Fert_NEcost_75USDkgN_gas +#
      H2A_Prod_Tech$NEcost_75USDkgN[ H2A_Prod_Tech$Technology == "Central Coal" ] -#
      H2A_Prod_Tech$NEcost_75USDkgN[ H2A_Prod_Tech$Technology == "Central Natural Gas" ]#
#
#Coal CCS#
L1322.Fert_NEcost_75USDkgN_coalCCS <- L1322.Fert_NEcost_75USDkgN_gas +#
      H2A_Prod_Tech$NEcost_75USDkgN[ H2A_Prod_Tech$Technology == "Central Coal Sequestration" ] -#
      H2A_Prod_Tech$NEcost_75USDkgN[ H2A_Prod_Tech$Technology == "Central Natural Gas" ]#
#
#Oil#
#For oil, the lack of differentiation in oil-derived products means that the fuel costs are too high#
# Fertilizer is made from relatively low-cost by-products of oil refining#
#Also, the technology is being phased out where it is currently used (primarily India)#
# To minimize price distortions from this phase-out, set the NE cost to 0#
printlog( "Setting NE costs for oil technology to 0" )#
L1322.Fert_NEcost_75USDkgN_oil <- 0#
#
# Build output table with NE costs by technology#
L1322.Fert_NEcost_75USDkgN_F <- data.frame(#
      fuel = c( "gas", "gas CCS", "coal", "coal CCS", "refined liquids" ),#
      NEcost_75USDkgN = c( L1322.Fert_NEcost_75USDkgN_gas, L1322.Fert_NEcost_75USDkgN_gasCCS,#
                           L1322.Fert_NEcost_75USDkgN_coal, L1322.Fert_NEcost_75USDkgN_coalCCS,#
                           L1322.Fert_NEcost_75USDkgN_oil ) )
comments.L1322.Fert_Prod_MtN_R_F_Y <- c( "Fertilizer production by GCAM region / fuel / year","MtN" )#
comments.L1322.IO_R_Fert_F_Yh <- c( "Fertilizer input-output coefs by GCAM region / fuel (base year techs only) / year","GJ per kg N" )#
comments.L1322.in_EJ_R_indenergy_F_Yh <- c( "Adjusted industrial energy use by GCAM region / fuel / year","EJ" )#
comments.L1322.in_EJ_R_indfeed_F_Yh <- c( "Adjusted industrial feedstock use by GCAM region / fuel / year","EJ" )#
comments.L1322.Fert_NEcost_75USDkgN_F <- c( "Fertilizer non-energy costs by technology","75USD/kgN" )#
#write tables as CSV files#
writedata( L1322.Fert_Prod_MtN_R_F_Y, domain="ENERGY_LEVEL1_DATA", fn="L1322.Fert_Prod_MtN_R_F_Y", comments=comments.L1322.Fert_Prod_MtN_R_F_Y )#
writedata( L1322.IO_R_Fert_F_Yh, domain="ENERGY_LEVEL1_DATA", fn="L1322.IO_R_Fert_F_Yh", comments=comments.L1322.IO_R_Fert_F_Yh )#
writedata( L1322.in_EJ_R_indenergy_F_Yh, domain="ENERGY_LEVEL1_DATA", fn="L1322.in_EJ_R_indenergy_F_Yh", comments=comments.L1322.in_EJ_R_indenergy_F_Yh )#
writedata( L1322.in_EJ_R_indfeed_F_Yh, domain="ENERGY_LEVEL1_DATA", fn="L1322.in_EJ_R_indfeed_F_Yh", comments=comments.L1322.in_EJ_R_indfeed_F_Yh )#
writedata( L1322.Fert_NEcost_75USDkgN_F, domain="ENERGY_LEVEL1_DATA", fn="L1322.Fert_NEcost_75USDkgN_F", comments=comments.L1322.Fert_NEcost_75USDkgN_F )
logstop()
Before we can load headers we need some paths defined.  They#
# may be provided by a system environment variable or just#
# having already been set in the workspace#
if( !exists( "ENERGYPROC_DIR" ) ){#
    if( Sys.getenv( "ENERGYPROC" ) != "" ){#
        ENERGYPROC_DIR <- Sys.getenv( "ENERGYPROC" )#
    } else {#
        stop("Could not determine location of energy data system. Please set the R var ENERGYPROC_DIR to the appropriate location")#
    }#
}#
#
# Universal header file - provides logging, file support, etc.#
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L114.wind.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Wind resource supply curves" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID" )#
GIS_ctry_AEZ <- readdata( "AGLU_MAPPINGS", "GIS_ctry_AEZ" )#
Sage_Hyde15_Area <- readdata( "AGLU_GIS_DATA", "Sage_Hyde15_Area" )#
A14.wind_curves <- readdata( "ENERGY_ASSUMPTIONS", "A14.wind_curves" )#
#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# 2a. Wind resource supply curves#
printlog( "Downscaling GCAM 3.0 wind supply curves to countries on the basis of land area" )#
#Calculate land cover shares of GCAM regions within region_GCAM3#
L114.LC_km2_ctry_LT_AEZ <- subset( Sage_Hyde15_Area, Year == max( Year ) )#
L114.LC_km2_ctry_LT_AEZ$iso <- GIS_ctry_AEZ$iso[ match( L114.LC_km2_ctry_LT_AEZ$AEZ_ID, GIS_ctry_AEZ$AEZ_ID ) ]#
L114.LC_km2_ctry <- aggregate( L114.LC_km2_ctry_LT_AEZ[ "Area.km2." ], by=as.list( L114.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )
L114.LC_km2_ctry$region_GCAM3 <- iso_GCAM_regID$region_GCAM3[ match( L114.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L114.LC_km2_RG3 <- aggregate( L114.LC_km2_ctry[ "Area.km2." ], by=as.list( L114.LC_km2_ctry[ "region_GCAM3" ] ), sum )#
L114.LC_km2_ctry$area_RG3 <- L114.LC_km2_RG3$Area.km2.[ match( L114.LC_km2_ctry$region_GCAM3, L114.LC_km2_RG3$region_GCAM3 ) ]#
L114.LC_km2_ctry$share <- L114.LC_km2_ctry$Area.km2. / L114.LC_km2_ctry$area_RG3#
L114.LC_km2_ctry$maxSubResource_RG3 <- A14.wind_curves$maxSubResource[ match( L114.LC_km2_ctry$region_GCAM3, A14.wind_curves$region_GCAM3 ) ]#
L114.LC_km2_ctry$maxSubResource <- L114.LC_km2_ctry$share * L114.LC_km2_ctry$maxSubResource_RG3#
#
printlog( "Aggregating country-level supplies by GCAM regions")#
L114.LC_km2_ctry[[R]]<- iso_GCAM_regID[[R]][ match( L114.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L114.LC_km2_R <- aggregate( L114.LC_km2_ctry[ "maxSubResource" ], by=as.list( L114.LC_km2_ctry[ R ] ), sum )
L114.RsrcCurves_EJ_R_wind <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A14.wind_curves$resource ),#
      subresource = unique( A14.wind_curves$subresource) )#
L114.RsrcCurves_EJ_R_wind$maxSubResource <- L114.LC_km2_R$maxSubResource[ match( L114.RsrcCurves_EJ_R_wind[[R]], L114.LC_km2_R[[R]]) ]#
L114.RsrcCurves_EJ_R_wind[ c( "mid.price", "curve.exponent" ) ] <- A14.wind_curves[#
      rep( 1, times = nrow( L114.RsrcCurves_EJ_R_wind ) ),#
      c( "mid.price", "curve.exponent" ) ]
L114.RsrcCurves_EJ_R_wind
GCAM_region_names
30*.36/9170000
30*.36/9170
36193/9707000
36193/9707000*30
L114.RsrcCurves_EJ_R_wind[ is.na( L114.RsrcCurves_EJ_R_wind ) ] <- 0.3
L114.RsrcCurves_EJ_R_wind
logstop()
source("../energy-processing-code/level1/L114.wind.R")
if( !exists( "ENERGYPROC_DIR" ) ){#
    if( Sys.getenv( "ENERGYPROC" ) != "" ){#
        ENERGYPROC_DIR <- Sys.getenv( "ENERGYPROC" )#
    } else {#
        stop("Could not determine location of energy data system. Please set the R var ENERGYPROC_DIR to the appropriate location")#
    }#
}#
#
# Universal header file - provides logging, file support, etc.#
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L116.geo.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Geothermal resource supply curves" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID" )#
GIS_ctry_AEZ <- readdata( "AGLU_MAPPINGS", "GIS_ctry_AEZ" )#
Sage_Hyde15_Area <- readdata( "AGLU_GIS_DATA", "Sage_Hyde15_Area" )#
A16.geo_curves <- readdata( "ENERGY_ASSUMPTIONS", "A16.geo_curves" )#
A16.EGS_curves <- readdata( "ENERGY_ASSUMPTIONS", "A16.EGS_curves" )
L116.LC_km2_ctry_LT_AEZ <- subset( Sage_Hyde15_Area, Year == max( Year ) )#
L116.LC_km2_ctry_LT_AEZ$iso <- GIS_ctry_AEZ$iso[ match( L116.LC_km2_ctry_LT_AEZ$AEZ_ID, GIS_ctry_AEZ$AEZ_ID ) ]#
L116.LC_km2_ctry <- aggregate( L116.LC_km2_ctry_LT_AEZ[ "Area.km2." ],#
      by=as.list( L116.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )#
#
#Match in the GCAM 3.0 region and aggregate to compute shares of countries within GCAM 3.0 region#
L116.LC_km2_ctry$region_GCAM3 <- iso_GCAM_regID$region_GCAM3[ match( L116.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L116.LC_km2_RG3 <- aggregate( L116.LC_km2_ctry[ "Area.km2." ], by=as.list( L116.LC_km2_ctry[ "region_GCAM3" ] ), sum )#
L116.LC_km2_ctry$area_RG3 <- L116.LC_km2_RG3$Area.km2.[ match( L116.LC_km2_ctry$region_GCAM3, L116.LC_km2_RG3$region_GCAM3 ) ]#
L116.LC_km2_ctry$share <- L116.LC_km2_ctry$Area.km2. / L116.LC_km2_ctry$area_RG3#
#
#Repeat by number of grades, and match in the available quantities#
#Hydrothermal#
L116.Available_EJ_ctry_geo <- repeat_and_add_vector( L116.LC_km2_ctry, "grade", unique( A16.geo_curves$grade ) )#
L116.Available_EJ_ctry_geo$available_RG3 <- A16.geo_curves$available[#
      match( vecpaste( L116.Available_EJ_ctry_geo[ c( "region_GCAM3", "grade" ) ] ), vecpaste( A16.geo_curves[ c( "region_GCAM3", "grade" ) ] ) ) ]#
L116.Available_EJ_ctry_geo$available <- L116.Available_EJ_ctry_geo$share * L116.Available_EJ_ctry_geo$available_RG3
L116.Available_EJ_ctry_EGS <- repeat_and_add_vector( L116.LC_km2_ctry, "grade", unique( A16.EGS_curves$grade ) )#
L116.Available_EJ_ctry_EGS$available_RG3 <- A16.EGS_curves$available[#
      match( vecpaste( L116.Available_EJ_ctry_EGS[ c( "region_GCAM3", "grade" ) ] ), vecpaste( A16.EGS_curves[ c( "region_GCAM3", "grade" ) ] ) ) ]#
L116.Available_EJ_ctry_EGS$available <- L116.Available_EJ_ctry_EGS$share * L116.Available_EJ_ctry_EGS$available_RG3
Hydrothermal#
L116.Available_EJ_ctry_geo[[R]]<- iso_GCAM_regID[[R]][ match( L116.Available_EJ_ctry_geo$iso, iso_GCAM_regID$iso ) ]#
L116.Available_EJ_R_geo <- aggregate( L116.Available_EJ_ctry_geo[ "available" ], by=as.list( L116.Available_EJ_ctry_geo[ c( R, "grade" ) ] ), sum )#
#
#EGS#
L116.Available_EJ_ctry_EGS[[R]]<- iso_GCAM_regID[[R]][ match( L116.Available_EJ_ctry_EGS$iso, iso_GCAM_regID$iso ) ]#
L116.Available_EJ_R_EGS <- aggregate( L116.Available_EJ_ctry_EGS[ "available" ], by=as.list( L116.Available_EJ_ctry_EGS[ c( R, "grade" ) ] ), sum )#
#
printlog( "Building hydrothermal supply curves")#
L116.RsrcCurves_EJ_R_geo <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A16.geo_curves$resource ),#
      subresource = unique( A16.geo_curves$subresource) )#
L116.RsrcCurves_EJ_R_geo <- repeat_and_add_vector( L116.RsrcCurves_EJ_R_geo, "grade", unique(  A16.geo_curves$grade ) )#
L116.RsrcCurves_EJ_R_geo$available <- L116.Available_EJ_R_geo$available[#
      match( vecpaste( L116.RsrcCurves_EJ_R_geo[ c( R, "grade" ) ] ),#
             vecpaste( L116.Available_EJ_R_geo[ c( R, "grade" ) ] ) ) ]#
#NOTE: currently assuming that all regions have the same price points#
L116.RsrcCurves_EJ_R_geo$extractioncost <- A16.geo_curves$extractioncost[#
      match( L116.RsrcCurves_EJ_R_geo$grade, A16.geo_curves$grade ) ]
L116.RsrcCurves_EJ_R_geo
A16.geo_curves
dim(L116.LC_km2_ctry)
L116.LC_km2_ctry
dim(L116.LC_km2_ctry_LT_AEZ)
head(L116.LC_km2_ctry_LT_AEZ)
L116.LC_km2_ctry <- aggregate( L116.LC_km2_ctry_LT_AEZ[ "Area.km2." ],#
      by=as.list( L116.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )
head(L116.LC_km2_ctry)
subset(L116.LC_km2_ctry, iso == "chn")
36/9415859
36000/9415859
printlog( "Downscaling GCAM 3.0 wind supply curves to countries on the basis of land area" )#
#Calculate land cover shares of GCAM regions within region_GCAM3#
L114.LC_km2_ctry_LT_AEZ <- subset( Sage_Hyde15_Area, Year == max( Year ) )#
L114.LC_km2_ctry_LT_AEZ$iso <- GIS_ctry_AEZ$iso[ match( L114.LC_km2_ctry_LT_AEZ$AEZ_ID, GIS_ctry_AEZ$AEZ_ID ) ]#
L114.LC_km2_ctry <- aggregate( L114.LC_km2_ctry_LT_AEZ[ "Area.km2." ], by=as.list( L114.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )#
#
##ADD in Taiwan#
L116.LC_km2_ctry <- rbind( L116.LC_km2_ctry, data.frame( iso = "twn", .Area.km2. = 36000))#
#
#Match in the GCAM 3.0 region and aggregate to compute shares of countries within GCAM 3.0 region#
L114.LC_km2_ctry$region_GCAM3 <- iso_GCAM_regID$region_GCAM3[ match( L114.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L114.LC_km2_RG3 <- aggregate( L114.LC_km2_ctry[ "Area.km2." ], by=as.list( L114.LC_km2_ctry[ "region_GCAM3" ] ), sum )#
L114.LC_km2_ctry$area_RG3 <- L114.LC_km2_RG3$Area.km2.[ match( L114.LC_km2_ctry$region_GCAM3, L114.LC_km2_RG3$region_GCAM3 ) ]#
L114.LC_km2_ctry$share <- L114.LC_km2_ctry$Area.km2. / L114.LC_km2_ctry$area_RG3#
L114.LC_km2_ctry$maxSubResource_RG3 <- A14.wind_curves$maxSubResource[ match( L114.LC_km2_ctry$region_GCAM3, A14.wind_curves$region_GCAM3 ) ]#
L114.LC_km2_ctry$maxSubResource <- L114.LC_km2_ctry$share * L114.LC_km2_ctry$maxSubResource_RG3#
#
printlog( "Aggregating country-level supplies by GCAM regions")#
L114.LC_km2_ctry[[R]]<- iso_GCAM_regID[[R]][ match( L114.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L114.LC_km2_R <- aggregate( L114.LC_km2_ctry[ "maxSubResource" ], by=as.list( L114.LC_km2_ctry[ R ] ), sum )#
#
L114.RsrcCurves_EJ_R_wind <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A14.wind_curves$resource ),#
      subresource = unique( A14.wind_curves$subresource) )#
L114.RsrcCurves_EJ_R_wind$maxSubResource <- L114.LC_km2_R$maxSubResource[ match( L114.RsrcCurves_EJ_R_wind[[R]], L114.LC_km2_R[[R]]) ]#
L114.RsrcCurves_EJ_R_wind[ c( "mid.price", "curve.exponent" ) ] <- A14.wind_curves[#
      rep( 1, times = nrow( L114.RsrcCurves_EJ_R_wind ) ),#
      c( "mid.price", "curve.exponent" ) ]
L114.RsrcCurves_EJ_R_wind
L114.LC_km2_ctry <- aggregate( L114.LC_km2_ctry_LT_AEZ[ "Area.km2." ], by=as.list( L114.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )
L116.LC_km2_ctry <- rbind( L116.LC_km2_ctry, data.frame( iso = "twn", .Area.km2. = 36000))
names(L114.LC_km2_ctry)
data.frame( iso = "twn", .Area.km2. = 36000)
L114.LC_km2_ctry <- aggregate( L114.LC_km2_ctry_LT_AEZ[ "Area.km2." ], by=as.list( L114.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )#
#
##ADD in Taiwan#
L114.LC_km2_ctry <- rbind( L114.LC_km2_ctry, data.frame( iso = "twn", .Area.km2. = 36000) )
L114.LC_km2_ctry_LT_AEZ <- subset( Sage_Hyde15_Area, Year == max( Year ) )#
L114.LC_km2_ctry_LT_AEZ$iso <- GIS_ctry_AEZ$iso[ match( L114.LC_km2_ctry_LT_AEZ$AEZ_ID, GIS_ctry_AEZ$AEZ_ID ) ]#
L114.LC_km2_ctry <- aggregate( L114.LC_km2_ctry_LT_AEZ[ "Area.km2." ], by=as.list( L114.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )
names(L114.LC_km2_ctry)
names(L114.LC_km2_ctry)
names(data.frame( iso = "twn", .Area.km2. = 36000))
L114.LC_km2_ctry <- rbind( L114.LC_km2_ctry, data.frame( iso = "twn", Area.km2. = 36000) )
tail(L114.LC_km2_ctry)
L114.LC_km2_ctry$region_GCAM3 <- iso_GCAM_regID$region_GCAM3[ match( L114.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L114.LC_km2_RG3 <- aggregate( L114.LC_km2_ctry[ "Area.km2." ], by=as.list( L114.LC_km2_ctry[ "region_GCAM3" ] ), sum )#
L114.LC_km2_ctry$area_RG3 <- L114.LC_km2_RG3$Area.km2.[ match( L114.LC_km2_ctry$region_GCAM3, L114.LC_km2_RG3$region_GCAM3 ) ]#
L114.LC_km2_ctry$share <- L114.LC_km2_ctry$Area.km2. / L114.LC_km2_ctry$area_RG3#
L114.LC_km2_ctry$maxSubResource_RG3 <- A14.wind_curves$maxSubResource[ match( L114.LC_km2_ctry$region_GCAM3, A14.wind_curves$region_GCAM3 ) ]#
L114.LC_km2_ctry$maxSubResource <- L114.LC_km2_ctry$share * L114.LC_km2_ctry$maxSubResource_RG3#
#
printlog( "Aggregating country-level supplies by GCAM regions")#
L114.LC_km2_ctry[[R]]<- iso_GCAM_regID[[R]][ match( L114.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L114.LC_km2_R <- aggregate( L114.LC_km2_ctry[ "maxSubResource" ], by=as.list( L114.LC_km2_ctry[ R ] ), sum )#
#
L114.RsrcCurves_EJ_R_wind <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A14.wind_curves$resource ),#
      subresource = unique( A14.wind_curves$subresource) )#
L114.RsrcCurves_EJ_R_wind$maxSubResource <- L114.LC_km2_R$maxSubResource[ match( L114.RsrcCurves_EJ_R_wind[[R]], L114.LC_km2_R[[R]]) ]#
L114.RsrcCurves_EJ_R_wind[ c( "mid.price", "curve.exponent" ) ] <- A14.wind_curves[#
      rep( 1, times = nrow( L114.RsrcCurves_EJ_R_wind ) ),#
      c( "mid.price", "curve.exponent" ) ]
L114.RsrcCurves_EJ_R_wind
L116.LC_km2_ctry_LT_AEZ <- subset( Sage_Hyde15_Area, Year == max( Year ) )#
L116.LC_km2_ctry_LT_AEZ$iso <- GIS_ctry_AEZ$iso[ match( L116.LC_km2_ctry_LT_AEZ$AEZ_ID, GIS_ctry_AEZ$AEZ_ID ) ]#
L116.LC_km2_ctry <- aggregate( L116.LC_km2_ctry_LT_AEZ[ "Area.km2." ],#
      by=as.list( L116.LC_km2_ctry_LT_AEZ[ "iso" ] ), sum )#
#
###ADD IN TAIWAN TO THE LAND AREA#
L116.LC_km2_ctry <- rbind( L116.LC_km2_ctry, data.frame( iso = "twn", Area.km2. = 36000))
L116.LC_km2_ctry$region_GCAM3 <- iso_GCAM_regID$region_GCAM3[ match( L116.LC_km2_ctry$iso, iso_GCAM_regID$iso ) ]#
L116.LC_km2_RG3 <- aggregate( L116.LC_km2_ctry[ "Area.km2." ], by=as.list( L116.LC_km2_ctry[ "region_GCAM3" ] ), sum )#
L116.LC_km2_ctry$area_RG3 <- L116.LC_km2_RG3$Area.km2.[ match( L116.LC_km2_ctry$region_GCAM3, L116.LC_km2_RG3$region_GCAM3 ) ]#
L116.LC_km2_ctry$share <- L116.LC_km2_ctry$Area.km2. / L116.LC_km2_ctry$area_RG3#
#
#Repeat by number of grades, and match in the available quantities#
#Hydrothermal#
L116.Available_EJ_ctry_geo <- repeat_and_add_vector( L116.LC_km2_ctry, "grade", unique( A16.geo_curves$grade ) )#
L116.Available_EJ_ctry_geo$available_RG3 <- A16.geo_curves$available[#
      match( vecpaste( L116.Available_EJ_ctry_geo[ c( "region_GCAM3", "grade" ) ] ), vecpaste( A16.geo_curves[ c( "region_GCAM3", "grade" ) ] ) ) ]#
L116.Available_EJ_ctry_geo$available <- L116.Available_EJ_ctry_geo$share * L116.Available_EJ_ctry_geo$available_RG3#
#
#EGS#
L116.Available_EJ_ctry_EGS <- repeat_and_add_vector( L116.LC_km2_ctry, "grade", unique( A16.EGS_curves$grade ) )#
L116.Available_EJ_ctry_EGS$available_RG3 <- A16.EGS_curves$available[#
      match( vecpaste( L116.Available_EJ_ctry_EGS[ c( "region_GCAM3", "grade" ) ] ), vecpaste( A16.EGS_curves[ c( "region_GCAM3", "grade" ) ] ) ) ]#
L116.Available_EJ_ctry_EGS$available <- L116.Available_EJ_ctry_EGS$share * L116.Available_EJ_ctry_EGS$available_RG3#
#
printlog( "Aggregating country-level supplies by GCAM regions")#
#Hydrothermal#
L116.Available_EJ_ctry_geo[[R]]<- iso_GCAM_regID[[R]][ match( L116.Available_EJ_ctry_geo$iso, iso_GCAM_regID$iso ) ]#
L116.Available_EJ_R_geo <- aggregate( L116.Available_EJ_ctry_geo[ "available" ], by=as.list( L116.Available_EJ_ctry_geo[ c( R, "grade" ) ] ), sum )#
#
#EGS#
L116.Available_EJ_ctry_EGS[[R]]<- iso_GCAM_regID[[R]][ match( L116.Available_EJ_ctry_EGS$iso, iso_GCAM_regID$iso ) ]#
L116.Available_EJ_R_EGS <- aggregate( L116.Available_EJ_ctry_EGS[ "available" ], by=as.list( L116.Available_EJ_ctry_EGS[ c( R, "grade" ) ] ), sum )#
#
printlog( "Building hydrothermal supply curves")#
L116.RsrcCurves_EJ_R_geo <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A16.geo_curves$resource ),#
      subresource = unique( A16.geo_curves$subresource) )#
L116.RsrcCurves_EJ_R_geo <- repeat_and_add_vector( L116.RsrcCurves_EJ_R_geo, "grade", unique(  A16.geo_curves$grade ) )#
L116.RsrcCurves_EJ_R_geo$available <- L116.Available_EJ_R_geo$available[#
      match( vecpaste( L116.RsrcCurves_EJ_R_geo[ c( R, "grade" ) ] ),#
             vecpaste( L116.Available_EJ_R_geo[ c( R, "grade" ) ] ) ) ]#
#NOTE: currently assuming that all regions have the same price points#
L116.RsrcCurves_EJ_R_geo$extractioncost <- A16.geo_curves$extractioncost[#
      match( L116.RsrcCurves_EJ_R_geo$grade, A16.geo_curves$grade ) ]#
#
printlog( "Building EGS supply curves")#
L116.RsrcCurves_EJ_R_EGS <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A16.EGS_curves$resource ),#
      subresource = unique( A16.EGS_curves$subresource) )#
L116.RsrcCurves_EJ_R_EGS <- repeat_and_add_vector( L116.RsrcCurves_EJ_R_EGS, "grade", unique(  A16.EGS_curves$grade ) )#
L116.RsrcCurves_EJ_R_EGS$available <- L116.Available_EJ_R_EGS$available[#
      match( vecpaste( L116.RsrcCurves_EJ_R_EGS[ c( R, "grade" ) ] ),#
             vecpaste( L116.Available_EJ_R_EGS[ c( R, "grade" ) ] ) ) ]#
#NOTE: currently assuming that all regions have the same price points#
L116.RsrcCurves_EJ_R_EGS$extractioncost <- A16.EGS_curves$extractioncost[#
      match( L116.RsrcCurves_EJ_R_EGS$grade, A16.EGS_curves$grade ) ]
L116.RsrcCurves_EJ_R_EGS
L116.RsrcCurves_EJ_R_geo
subset(L100.IEAfull, FLOW == "TGTL" & X2011 != 0)
subset(L100.IEAfull, FLOW == "TGTL" & X2010 != 0)
ncol(L100.IEAfull)
subset(L100.IEAfull, FLOW == "TGTL" & X2010 != 0, select = c(1:3,41:43))
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L124.LC_R_UnMgd_Yh_AEZ.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Grassland, shrubland, unmanaged pasture, and unmanaged forest by region / historical year / AEZ" )#
# -----------------------------------------------------------------------------#
# 1. Read data#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
L120.LC_bm2_R_LT_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L120.LC_bm2_R_LT_Yh_AEZ" )#
L122.LC_bm2_R_ExtraCropLand_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L122.LC_bm2_R_ExtraCropLand_Yh_AEZ" )#
L123.LC_bm2_R_MgdPast_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L123.LC_bm2_R_MgdPast_Yh_AEZ" )#
L123.LC_bm2_R_MgdFor_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L123.LC_bm2_R_MgdFor_Yh_AEZ" )
subset(L120.LC_bm2_R_LT_Yh_AEZ, GCAM_region_ID==3 & L120.LC_bm2_R_LT_Yh_AEZ$AEZ == "AEZ01")
L124.LC_bm2_R_Shrub_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Shrubland", ]#
L124.LC_bm2_R_Grass_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Grassland", ]#
#unmanaged pasture is equal to total pasture from Hyde minus managed pasture#
printlog( "Calculating unmanaged pasture and forest as total minus managed" )#
L124.LC_bm2_R_UnMgdPast_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Pasture", ]#
L124.LC_bm2_R_UnMgdPast_Yh_AEZ[ X_land_cover_years ] <- L124.LC_bm2_R_UnMgdPast_Yh_AEZ[ X_land_cover_years ] - L123.LC_bm2_R_MgdPast_Yh_AEZ[ X_land_cover_years ]#
L124.LC_bm2_R_UnMgdPast_Yh_AEZ[[LT]]<- "UnmanagedPasture"#
#unmanaged forest is equal to total forest from Sage/Hyde minus managed forest#
L124.LC_bm2_R_UnMgdFor_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Forest", ]#
L124.LC_bm2_R_UnMgdFor_Yh_AEZ[ X_land_cover_years ] <- L124.LC_bm2_R_UnMgdFor_Yh_AEZ[ X_land_cover_years ] - L123.LC_bm2_R_MgdFor_Yh_AEZ[ X_land_cover_years ]#
L124.LC_bm2_R_UnMgdFor_Yh_AEZ[[LT]]<- "UnmanagedForest"#
#
#The above land categories all have land deducted to cover the "extra" cropland that came from setting a maximum harvested:cropped ratio.#
#This deduction takes place according to the relative shares of land cover.#
#Calculate these shares#
printlog( "NOTE: Expansion in cropland is balanced by deduction from these unmanaged land types" )#
printlog( "Calculating adjusted land cover of grassland, shrubland, unmanaged pasture, and unmanaged forest" )#
L124.LC_bm2_R_LTunmgd_Yh_AEZ <- rbind(#
      L124.LC_bm2_R_Shrub_Yh_AEZ, L124.LC_bm2_R_Grass_Yh_AEZ, L124.LC_bm2_R_UnMgdPast_Yh_AEZ, L124.LC_bm2_R_UnMgdFor_Yh_AEZ )#
L124.LC_bm2_R_UnMgd_Yh_AEZ <- L124.LC_bm2_R_LTunmgd_Yh_AEZ#
L124.LC_bm2_R_UnMgd_Yh_AEZ[[LT]]<- "All_Unmanaged"#
L124.LC_bm2_R_UnMgd_Yh_AEZ <- aggregate( L124.LC_bm2_R_UnMgd_Yh_AEZ[ X_land_cover_years ], by=as.list( L124.LC_bm2_R_UnMgd_Yh_AEZ[ R_LT_AEZ ] ), sum )#
#Calculate adjusted total unmanaged land as total unmanaged minus "extra" cropland#
L124.LC_UnMgdAdj_R_Yh_AEZ <- L124.LC_bm2_R_UnMgd_Yh_AEZ#
L124.LC_UnMgdAdj_R_Yh_AEZ[ X_land_cover_years ] <-#
      ( L124.LC_bm2_R_UnMgd_Yh_AEZ[ X_land_cover_years ] - L122.LC_bm2_R_ExtraCropLand_Yh_AEZ[#
        match( vecpaste( L124.LC_bm2_R_UnMgd_Yh_AEZ[ R_AEZ ] ), vecpaste( L122.LC_bm2_R_ExtraCropLand_Yh_AEZ[ R_AEZ] ) ),#
        X_land_cover_years ] ) / #
      L124.LC_bm2_R_UnMgd_Yh_AEZ[ X_land_cover_years ]#
L124.LC_UnMgdAdj_R_Yh_AEZ[ is.na( L124.LC_UnMgdAdj_R_Yh_AEZ ) ] <- 1#
#Check to make sure that enough land is available for the cropland expansion in all regions/AEZs#
if( any( L124.LC_UnMgdAdj_R_Yh_AEZ[ X_land_cover_years ] < 0 ) ) {#
	stop( "Increase in cropland exceeds available unmanaged land")#
}
min(L124.LC_UnMgdAdj_R_Yh_AEZ[X_land_cover_years])
X_land_cover_years
dim(L124.LC_UnMgdAdj_R_Yh_AEZ)
L124.LC_UnMgdAdj_R_Yh_AEZ[1:10,1:10]
L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj <- L124.LC_bm2_R_LTunmgd_Yh_AEZ#
L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ X_land_cover_years ] <- L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ X_land_cover_years ] * L124.LC_UnMgdAdj_R_Yh_AEZ[#
      match( vecpaste( L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ R_AEZ ] ), vecpaste( L124.LC_UnMgdAdj_R_Yh_AEZ[ R_AEZ ] ) ),#
      X_land_cover_years ]#
#
L124.LC_bm2_R_Shrub_Yh_AEZ_adj <- L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[[LT]] == "Shrubland", ]#
L124.LC_bm2_R_Grass_Yh_AEZ_adj <- L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[[LT]] == "Grassland", ]#
L124.LC_bm2_R_UnMgdPast_Yh_AEZ_adj <- L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[[LT]] == "UnmanagedPasture", ]#
L124.LC_bm2_R_UnMgdFor_Yh_AEZ_adj <- L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[ L124.LC_bm2_R_LTunmgd_Yh_AEZ_adj[[LT]] == "UnmanagedForest", ]
subset(L124.LC_bm2_R_UnMgdFor_Yh_AEZ_adj, GCAM_region_ID==3 & AEZ == "AEZ01")
subset( L124.LC_bm2_R_UnMgdFor_Yh_AEZ, GCAM_region_ID==3 & AEZ == "AEZ01")
subset( L124.LC_bm2_R_UnMgdFor_Yh_AEZ, GCAM_region_ID==3 )
logstop()
logstop()
if( !exists( "AGLUPROC_DIR" ) ){#
    if( Sys.getenv( "AGLUPROC" ) != "" ){#
        AGLUPROC_DIR <- Sys.getenv( "AGLUPROC" )#
    } else {#
        stop("Could not determine location of aglu processing scripts, please set the R var AGLUPROC_DIR to the appropriate location")#
    }#
}#
# Universal header file - provides logging, file support, etc.#
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L123.LC_R_MgdPastFor_Yh_AEZ.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Managed forest and pasture cover by region / crop / historical year / AEZ" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
L102.ag_Prod_Mt_R_C_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L102.ag_Prod_Mt_R_C_AEZ" )#
L102.ag_HA_bm2_R_C_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L102.ag_HA_bm2_R_C_AEZ" )#
L108.ag_Feed_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L108.ag_Feed_Mt_R_C_Y" )#
L110.For_ALL_bm3_R_Y <- readdata( "AGLU_LEVEL1_DATA", "L110.For_ALL_bm3_R_Y" )#
L120.LC_bm2_R_LT_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L120.LC_bm2_R_LT_Yh_AEZ" )#
L121.VegC_kgm2_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.VegC_kgm2_R_LT_AEZ" )#
L121.MatureAge_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.MatureAge_R_LT_AEZ" )#
L101.Pop_thous_R_Yh <- readdata( "SOCIO_LEVEL1_DATA", "L101.Pop_thous_R_Yh" )
2. Perform computations#
printlog( "Part 1: Managed pasture production and land cover" )#
#Calculate yields of pasture by AEZ from the GTAP data on FodderGrass ( hay ) production. Assume the global average by AEZ in all regions.#
printlog( "NOTE: Using global average hay yields by AEZ to estimate production of grass in all pastures" )#
#Production#
L123.ag_Prod_Mt_R_Grass_AEZ <- subset( L102.ag_Prod_Mt_R_C_AEZ, GCAM_commodity=="FodderGrass" )#
L123.ag_Prod_Mt_Grass_AEZ <- aggregate( L123.ag_Prod_Mt_R_Grass_AEZ[ AEZs ], by=as.list( L123.ag_Prod_Mt_R_Grass_AEZ[ C ] ), sum )#
#Harvested area#
L123.ag_HA_bm2_R_Grass_AEZ <- subset( L102.ag_HA_bm2_R_C_AEZ, GCAM_commodity=="FodderGrass" )#
L123.ag_HA_bm2_Grass_AEZ <- aggregate( L123.ag_HA_bm2_R_Grass_AEZ[ AEZs ], by=as.list( L123.ag_HA_bm2_R_Grass_AEZ[ C ] ), sum )#
#Yield#
L123.ag_Yield_kgm2_Past_AEZ <- L123.ag_Prod_Mt_Grass_AEZ#
L123.ag_Yield_kgm2_Past_AEZ[ AEZs ] <- L123.ag_Prod_Mt_Grass_AEZ[ AEZs ] / L123.ag_HA_bm2_Grass_AEZ[ AEZs ]#
L123.ag_Yield_kgm2_Past_AEZ[ is.na( L123.ag_Yield_kgm2_Past_AEZ ) ] <- 0#
#Calculate bottom-up estimate of pasture production by region and AEZ ( yield times land area )#
printlog( "Calculating total pasture grass production by region and AEZ" )#
L123.LC_bm2_R_Past_Y_AEZ <- subset( L120.LC_bm2_R_LT_Yh_AEZ, Land_Type=="Pasture", select = c( R_LT_AEZ, X_AGLU_historical_years ) )#
L123.ag_Yield_kgm2_Past_AEZ.melt <- melt( L123.ag_Yield_kgm2_Past_AEZ, id.vars = C, variable_name = "AEZ" ) #
#
L123.ag_potentialProd_Mt_R_Past_Y_AEZ <- L123.LC_bm2_R_Past_Y_AEZ#
L123.ag_potentialProd_Mt_R_Past_Y_AEZ[ X_AGLU_historical_years ] <- L123.LC_bm2_R_Past_Y_AEZ[ X_AGLU_historical_years ] * L123.ag_Yield_kgm2_Past_AEZ.melt$value[#
      match( L123.LC_bm2_R_Past_Y_AEZ$AEZ, L123.ag_Yield_kgm2_Past_AEZ.melt$AEZ ) ]#
#Use this "potential production" to disaggregate actual pastureland production to AEZs#
printlog( "NOTE: using pasture grass production by region and AEZ to disaggregate regional pasture consumption to AEZ" )#
L123.ag_potentialProd_Mt_R_Past_Y <- aggregate( L123.ag_potentialProd_Mt_R_Past_Y_AEZ[ X_AGLU_historical_years ], by=as.list( L123.ag_potentialProd_Mt_R_Past_Y_AEZ[ R_LT ] ), sum )#
L123.ag_PastureProdfrac_R_Y_AEZ <- L123.ag_potentialProd_Mt_R_Past_Y_AEZ[ R_LT_AEZ ]#
L123.ag_PastureProdfrac_R_Y_AEZ[ X_AGLU_historical_years ] <- L123.ag_potentialProd_Mt_R_Past_Y_AEZ[ X_AGLU_historical_years ] / L123.ag_potentialProd_Mt_R_Past_Y[#
      match( L123.ag_potentialProd_Mt_R_Past_Y_AEZ[[R]], L123.ag_potentialProd_Mt_R_Past_Y[[R]] ),#
      X_AGLU_historical_years ]#
#For regions that do not exist, return NaNs to 0#
L123.ag_PastureProdfrac_R_Y_AEZ[ is.na( L123.ag_PastureProdfrac_R_Y_AEZ ) ] <- 0#
L123.ag_Prod_Mt_R_Past_Y_AEZ <- L123.ag_PastureProdfrac_R_Y_AEZ[ R_LT_AEZ ]#
names( L123.ag_Prod_Mt_R_Past_Y_AEZ )[ names( L123.ag_Prod_Mt_R_Past_Y_AEZ) == LT ] <- C#
L123.ag_Prod_Mt_R_Past_Y_AEZ[ X_AGLU_historical_years ] <- L123.ag_PastureProdfrac_R_Y_AEZ[ X_AGLU_historical_years ] * L108.ag_Feed_Mt_R_C_Y[#
      match( vecpaste( L123.ag_Prod_Mt_R_Past_Y_AEZ[ R_C ] ), vecpaste( L108.ag_Feed_Mt_R_C_Y[ R_C ] ) ),#
      X_AGLU_historical_years ]#
#Calculate land requirements.#
printlog( "Calculating pasture land required to produce grass consumed in pastures. This is managed pasture" )#
L123.LC_bm2_R_MgdPast_Y_AEZ <- L123.ag_Prod_Mt_R_Past_Y_AEZ[ R_C_AEZ ]#
L123.LC_bm2_R_MgdPast_Y_AEZ[ X_AGLU_historical_years ] <- L123.ag_Prod_Mt_R_Past_Y_AEZ[ X_AGLU_historical_years ] / L123.ag_Yield_kgm2_Past_AEZ.melt$value[#
      match( L123.ag_Prod_Mt_R_Past_Y_AEZ$AEZ, L123.ag_Yield_kgm2_Past_AEZ.melt$AEZ ) ]#
L123.LC_bm2_R_MgdPast_Y_AEZ[ is.na(L123.LC_bm2_R_MgdPast_Y_AEZ ) ] <- 0#
names( L123.LC_bm2_R_MgdPast_Y_AEZ )[ names( L123.LC_bm2_R_MgdPast_Y_AEZ) == C ] <- LT#
#Where managed pasture is greater than assumed threshold percentage of total pasture, reduce the managed pasture land.#
#Output is unaffected so these regions have higher yields.#
printlog( "Applying maximum percentage of any region/AEZs pasture that is allowed to be in production (managed)" )#
printlog( "NOTE: In region/AEZs where applicable, this threshold will result in increased pasture yields" )#
L123.LC_MgdPastFrac_Y_AEZ <- L123.LC_bm2_R_MgdPast_Y_AEZ[ R_LT_AEZ ]#
L123.LC_MgdPastFrac_Y_AEZ[ X_AGLU_historical_years ] <-#
      L123.LC_bm2_R_MgdPast_Y_AEZ[ X_AGLU_historical_years ] / L123.LC_bm2_R_Past_Y_AEZ[ X_AGLU_historical_years ]#
L123.LC_MgdPastFrac_Y_AEZ[ is.na( L123.LC_MgdPastFrac_Y_AEZ) ] <- 0#
L123.LC_MgdPastFrac_Y_AEZ_adj <- L123.LC_MgdPastFrac_Y_AEZ#
L123.LC_MgdPastFrac_Y_AEZ_adj[ X_AGLU_historical_years ][ L123.LC_MgdPastFrac_Y_AEZ_adj[ X_AGLU_historical_years ] > max_MgdPast_frac ] <- max_MgdPast_frac#
#
#Recalculate managed pasture land, adjusted by assumed maximum portion that can be managed#
L123.LC_bm2_R_MgdPast_Y_AEZ_adj <- L123.LC_bm2_R_Past_Y_AEZ[ R_LT_AEZ ]#
L123.LC_bm2_R_MgdPast_Y_AEZ_adj[ X_AGLU_historical_years ] <-#
      L123.LC_bm2_R_Past_Y_AEZ[ X_AGLU_historical_years ] * L123.LC_MgdPastFrac_Y_AEZ_adj[ X_AGLU_historical_years ]#
#Calculate pasture yield#
L123.ag_Yield_kgm2_R_Past_Y_AEZ <- L123.ag_Prod_Mt_R_Past_Y_AEZ[ R_C_AEZ ]#
L123.ag_Yield_kgm2_R_Past_Y_AEZ[ X_AGLU_historical_years ] <-#
      L123.ag_Prod_Mt_R_Past_Y_AEZ[ X_AGLU_historical_years ] / L123.LC_bm2_R_MgdPast_Y_AEZ_adj [ X_AGLU_historical_years ]#
L123.ag_Yield_kgm2_R_Past_Y_AEZ[ is.na( L123.ag_Yield_kgm2_R_Past_Y_AEZ ) ] <- 0#
#Multiply "managed" shares in the earliest available year by prior pasture land cover pathway to get historical managed pasture#
printlog( "Building managed pasture land use history" )#
printlog( "NOTE: Assuming same managed:unmanaged pasture ratio in early land cover years" )#
L123.LC_bm2_R_Past_Yhh_AEZ <- subset( L120.LC_bm2_R_LT_Yh_AEZ, Land_Type=="Pasture", select = c( R_LT_AEZ, X_preAGLU_years ) )#
L123.LC_bm2_R_MgdPast_Yh_AEZ <- L123.LC_bm2_R_MgdPast_Y_AEZ_adj#
L123.LC_bm2_R_MgdPast_Yh_AEZ[ X_preAGLU_years ] <- L123.LC_MgdPastFrac_Y_AEZ_adj[[ X_AGLU_historical_years[1] ]] *#
      L123.LC_bm2_R_Past_Yhh_AEZ[ X_preAGLU_years ]#
L123.LC_bm2_R_MgdPast_Yh_AEZ <- L123.LC_bm2_R_MgdPast_Yh_AEZ[ c( R_LT_AEZ, X_land_cover_years ) ]#
#
#FORESTRY#
#Carbon densities are divided by mature age to get net primary productivity, and used to derive exogenous yields for separating managed/unmanaged forest#
#calculate veg mass of each AEZ based on above-ground carbon content of each AEZ. Assume 288 kgC/m3 of wood.#
printlog( "Part 2: Managed forest production and land cover" )#
printlog( "NOTE: Using average vegetation carbon densities and mature ages to estimate annual forest biomass production" )#
L123.For_VegVolume_m3m2_R_AEZ <- subset( L121.VegC_kgm2_R_LT_AEZ, Land_Type=="Forest" )#
L123.For_VegVolume_m3m2_R_AEZ[ AEZs ] <- L121.VegC_kgm2_R_LT_AEZ[#
      L121.VegC_kgm2_R_LT_AEZ$Land_Type=="Forest", AEZs ] / AvgWoodDensity_kgCm3#
#calculate biomass production ( yield ) as veg volume divided by the mature age#
L123.For_MatureAge_R_AEZ <- L121.MatureAge_R_LT_AEZ[ L121.MatureAge_R_LT_AEZ[[LT]] == "Forest", ]#
L123.For_Yield_m3m2_R_AEZ <- data.frame( L123.For_VegVolume_m3m2_R_AEZ[ R ],#
      GCAM_commodity = L123.For_VegVolume_m3m2_R_AEZ[[LT]],#
      L123.For_VegVolume_m3m2_R_AEZ[ AEZs ] / L123.For_MatureAge_R_AEZ[ AEZs ] )#
L123.For_Yield_m3m2_R_AEZ[ is.na( L123.For_Yield_m3m2_R_AEZ ) ] <- 0#
#disaggregate logging to AEZ on the basis of biomass production rates.#
printlog( "NOTE: Using forest biomass production by AEZ to disaggregate regional wood production to AEZs" )#
L123.LC_bm2_R_For_Y_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Forest", c( R_LT_AEZ, X_AGLU_historical_years ) ]#
L123.For_Yield_m3m2_R_AEZ.melt <- melt( L123.For_Yield_m3m2_R_AEZ, id.vars = R_C, variable_name = "AEZ" )#
#
L123.For_potentialProd_bm3_R_Y_AEZ <- L123.LC_bm2_R_For_Y_AEZ#
names( L123.For_potentialProd_bm3_R_Y_AEZ )[ names( L123.For_potentialProd_bm3_R_Y_AEZ ) == LT ] <- C#
L123.For_potentialProd_bm3_R_Y_AEZ[ X_AGLU_historical_years ] <- L123.LC_bm2_R_For_Y_AEZ[ X_AGLU_historical_years ] * L123.For_Yield_m3m2_R_AEZ.melt$value[#
      match( vecpaste( L123.LC_bm2_R_For_Y_AEZ[ R_AEZ ] ), vecpaste( L123.For_Yield_m3m2_R_AEZ.melt[ R_AEZ ]) ) ]#
#
#Cast regional forestry output into the same format as these tables#
L110.For_ALL_bm3_R_Y$Xyear <- paste( "X", L110.For_ALL_bm3_R_Y[[Y]], sep = "" )#
L123.For_ALL_bm3_R_Y <- cast( L110.For_ALL_bm3_R_Y, GCAM_region_ID + GCAM_commodity ~ Xyear, value = "Prod_bm3" )#
#
#Forest output by AEZ = Regional forest output * AEZ-wise forest biomass production fraction#
L123.For_potentialProd_bm3_R_Y <- aggregate( L123.For_potentialProd_bm3_R_Y_AEZ[ X_AGLU_historical_years ], by=as.list( L123.For_potentialProd_bm3_R_Y_AEZ[ R_C ] ), sum )#
L123.For_Prodfrac_R_Y_AEZ <- L123.For_potentialProd_bm3_R_Y_AEZ[ R_C_AEZ ]#
L123.For_Prodfrac_R_Y_AEZ[ X_AGLU_historical_years ] <- L123.For_potentialProd_bm3_R_Y_AEZ[ X_AGLU_historical_years ] / L123.For_potentialProd_bm3_R_Y[#
      match( L123.For_potentialProd_bm3_R_Y_AEZ[[R]], L123.For_potentialProd_bm3_R_Y[[R]] ),#
      X_AGLU_historical_years ]#
#For regions that do not exist, return NaNs to 0#
L123.For_Prodfrac_R_Y_AEZ[ is.na( L123.For_Prodfrac_R_Y_AEZ ) ] <- 0#
L123.For_Prod_bm3_R_Y_AEZ <- L123.For_Prodfrac_R_Y_AEZ[ R_C_AEZ]#
L123.For_Prod_bm3_R_Y_AEZ[ X_AGLU_historical_years ] <- L123.For_Prodfrac_R_Y_AEZ[ X_AGLU_historical_years ] * L123.For_ALL_bm3_R_Y[#
      match( L123.For_Prodfrac_R_Y_AEZ[[R]], L123.For_ALL_bm3_R_Y[[R]] ),#
      X_AGLU_historical_years ]#
#Get rid of values less than 1e-6#
L123.For_Prod_bm3_R_Y_AEZ[ X_AGLU_historical_years ][ L123.For_Prod_bm3_R_Y_AEZ[ X_AGLU_historical_years ] < 1e-6 ] <- 0#
#Calculate land cover of "managed" forest as the output divided by the yield ( net primary production ), in each AEZ and region#
L123.LC_bm2_R_MgdFor_Y_AEZ <- L123.For_Prod_bm3_R_Y_AEZ[ R_C_AEZ ]#
names( L123.LC_bm2_R_MgdFor_Y_AEZ )[ names( L123.LC_bm2_R_MgdFor_Y_AEZ ) == C ] <- LT#
L123.LC_bm2_R_MgdFor_Y_AEZ[ X_AGLU_historical_years ] <- L123.For_Prod_bm3_R_Y_AEZ[ X_AGLU_historical_years ] / L123.For_Yield_m3m2_R_AEZ.melt$value[#
      match( vecpaste( L123.For_Prod_bm3_R_Y_AEZ[ R_AEZ ] ), vecpaste( L123.For_Yield_m3m2_R_AEZ.melt[ R_AEZ ] ) ) ]#
L123.LC_bm2_R_MgdFor_Y_AEZ[ is.na( L123.LC_bm2_R_MgdFor_Y_AEZ ) ] <- 0#
#
#Use historical population ratios to estimate managed forest in the pre-AGLU years#
printlog( "Building managed forest land use history" )#
printlog( "NOTE: Scaling historical managed forest land area with historical population" )#
L123.PopRatio_R_Yhh <- L101.Pop_thous_R_Yh[ c( R, X_preAGLU_years ) ]#
L123.PopRatio_R_Yhh[ X_preAGLU_years ] <- L101.Pop_thous_R_Yh[ X_preAGLU_years ] / L101.Pop_thous_R_Yh[[ X_AGLU_historical_years[1] ]]#
#
L123.LC_bm2_R_MgdFor_Yh_AEZ <- L123.LC_bm2_R_MgdFor_Y_AEZ#
L123.LC_bm2_R_MgdFor_Yh_AEZ[ X_preAGLU_years ] <- L123.LC_bm2_R_MgdFor_Y_AEZ[[ X_AGLU_historical_years[1] ]] * L123.PopRatio_R_Yhh[#
      match( L123.LC_bm2_R_MgdFor_Y_AEZ[[R]], L123.PopRatio_R_Yhh[[R]] ),#
      X_preAGLU_years ]#
L123.LC_bm2_R_MgdFor_Yh_AEZ <- L123.LC_bm2_R_MgdFor_Yh_AEZ[ c( R_LT_AEZ, X_land_cover_years ) ]
subset(L123.LC_bm2_R_MgdFor_Yh_AEZ, GCAM_region_ID==3)[1:15]
dim(L123.LC_bm2_R_MgdFor_Y_AEZ)
subset(L123.LC_bm2_R_MgdFor_Y_AEZ, GCAM_region_ID==3)[1:15]
max_MgdPast_frac
max_MgdFor_frac <- 1
head(L123.LC_bm2_R_For_Yh_AEZ)
head(L123.LC_bm2_R_For_Y_AEZ)
L123.LC_bm2_R_For_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Forest", c( R_LT_AEZ, X_land_cover_years ) ]
L123.LC_MgdForFrac_Yh_AEZ <- L123.LC_bm2_R_MgdFor_Yh_AEZ[ R_LT_AEZ ]#
L123.LC_MgdForFrac_Yh_AEZ[ X_land_cover_years ] <-#
      L123.LC_bm2_R_MgdFor_Yh_AEZ[ X_land_cover_years ] / L123.LC_bm2_R_For_Yh_AEZ[ X_land_cover_years ]
subset(L123.LC_MgdForFrac_Yh_AEZ, GCAM_region_ID==3)
max_MgdFor_frac
L123.LC_bm2_R_For_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Forest", c( R_LT_AEZ, X_land_cover_years ) ]#
L123.LC_MgdForFrac_Yh_AEZ <- L123.LC_bm2_R_MgdFor_Yh_AEZ[ R_LT_AEZ ]#
L123.LC_MgdForFrac_Yh_AEZ[ X_land_cover_years ] <-#
      L123.LC_bm2_R_MgdFor_Yh_AEZ[ X_land_cover_years ] / L123.LC_bm2_R_For_Yh_AEZ[ X_land_cover_years ]#
L123.LC_MgdForFrac_Yh_AEZ[ is.na( L123.LC_MgdForFrac_Yh_AEZ) ] <- 0#
L123.LC_MgdForFrac_Yh_AEZ_adj <- L123.LC_MgdForFrac_Y_AEZ#
L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ][ L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ] > max_MgdFor_frac ] <- max_MgdFor_frac
L123.LC_bm2_R_For_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Forest", c( R_LT_AEZ, X_land_cover_years ) ]#
L123.LC_MgdForFrac_Yh_AEZ <- L123.LC_bm2_R_MgdFor_Yh_AEZ[ R_LT_AEZ ]#
L123.LC_MgdForFrac_Yh_AEZ[ X_land_cover_years ] <-#
      L123.LC_bm2_R_MgdFor_Yh_AEZ[ X_land_cover_years ] / L123.LC_bm2_R_For_Yh_AEZ[ X_land_cover_years ]#
L123.LC_MgdForFrac_Yh_AEZ[ is.na( L123.LC_MgdForFrac_Yh_AEZ) ] <- 0#
L123.LC_MgdForFrac_Yh_AEZ_adj <- L123.LC_MgdForFrac_Yh_AEZ#
L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ][ L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ] > max_MgdFor_frac ] <- max_MgdFor_frac
subset(L123.LC_MgdForFrac_Yh_AEZ_adj, GCAM_region_ID==3)
L123.For_Yield_m3m2_R_AEZ <- L123.For_Prod_bm3_R_Y_AEZ[ R_C_AEZ ]#
L123.For_Yield_m3m2_R_AEZ[ X_land_cover_years ] <-#
      L123.For_Prod_bm3_R_Y_AEZ[ X_land_cover_years ] / L123.LC_bm2_R_MgdFor_Yh_AEZ_adj [ X_land_cover_years ]#
L123.For_Yield_m3m2_R_AEZ[ is.na( L123.For_Yield_m3m2_R_AEZ ) ] <- 0
L123.For_Yield_m3m2_R_AEZ <- L123.For_Prod_bm3_R_Y_AEZ[ R_C_AEZ ]#
L123.For_Yield_m3m2_R_AEZ[ X_AGLU_historical_years ] <-#
      L123.For_Prod_bm3_R_Y_AEZ[ X_AGLU_historical_years ] / L123.LC_bm2_R_MgdFor_Yh_AEZ_adj [ X_AGLU_historical_years ]#
L123.For_Yield_m3m2_R_AEZ[ is.na( L123.For_Yield_m3m2_R_AEZ ) ] <- 0
L123.LC_bm2_R_For_Yh_AEZ <- L120.LC_bm2_R_LT_Yh_AEZ[ L120.LC_bm2_R_LT_Yh_AEZ[[LT]] == "Forest", c( R_LT_AEZ, X_land_cover_years ) ]#
L123.LC_MgdForFrac_Yh_AEZ <- L123.LC_bm2_R_MgdFor_Yh_AEZ[ R_LT_AEZ ]#
L123.LC_MgdForFrac_Yh_AEZ[ X_land_cover_years ] <-#
      L123.LC_bm2_R_MgdFor_Yh_AEZ[ X_land_cover_years ] / L123.LC_bm2_R_For_Yh_AEZ[ X_land_cover_years ]#
L123.LC_MgdForFrac_Yh_AEZ[ is.na( L123.LC_MgdForFrac_Yh_AEZ) ] <- 0#
L123.LC_MgdForFrac_Yh_AEZ_adj <- L123.LC_MgdForFrac_Yh_AEZ#
L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ][ L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ] > max_MgdFor_frac ] <- max_MgdFor_frac#
#
#Recalculate managed forest land, adjusted by assumed maximum portion that can be managed#
L123.LC_bm2_R_MgdFor_Yh_AEZ_adj <- L123.LC_bm2_R_For_Yh_AEZ[ R_LT_AEZ ]#
L123.LC_bm2_R_MgdFor_Yh_AEZ_adj[ X_land_cover_years ] <-#
      L123.LC_bm2_R_For_Yh_AEZ[ X_land_cover_years ] * L123.LC_MgdForFrac_Yh_AEZ_adj[ X_land_cover_years ]#
#
#Recalculate forestry yield#
L123.For_Yield_m3m2_R_AEZ <- L123.For_Prod_bm3_R_Y_AEZ[ R_C_AEZ ]#
L123.For_Yield_m3m2_R_AEZ[ X_AGLU_historical_years ] <-#
      L123.For_Prod_bm3_R_Y_AEZ[ X_AGLU_historical_years ] / L123.LC_bm2_R_MgdFor_Yh_AEZ_adj [ X_AGLU_historical_years ]#
L123.For_Yield_m3m2_R_AEZ[ is.na( L123.For_Yield_m3m2_R_AEZ ) ] <- 0
subset(L123.For_Yield_m3m2_R_AEZ, GCAM_region_ID==3)
head(L123.LC_bm2_R_MgdFor_Yh_AEZ_adj)
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L221.en_supply.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Primary fuel handling sectors" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
A21.sector <- readdata( "ENERGY_ASSUMPTIONS", "A21.sector" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
A21.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A21.subsector_logit" )#
A21.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A21.subsector_shrwt" )#
A21.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A21.subsector_interp" )#
A21.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_coef" )#
A21.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_cost" )#
A21.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_shrwt" )#
A21.globaltech_keyword <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_keyword" )#
A21.tradedtech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A21.tradedtech_coef" )#
A21.tradedtech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A21.tradedtech_cost" )#
A21.tradedtech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A21.tradedtech_shrwt" )#
L111.Prod_EJ_R_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L111.Prod_EJ_R_F_Yh" )#
L121.in_EJ_R_TPES_unoil_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L121.in_EJ_R_TPES_unoil_Yh" )#
L121.in_EJ_R_TPES_crude_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L121.in_EJ_R_TPES_crude_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Build tables for CSVs#
# 2a. Supplysector information#
printlog( "L221.Supplysector_en: Supply sector information for upstream energy handling sectors" )#
L221.Supplysector_en <- write_to_all_regions( A21.sector, names_Supplysector, has.traded=T )#
#
# 2b. Subsector information#
printlog( "L221.SubsectorLogit_en: Subsector logit exponents of upstream energy handling sectors" )#
L221.SubsectorLogit_en <- write_to_all_regions( A21.subsector_logit, names_SubsectorLogit, has.traded=T )#
#
printlog( "L221.SubsectorShrwt_en and L221.SubsectorShrwtFllt_en: Subsector shareweights of upstream energy handling sectors" )#
if( any( !is.na( A21.subsector_shrwt$year ) ) ){#
	L221.SubsectorShrwt_en <- write_to_all_regions( A21.subsector_shrwt[ !is.na( A21.subsector_shrwt$year ), ], names_SubsectorShrwt, has.traded=T )#
	}#
if( any( !is.na( A21.subsector_shrwt$year.fillout ) ) ){#
	L221.SubsectorShrwtFllt_en <- write_to_all_regions( A21.subsector_shrwt[ !is.na( A21.subsector_shrwt$year.fillout ), ], names_SubsectorShrwtFllt, has.traded=T )#
	}#
#
printlog( "L221.SubsectorInterp_en and L221.SubsectorInterpTo_en: Subsector shareweight interpolation of upstream energy handling sectors" )#
if( any( is.na( A21.subsector_interp$to.value ) ) ){#
	L221.SubsectorInterp_en <- write_to_all_regions( A21.subsector_interp[ is.na( A21.subsector_interp$to.value ), ], names_SubsectorInterp, has.traded=T )#
	}#
if( any( !is.na( A21.subsector_interp$to.value ) ) ){#
	L221.SubsectorInterpTo_en <- write_to_all_regions( A21.subsector_interp[ !is.na( A21.subsector_interp$to.value ), ], names_SubsectorInterpTo, has.traded=T )#
	}#
#
# 2c. Technology information#
#Identification of stub technologies (assume those in global tech shareweight table include all techs)#
printlog( "L221.StubTech_en: Identification of stub technologies of upstream energy handling sectors" )#
L221.StubTech_en <- write_to_all_regions( A21.globaltech_shrwt, names_Tech, has.traded=F )#
names( L221.StubTech_en ) <- names_StubTech#
#
#Drop stub technologies for biomassOil techs that do not exist#
L221.rm_biomassOil_techs <- A21.globaltech_shrwt[ A21.globaltech_shrwt$supplysector == "regional biomassOil", s_s_t ]#
L221.rm_biomassOil_techs_R <- repeat_and_add_vector( L221.rm_biomassOil_techs, R, GCAM_region_names[[R]] )#
L221.rm_biomassOil_techs_R <- add_region_name( L221.rm_biomassOil_techs_R )#
L221.rm_biomassOil_techs_R <- subset( L221.rm_biomassOil_techs_R, paste( region, technology ) %!in% paste( A_regions$region, A_regions$biomassOil_tech ) )#
L221.StubTech_en <- L221.StubTech_en[#
      vecpaste( L221.StubTech_en[ c( "region", "stub.technology" ) ] ) %!in% vecpaste( L221.rm_biomassOil_techs_R[ c( "region", "technology" ) ] ), ]#
#
#Coefficients of global technologies#
printlog( "L221.GlobalTechCoef_en: Energy inputs and coefficients of global technologies for upstream energy handling" )#
L221.globaltech_coef.melt <- interpolate_and_melt( A21.globaltech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L221.globaltech_coef.melt[ c( "sector.name", "subsector.name" ) ] <- L221.globaltech_coef.melt[ c( "supplysector", "subsector" ) ]#
L221.GlobalTechCoef_en <- L221.globaltech_coef.melt[ names_GlobalTechCoef ]#
#
#Costs of global technologies#
printlog( "L221.GlobalTechCost_en: Costs of global technologies for upstream energy handling" )#
L221.globaltech_cost.melt <- interpolate_and_melt( A21.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
L221.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L221.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L221.GlobalTechCost_en <- L221.globaltech_cost.melt[ names_GlobalTechCost ]#
#
#Shareweights of global technologies#
printlog( "L221.GlobalTechShrwt_en: Shareweights of global technologies for upstream energy handling" )#
L221.globaltech_shrwt.melt <- interpolate_and_melt( A21.globaltech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L221.globaltech_shrwt.melt[ c( "sector.name", "subsector.name" ) ] <- L221.globaltech_shrwt.melt[ c( "supplysector", "subsector" ) ]#
L221.GlobalTechShrwt_en <- L221.globaltech_shrwt.melt[ c( names_GlobalTechYr, "share.weight" ) ]#
#
#Keywords of global technologies#
printlog( "L221.PrimaryConsKeyword_en: Primary energy consumption keywords" )#
L221.PrimaryConsKeyword_en <- repeat_and_add_vector( A21.globaltech_keyword, Y, c( model_base_years, model_future_years ) )#
L221.PrimaryConsKeyword_en[ c( "sector.name", "subsector.name" ) ] <- L221.PrimaryConsKeyword_en[ c( "supplysector", "subsector" ) ]#
L221.PrimaryConsKeyword_en <- L221.PrimaryConsKeyword_en[ c( names_GlobalTechYr, "primary.consumption" ) ]#
#
#Coefficients of traded technologies#
printlog( "L221.TechCoef_en_Traded: Energy inputs, coefficients, and market names of traded technologies for upstream energy handling" )#
L221.tradedtech_coef.melt <- interpolate_and_melt( A21.tradedtech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
L221.TechCoef_en_Traded <- write_to_all_regions( L221.tradedtech_coef.melt, names_TechCoef, has.traded = T, apply.to = "all", set.market = T )#
#
#Costs of traded technologies#
printlog( "L221.TechCost_en_Traded: Costs of traded technologies for upstream energy handling" )#
L221.tradedtech_cost.melt <- interpolate_and_melt( A21.tradedtech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
L221.TechCost_en_Traded <- write_to_all_regions( L221.tradedtech_cost.melt, names_TechCost, has.traded = T, apply.to = "all", set.market = F )#
#
#Shareweights of traded technologies#
printlog( "L221.TechShrwt_en_Traded: Shareweights of traded technologies for upstream energy handling" )#
L221.tradedtech_shrwt.melt <- interpolate_and_melt( A21.tradedtech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L221.TechShrwt_en_Traded <- write_to_all_regions( L221.tradedtech_shrwt.melt, c( names_TechYr, "share.weight" ), has.traded = T, apply.to = "all", set.market = F )#
#
#2b. Calibration and region-specific data#
printlog( "L221.StubTechCoef_unoil: Coefficient and market name of stub technologies for importing traded unconventional oil" )#
L221.StubTechCoef_unoil <- subset( L221.globaltech_coef.melt, minicam.energy.input %in% L221.TechShrwt_en_Traded$supplysector )#
L221.StubTechCoef_unoil$stub.technology <- L221.StubTechCoef_unoil$technology#
L221.StubTechCoef_unoil <- write_to_all_regions( L221.StubTechCoef_unoil, names_StubTechCoef[ names_StubTechCoef != "market.name" ] )#
L221.StubTechCoef_unoil$market.name <- GCAM_region_names$region[1]#
#
L221.Prod_EJ_R_unoil_Yh.melt <- melt( L111.Prod_EJ_R_F_Yh[ grep( "unconventional", L111.Prod_EJ_R_F_Yh$fuel ),#
      c( "GCAM_region_ID", X_model_base_years ) ], id.vars = "GCAM_region_ID" )#
L221.Prod_EJ_R_unoil_Yh.melt <- add_region_name( L221.Prod_EJ_R_unoil_Yh.melt )#
L221.Prod_EJ_R_unoil_Yh.melt$year <- substr( L221.Prod_EJ_R_unoil_Yh.melt$variable, 2, 5 )#
#
printlog( "L221.Production_unoil: Calibrated production of unconventional oil" )#
L221.Production_unoil <- subset( L221.TechCoef_en_Traded, supplysector == "traded unconventional oil" & year %in% model_base_years )#
L221.Production_unoil$calOutputValue <- round(#
      L221.Prod_EJ_R_unoil_Yh.melt$value[#
         match( paste( L221.Production_unoil$market.name, L221.Production_unoil$year ),#
                paste( L221.Prod_EJ_R_unoil_Yh.melt$region, L221.Prod_EJ_R_unoil_Yh.melt$year ) ) ],#
      digits_calOutput )#
L221.Production_unoil <- L221.Production_unoil[ c( names_TechYr, "calOutputValue" ) ]#
L221.Production_unoil$calOutputValue[ is.na( L221.Production_unoil$calOutputValue ) ] <- 0             #
L221.Production_unoil$year.share.weight <- L221.Production_unoil$year#
L221.Production_unoil$subsector.share.weight <- ifelse( L221.Production_unoil$calOutputValue > 0, 1, 0 )#
L221.Production_unoil$share.weight <- ifelse( L221.Production_unoil$calOutputValue >0, 1, 0 )#
#
#Unconventional oil demand#
L221.in_EJ_R_TPES_unoil_Yh.melt <- melt( L121.in_EJ_R_TPES_unoil_Yh, id.vars = R_S_F )#
L221.in_EJ_R_TPES_unoil_Yh.melt <- add_region_name( L221.in_EJ_R_TPES_unoil_Yh.melt )#
L221.in_EJ_R_TPES_unoil_Yh.melt$year <- substr( L221.in_EJ_R_TPES_unoil_Yh.melt$variable, 2, 5 )#
#
printlog( "L221.StubTechProd_oil_unoil: Calibrated demand of unconventional oil" )#
L221.StubTechProd_oil_unoil <- subset( L221.StubTech_en, supplysector == "regional oil" & subsector == "unconventional oil" )#
L221.StubTechProd_oil_unoil <- repeat_and_add_vector( L221.StubTechProd_oil_unoil, "year", model_base_years )#
L221.StubTechProd_oil_unoil$calOutputValue <- round(#
      L221.in_EJ_R_TPES_unoil_Yh.melt$value[#
         match( paste( L221.StubTechProd_oil_unoil$region, L221.StubTechProd_oil_unoil$year ),#
                paste( L221.in_EJ_R_TPES_unoil_Yh.melt$region, L221.in_EJ_R_TPES_unoil_Yh.melt$year ) ) ],#
      digits_calOutput )#
L221.StubTechProd_oil_unoil$year.share.weight <- L221.StubTechProd_oil_unoil$year#
L221.StubTechProd_oil_unoil$subsector.share.weight <- ifelse( L221.StubTechProd_oil_unoil$calOutputValue > 0, 1, 0 )#
L221.StubTechProd_oil_unoil$share.weight <- ifelse( L221.StubTechProd_oil_unoil$calOutputValue > 0, 1, 0 )#
#
#Crude oil demand#
L221.in_EJ_R_TPES_crude_Yh.melt <- melt( L121.in_EJ_R_TPES_crude_Yh, id.vars = R_S_F )#
L221.in_EJ_R_TPES_crude_Yh.melt <- add_region_name( L221.in_EJ_R_TPES_crude_Yh.melt )#
L221.in_EJ_R_TPES_crude_Yh.melt$year <- substr( L221.in_EJ_R_TPES_crude_Yh.melt$variable, 2, 5 )#
#
printlog( "L221.StubTechProd_oil_crude: Calibrated demand of crude oil" )#
L221.StubTechProd_oil_crude <- subset( L221.StubTech_en, supplysector == "regional oil" & subsector == "crude oil" )#
L221.StubTechProd_oil_crude <- repeat_and_add_vector( L221.StubTechProd_oil_crude, "year", model_base_years )#
L221.StubTechProd_oil_crude$calOutputValue <- round(#
      L221.in_EJ_R_TPES_crude_Yh.melt$value[#
         match( paste( L221.StubTechProd_oil_crude$region, L221.StubTechProd_oil_crude$year ),#
                paste( L221.in_EJ_R_TPES_crude_Yh.melt$region, L221.in_EJ_R_TPES_crude_Yh.melt$year ) ) ],#
      digits_calOutput )#
L221.StubTechProd_oil_crude$year.share.weight <- L221.StubTechProd_oil_crude$year#
L221.StubTechProd_oil_crude$subsector.share.weight <- ifelse( L221.StubTechProd_oil_crude$calOutputValue > 0, 1, 0 )#
L221.StubTechProd_oil_crude$share.weight <- ifelse( L221.StubTechProd_oil_crude$calOutputValue > 0, 1, 0 )#
#
printlog( "L221.StubTechShrwt_bio: region-specific technology shareweights for biomassOil passthrough sector")#
L221.globaltech_shrwt_bio <- interpolate_and_melt( subset( A21.globaltech_shrwt, supplysector == "regional biomassOil" ),#
      c( model_base_years, model_future_years ), value.name="share.weight" )#
L221.StubTechShrwt_bio <- write_to_all_regions( L221.globaltech_shrwt_bio, c( "region", names( L221.globaltech_shrwt_bio ) ) )#
L221.StubTechShrwt_bio$stub.technology <- L221.StubTechShrwt_bio$technology#
L221.StubTechShrwt_bio$share.weight <- ifelse(#
      vecpaste( L221.StubTechShrwt_bio[ c( "region", "stub.technology" ) ] ) %in% vecpaste( A_regions[ c( "region", "biomassOil_tech" ) ] ),#
      1, 0 )#
L221.StubTechShrwt_bio <- L221.StubTechShrwt_bio[ c( names_StubTechYr, "share.weight" ) ]#
L221.StubTechShrwt_bio <- subset( L221.StubTechShrwt_bio,#
      vecpaste( L221.StubTechShrwt_bio[ c( "stub.technology", "year", "share.weight" ) ] ) != #
      vecpaste( L221.globaltech_shrwt_bio[ c( "technology", "year", "share.weight" ) ] ) )
dim(L221.StubTech_en)
subset(L221.StubTech_en, region == "Taiwan")
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )
printlog( "L221.Supplysector_en: Supply sector information for upstream energy handling sectors" )#
L221.Supplysector_en <- write_to_all_regions( A21.sector, names_Supplysector, has.traded=T )#
#
# 2b. Subsector information#
printlog( "L221.SubsectorLogit_en: Subsector logit exponents of upstream energy handling sectors" )#
L221.SubsectorLogit_en <- write_to_all_regions( A21.subsector_logit, names_SubsectorLogit, has.traded=T )#
#
printlog( "L221.SubsectorShrwt_en and L221.SubsectorShrwtFllt_en: Subsector shareweights of upstream energy handling sectors" )#
if( any( !is.na( A21.subsector_shrwt$year ) ) ){#
	L221.SubsectorShrwt_en <- write_to_all_regions( A21.subsector_shrwt[ !is.na( A21.subsector_shrwt$year ), ], names_SubsectorShrwt, has.traded=T )#
	}#
if( any( !is.na( A21.subsector_shrwt$year.fillout ) ) ){#
	L221.SubsectorShrwtFllt_en <- write_to_all_regions( A21.subsector_shrwt[ !is.na( A21.subsector_shrwt$year.fillout ), ], names_SubsectorShrwtFllt, has.traded=T )#
	}#
#
printlog( "L221.SubsectorInterp_en and L221.SubsectorInterpTo_en: Subsector shareweight interpolation of upstream energy handling sectors" )#
if( any( is.na( A21.subsector_interp$to.value ) ) ){#
	L221.SubsectorInterp_en <- write_to_all_regions( A21.subsector_interp[ is.na( A21.subsector_interp$to.value ), ], names_SubsectorInterp, has.traded=T )#
	}#
if( any( !is.na( A21.subsector_interp$to.value ) ) ){#
	L221.SubsectorInterpTo_en <- write_to_all_regions( A21.subsector_interp[ !is.na( A21.subsector_interp$to.value ), ], names_SubsectorInterpTo, has.traded=T )#
	}#
#
# 2c. Technology information#
#Identification of stub technologies (assume those in global tech shareweight table include all techs)#
printlog( "L221.StubTech_en: Identification of stub technologies of upstream energy handling sectors" )#
L221.StubTech_en <- write_to_all_regions( A21.globaltech_shrwt, names_Tech, has.traded=F )#
names( L221.StubTech_en ) <- names_StubTech#
#
#Drop stub technologies for biomassOil techs that do not exist#
L221.rm_biomassOil_techs <- A21.globaltech_shrwt[ A21.globaltech_shrwt$supplysector == "regional biomassOil", s_s_t ]#
L221.rm_biomassOil_techs_R <- repeat_and_add_vector( L221.rm_biomassOil_techs, R, GCAM_region_names[[R]] )#
L221.rm_biomassOil_techs_R <- add_region_name( L221.rm_biomassOil_techs_R )#
L221.rm_biomassOil_techs_R <- subset( L221.rm_biomassOil_techs_R, paste( region, technology ) %!in% paste( A_regions$region, A_regions$biomassOil_tech ) )#
L221.StubTech_en <- L221.StubTech_en[#
      vecpaste( L221.StubTech_en[ c( "region", "stub.technology" ) ] ) %!in% vecpaste( L221.rm_biomassOil_techs_R[ c( "region", "technology" ) ] ), ]#
#
#Coefficients of global technologies#
printlog( "L221.GlobalTechCoef_en: Energy inputs and coefficients of global technologies for upstream energy handling" )#
L221.globaltech_coef.melt <- interpolate_and_melt( A21.globaltech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
#Assign the columns "sector.name" and "subsector.name", consistent with the location info of a global technology#
L221.globaltech_coef.melt[ c( "sector.name", "subsector.name" ) ] <- L221.globaltech_coef.melt[ c( "supplysector", "subsector" ) ]#
L221.GlobalTechCoef_en <- L221.globaltech_coef.melt[ names_GlobalTechCoef ]#
#
#Costs of global technologies#
printlog( "L221.GlobalTechCost_en: Costs of global technologies for upstream energy handling" )#
L221.globaltech_cost.melt <- interpolate_and_melt( A21.globaltech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
L221.globaltech_cost.melt[ c( "sector.name", "subsector.name" ) ] <- L221.globaltech_cost.melt[ c( "supplysector", "subsector" ) ]#
L221.GlobalTechCost_en <- L221.globaltech_cost.melt[ names_GlobalTechCost ]#
#
#Shareweights of global technologies#
printlog( "L221.GlobalTechShrwt_en: Shareweights of global technologies for upstream energy handling" )#
L221.globaltech_shrwt.melt <- interpolate_and_melt( A21.globaltech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L221.globaltech_shrwt.melt[ c( "sector.name", "subsector.name" ) ] <- L221.globaltech_shrwt.melt[ c( "supplysector", "subsector" ) ]#
L221.GlobalTechShrwt_en <- L221.globaltech_shrwt.melt[ c( names_GlobalTechYr, "share.weight" ) ]#
#
#Keywords of global technologies#
printlog( "L221.PrimaryConsKeyword_en: Primary energy consumption keywords" )#
L221.PrimaryConsKeyword_en <- repeat_and_add_vector( A21.globaltech_keyword, Y, c( model_base_years, model_future_years ) )#
L221.PrimaryConsKeyword_en[ c( "sector.name", "subsector.name" ) ] <- L221.PrimaryConsKeyword_en[ c( "supplysector", "subsector" ) ]#
L221.PrimaryConsKeyword_en <- L221.PrimaryConsKeyword_en[ c( names_GlobalTechYr, "primary.consumption" ) ]#
#
#Coefficients of traded technologies#
printlog( "L221.TechCoef_en_Traded: Energy inputs, coefficients, and market names of traded technologies for upstream energy handling" )#
L221.tradedtech_coef.melt <- interpolate_and_melt( A21.tradedtech_coef, c( model_base_years, model_future_years ), value.name="coefficient" )#
L221.TechCoef_en_Traded <- write_to_all_regions( L221.tradedtech_coef.melt, names_TechCoef, has.traded = T, apply.to = "all", set.market = T )#
#
#Costs of traded technologies#
printlog( "L221.TechCost_en_Traded: Costs of traded technologies for upstream energy handling" )#
L221.tradedtech_cost.melt <- interpolate_and_melt( A21.tradedtech_cost, c( model_base_years, model_future_years ), value.name="input.cost" )#
L221.TechCost_en_Traded <- write_to_all_regions( L221.tradedtech_cost.melt, names_TechCost, has.traded = T, apply.to = "all", set.market = F )#
#
#Shareweights of traded technologies#
printlog( "L221.TechShrwt_en_Traded: Shareweights of traded technologies for upstream energy handling" )#
L221.tradedtech_shrwt.melt <- interpolate_and_melt( A21.tradedtech_shrwt, c( model_base_years, model_future_years ), value.name="share.weight" )#
L221.TechShrwt_en_Traded <- write_to_all_regions( L221.tradedtech_shrwt.melt, c( names_TechYr, "share.weight" ), has.traded = T, apply.to = "all", set.market = F )#
#
#2b. Calibration and region-specific data#
printlog( "L221.StubTechCoef_unoil: Coefficient and market name of stub technologies for importing traded unconventional oil" )#
L221.StubTechCoef_unoil <- subset( L221.globaltech_coef.melt, minicam.energy.input %in% L221.TechShrwt_en_Traded$supplysector )#
L221.StubTechCoef_unoil$stub.technology <- L221.StubTechCoef_unoil$technology#
L221.StubTechCoef_unoil <- write_to_all_regions( L221.StubTechCoef_unoil, names_StubTechCoef[ names_StubTechCoef != "market.name" ] )#
L221.StubTechCoef_unoil$market.name <- GCAM_region_names$region[1]#
#
L221.Prod_EJ_R_unoil_Yh.melt <- melt( L111.Prod_EJ_R_F_Yh[ grep( "unconventional", L111.Prod_EJ_R_F_Yh$fuel ),#
      c( "GCAM_region_ID", X_model_base_years ) ], id.vars = "GCAM_region_ID" )#
L221.Prod_EJ_R_unoil_Yh.melt <- add_region_name( L221.Prod_EJ_R_unoil_Yh.melt )#
L221.Prod_EJ_R_unoil_Yh.melt$year <- substr( L221.Prod_EJ_R_unoil_Yh.melt$variable, 2, 5 )#
#
printlog( "L221.Production_unoil: Calibrated production of unconventional oil" )#
L221.Production_unoil <- subset( L221.TechCoef_en_Traded, supplysector == "traded unconventional oil" & year %in% model_base_years )#
L221.Production_unoil$calOutputValue <- round(#
      L221.Prod_EJ_R_unoil_Yh.melt$value[#
         match( paste( L221.Production_unoil$market.name, L221.Production_unoil$year ),#
                paste( L221.Prod_EJ_R_unoil_Yh.melt$region, L221.Prod_EJ_R_unoil_Yh.melt$year ) ) ],#
      digits_calOutput )#
L221.Production_unoil <- L221.Production_unoil[ c( names_TechYr, "calOutputValue" ) ]#
L221.Production_unoil$calOutputValue[ is.na( L221.Production_unoil$calOutputValue ) ] <- 0             #
L221.Production_unoil$year.share.weight <- L221.Production_unoil$year#
L221.Production_unoil$subsector.share.weight <- ifelse( L221.Production_unoil$calOutputValue > 0, 1, 0 )#
L221.Production_unoil$share.weight <- ifelse( L221.Production_unoil$calOutputValue >0, 1, 0 )#
#
#Unconventional oil demand#
L221.in_EJ_R_TPES_unoil_Yh.melt <- melt( L121.in_EJ_R_TPES_unoil_Yh, id.vars = R_S_F )#
L221.in_EJ_R_TPES_unoil_Yh.melt <- add_region_name( L221.in_EJ_R_TPES_unoil_Yh.melt )#
L221.in_EJ_R_TPES_unoil_Yh.melt$year <- substr( L221.in_EJ_R_TPES_unoil_Yh.melt$variable, 2, 5 )#
#
printlog( "L221.StubTechProd_oil_unoil: Calibrated demand of unconventional oil" )#
L221.StubTechProd_oil_unoil <- subset( L221.StubTech_en, supplysector == "regional oil" & subsector == "unconventional oil" )#
L221.StubTechProd_oil_unoil <- repeat_and_add_vector( L221.StubTechProd_oil_unoil, "year", model_base_years )#
L221.StubTechProd_oil_unoil$calOutputValue <- round(#
      L221.in_EJ_R_TPES_unoil_Yh.melt$value[#
         match( paste( L221.StubTechProd_oil_unoil$region, L221.StubTechProd_oil_unoil$year ),#
                paste( L221.in_EJ_R_TPES_unoil_Yh.melt$region, L221.in_EJ_R_TPES_unoil_Yh.melt$year ) ) ],#
      digits_calOutput )#
L221.StubTechProd_oil_unoil$year.share.weight <- L221.StubTechProd_oil_unoil$year#
L221.StubTechProd_oil_unoil$subsector.share.weight <- ifelse( L221.StubTechProd_oil_unoil$calOutputValue > 0, 1, 0 )#
L221.StubTechProd_oil_unoil$share.weight <- ifelse( L221.StubTechProd_oil_unoil$calOutputValue > 0, 1, 0 )#
#
#Crude oil demand#
L221.in_EJ_R_TPES_crude_Yh.melt <- melt( L121.in_EJ_R_TPES_crude_Yh, id.vars = R_S_F )#
L221.in_EJ_R_TPES_crude_Yh.melt <- add_region_name( L221.in_EJ_R_TPES_crude_Yh.melt )#
L221.in_EJ_R_TPES_crude_Yh.melt$year <- substr( L221.in_EJ_R_TPES_crude_Yh.melt$variable, 2, 5 )#
#
printlog( "L221.StubTechProd_oil_crude: Calibrated demand of crude oil" )#
L221.StubTechProd_oil_crude <- subset( L221.StubTech_en, supplysector == "regional oil" & subsector == "crude oil" )#
L221.StubTechProd_oil_crude <- repeat_and_add_vector( L221.StubTechProd_oil_crude, "year", model_base_years )#
L221.StubTechProd_oil_crude$calOutputValue <- round(#
      L221.in_EJ_R_TPES_crude_Yh.melt$value[#
         match( paste( L221.StubTechProd_oil_crude$region, L221.StubTechProd_oil_crude$year ),#
                paste( L221.in_EJ_R_TPES_crude_Yh.melt$region, L221.in_EJ_R_TPES_crude_Yh.melt$year ) ) ],#
      digits_calOutput )#
L221.StubTechProd_oil_crude$year.share.weight <- L221.StubTechProd_oil_crude$year#
L221.StubTechProd_oil_crude$subsector.share.weight <- ifelse( L221.StubTechProd_oil_crude$calOutputValue > 0, 1, 0 )#
L221.StubTechProd_oil_crude$share.weight <- ifelse( L221.StubTechProd_oil_crude$calOutputValue > 0, 1, 0 )#
#
printlog( "L221.StubTechShrwt_bio: region-specific technology shareweights for biomassOil passthrough sector")#
L221.globaltech_shrwt_bio <- interpolate_and_melt( subset( A21.globaltech_shrwt, supplysector == "regional biomassOil" ),#
      c( model_base_years, model_future_years ), value.name="share.weight" )#
L221.StubTechShrwt_bio <- write_to_all_regions( L221.globaltech_shrwt_bio, c( "region", names( L221.globaltech_shrwt_bio ) ) )#
L221.StubTechShrwt_bio$stub.technology <- L221.StubTechShrwt_bio$technology#
L221.StubTechShrwt_bio$share.weight <- ifelse(#
      vecpaste( L221.StubTechShrwt_bio[ c( "region", "stub.technology" ) ] ) %in% vecpaste( A_regions[ c( "region", "biomassOil_tech" ) ] ),#
      1, 0 )#
L221.StubTechShrwt_bio <- L221.StubTechShrwt_bio[ c( names_StubTechYr, "share.weight" ) ]#
L221.StubTechShrwt_bio <- subset( L221.StubTechShrwt_bio,#
      vecpaste( L221.StubTechShrwt_bio[ c( "stub.technology", "year", "share.weight" ) ] ) != #
      vecpaste( L221.globaltech_shrwt_bio[ c( "technology", "year", "share.weight" ) ] ) )
subset(L221.StubTech_en, region=="Taiwan")
L221.rm_biomassOil_techs
L221.rm_biomassOil_techs_R
A21.globaltech_coef
vecpaste( L221.StubTech_en[ c( "region", "stub.technology" ) ] )
supp
paste( no_aglu_regions, ag_input_techs )
ag_input_techs <- c( "regional corn for ethanol", "regional sugar for ethanol" )
paste( no_aglu_regions, ag_input_techs )
L221.StubTech_en <- L221.StubTech_en[#
      vecpaste( L221.StubTech_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_input_techs ), ]
subset(L221.StubTech_en, region=="Taiwan")
logstop()
if( !exists( "ENERGYPROC_DIR" ) ){#
    if( Sys.getenv( "ENERGYPROC" ) != "" ){#
        ENERGYPROC_DIR <- Sys.getenv( "ENERGYPROC" )#
    } else {#
        stop("Could not determine location of energy data system. Please set the R var ENERGYPROC_DIR to the appropriate location")#
    }#
}#
#
# Universal header file - provides logging, file support, etc.#
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L222.en_transformation.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Primary energy transformation" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
fuel_energy_input <- readdata( "ENERGY_MAPPINGS", "fuel_energy_input" )#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
A22.sector <- readdata( "ENERGY_ASSUMPTIONS", "A22.sector" )#
A22.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A22.subsector_logit" )#
A22.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A22.subsector_shrwt" )#
A22.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A22.subsector_interp" )#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
A22.globaltech_cost <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_cost" )#
A22.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_shrwt" )#
A22.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_co2capture" )#
A22.globaltech_retirement <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_retirement" )#
L122.out_EJ_R_gasproc_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L122.out_EJ_R_gasproc_F_Yh" )#
L122.out_EJ_R_refining_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L122.out_EJ_R_refining_F_Yh" )#
L122.IO_R_oilrefining_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L122.IO_R_oilrefining_F_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Build tables for CSVs#
# 2a. Supplysector information#
printlog( "L222.Supplysector_en: Supply sector information for energy transformation sectors" )#
L222.Supplysector_en <- write_to_all_regions( A22.sector, names_Supplysector )#
#
# 2b. Subsector information#
printlog( "L222.SubsectorLogit_en: Subsector logit exponents of energy transformation sectors" )#
L222.SubsectorLogit_en <- write_to_all_regions( A22.subsector_logit, names_SubsectorLogit )#
#
printlog( "L222.SubsectorShrwt_en and L222.SubsectorShrwtFllt_en: Subsector shareweights of energy transformation sectors" )#
if( any( !is.na( A22.subsector_shrwt$year ) ) ){#
	L222.SubsectorShrwt_en <- write_to_all_regions( A22.subsector_shrwt[ !is.na( A22.subsector_shrwt$year ), ], names_SubsectorShrwt )#
	}#
if( any( !is.na( A22.subsector_shrwt$year.fillout ) ) ){#
	L222.SubsectorShrwtFllt_en <- write_to_all_regions( A22.subsector_shrwt[ !is.na( A22.subsector_shrwt$year.fillout ), ], names_SubsectorShrwtFllt )#
	}#
#
printlog( "L222.SubsectorInterp_en and L222.SubsectorInterpTo_en: Subsector shareweight interpolation of energy transformation sectors" )#
if( any( is.na( A22.subsector_interp$to.value ) ) ){#
	L222.SubsectorInterp_en <- write_to_all_regions( A22.subsector_interp[ is.na( A22.subsector_interp$to.value ), ], names_SubsectorInterp )#
	}#
if( any( !is.na( A22.subsector_interp$to.value ) ) ){#
	L222.SubsectorInterpTo_en <- write_to_all_regions( A22.subsector_interp[ !is.na( A22.subsector_interp$to.value ), ], names_SubsectorInterpTo )#
	}#
#
# 2c. Technology information#
printlog( "L222.StubTech_en: Identification of stub technologies of energy transformation" )#
#Note: assuming that technology list in the shareweight table includes the full set (any others would default to a 0 shareweight)#
L222.StubTech_en <- write_to_all_regions( A22.globaltech_shrwt, names_Tech )#
names( L222.StubTech_en ) <- names_StubTech#
#
#Drop region x technology combinations that are not applicable#
firstgenbio_techs <- c( "corn ethanol", "sugarbeet ethanol", "sugar cane ethanol", "biodiesel" )#
L222.StubTech_en <- subset( L222.StubTech_en, stub.technology %!in% firstgenbio_techs | #
      paste( region, stub.technology ) %in%#
      c( paste( GCAM_region_names$region, GCAM_region_names$ethanol ),#
         paste( GCAM_region_names$region, GCAM_region_names$biodiesel ) ) )
subset(L222.StubTech_en, region=="Taiwan")
A22.globaltech_coef
firstgenbio_passthru <- c( "regional corn for ethanol", "regional sugar for ethanol" )
ag_en <- c( "regional corn for ethanol", "regional sugar for ethanol" )#
L221.Supplysector_en <- L221.Supplysector_en[ vecpaste( L221.Supplysector_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
L221.SubsectorLogit_en <- L221.SubsectorLogit_en[ vecpaste( L221.SubsectorLogit_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
if( exists( "L221.SubsectorShrwt_en" ) ){#
	L221.SubsectorShrwt_en <- L221.SubsectorShrwt_en[ vecpaste( L221.SubsectorShrwt_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
if( exists( "L221.SubsectorShrwtFllt_en" ) ){#
	L221.SubsectorShrwtFllt_en <- L221.SubsectorShrwtFllt_en[ vecpaste( L221.SubsectorShrwtFllt_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
if( exists( "L221.SubsectorInterp_en" ) ) {#
	L221.SubsectorInterp_en <- L221.SubsectorInterp_en[ vecpaste( L221.SubsectorInterp_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
if( exists( "L221.SubsectorInterpTo_en" ) ) {#
	L221.SubsectorInterpTo_en <- L221.SubsectorInterpTo_en[ vecpaste( L221.SubsectorInterpTo_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
L221.StubTech_en <- L221.StubTech_en[ vecpaste( L221.StubTech_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]
L221.Supplysector_en
A21.globaltech_coef
ag_en <- c( "regional corn for ethanol", "regional sugar for ethanol" )#
L221.Supplysector_en <- L221.Supplysector_en[ vecpaste( L221.Supplysector_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
L221.SubsectorLogit_en <- L221.SubsectorLogit_en[ vecpaste( L221.SubsectorLogit_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
if( exists( "L221.SubsectorShrwt_en" ) ){#
	L221.SubsectorShrwt_en <- L221.SubsectorShrwt_en[ vecpaste( L221.SubsectorShrwt_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
if( exists( "L221.SubsectorShrwtFllt_en" ) ){#
	L221.SubsectorShrwtFllt_en <- L221.SubsectorShrwtFllt_en[ vecpaste( L221.SubsectorShrwtFllt_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
if( exists( "L221.SubsectorInterp_en" ) ) {#
	L221.SubsectorInterp_en <- L221.SubsectorInterp_en[ vecpaste( L221.SubsectorInterp_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
if( exists( "L221.SubsectorInterpTo_en" ) ) {#
	L221.SubsectorInterpTo_en <- L221.SubsectorInterpTo_en[ vecpaste( L221.SubsectorInterpTo_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]#
}#
L221.StubTech_en <- L221.StubTech_en[ vecpaste( L221.StubTech_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]
L221.Supplysector_en
ag_en <- c( "regional corn for ethanol", "regional sugar for ethanol", "regional biomassOil" )#
L221.Supplysector_en <- L221.Supplysector_en[ vecpaste( L221.Supplysector_en[ c( "region", supp ) ] ) %!in% paste( no_aglu_regions, ag_en ), ]
L221.Supplysector_en
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L131.enduse.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Historical energy consumption by end-use sectors" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
enduse_sector_aggregation <- readdata( "ENERGY_MAPPINGS", "enduse_sector_aggregation" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
L121.in_EJ_R_unoil_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L121.in_EJ_R_unoil_F_Yh" )#
L122.in_EJ_R_refining_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L122.in_EJ_R_refining_F_Yh" )#
L124.in_EJ_R_heat_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L124.in_EJ_R_heat_F_Yh" )#
L124.out_EJ_R_heat_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L124.out_EJ_R_heat_F_Yh" )#
L124.out_EJ_R_heatfromelec_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L124.out_EJ_R_heatfromelec_F_Yh" )#
L126.out_EJ_R_electd_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L126.out_EJ_R_electd_F_Yh" )
GCAM_region_names
subset(L124.out_EJ_R_heat_F_Yh, GCAM_region_ID==14)
subset(L124.out_EJ_R_heatfromelec_F_Yh, GCAM_region_ID==14)
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L124.heat.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Historical energy consumption for district heat production" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
A24.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A24.globaltech_coef" )#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
enduse_fuel_aggregation <- readdata( "ENERGY_MAPPINGS", "enduse_fuel_aggregation" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
L1231.out_EJ_R_elec_F_tech_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1231.out_EJ_R_elec_F_tech_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
heat_regionIDs <- A_regions$GCAM_region_ID[ A_regions$heat == 1]#
#
# 2a. Fuel inputs to district heat#
printlog( "Fuel inputs to heat: aggregating intermediate fuels as specified in ", file_fqn( "ENERGY_MAPPINGS", "enduse_fuel_aggregation" ) )#
#Process fuel inputs in all regions; some will have the energy assigned to bld/ind, and others have a district heat sector#
L124.in_EJ_R_heat_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_heat" )#
L124.in_EJ_R_heat_F_Yh$sector <- sub( "in_", "", L124.in_EJ_R_heat_F_Yh$sector )#
L124.in_EJ_R_heat_F_Yh$fuel <- enduse_fuel_aggregation$heat[ match( L124.in_EJ_R_heat_F_Yh$fuel, enduse_fuel_aggregation$fuel ) ]#
L124.in_EJ_R_heat_F_Yh <- aggregate( L124.in_EJ_R_heat_F_Yh[ X_historical_years ], by=as.list( L124.in_EJ_R_heat_F_Yh[ R_S_F ] ), sum )#
#
# 2b. Heat production from district heat sector#
printlog( "Heat output: fuel inputs to heat divided by exogenous input-output coefficients" )#
L124.globaltech_coef <- gcam_interp( A24.globaltech_coef, historical_years )#
L124.globaltech_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L124.globaltech_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
L124.out_EJ_R_heat_F_Yh <- L124.in_EJ_R_heat_F_Yh#
L124.out_EJ_R_heat_F_Yh[ X_historical_years ] <- L124.in_EJ_R_heat_F_Yh[ X_historical_years ] / L124.globaltech_coef[#
      match( vecpaste( L124.in_EJ_R_heat_F_Yh[ S_F ] ), vecpaste( L124.globaltech_coef[ S_F ] ) ),#
      X_historical_years ]#
#
#Output of district heat only applies to regions where this is modeled as a separate fuel. Drop all others#
L124.out_EJ_R_heat_F_Yh <- L124.out_EJ_R_heat_F_Yh[ L124.out_EJ_R_heat_F_Yh[[R]] %in% heat_regionIDs, ]#
#
# 2c. Secondary output of heat from main activity CHP plants#
printlog( "Heat output from main activity CHP plants" )#
#Only do this for regions where district heat is being modeled#
L124.out_EJ_R_heatfromelec_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "out_electricity_heat" & GCAM_region_ID %in% heat_regionIDs )#
L124.out_EJ_R_heatfromelec_F_Yh$sector <- sub( "out_", "", L124.out_EJ_R_heatfromelec_F_Yh$sector )#
L124.out_EJ_R_heatfromelec_F_Yh$fuel <- enduse_fuel_aggregation$heat[ match( L124.out_EJ_R_heatfromelec_F_Yh$fuel, enduse_fuel_aggregation$fuel ) ]#
L124.out_EJ_R_heatfromelec_F_Yh <- aggregate( L124.out_EJ_R_heatfromelec_F_Yh[ X_historical_years ], by=as.list( L124.out_EJ_R_heatfromelec_F_Yh[ R_S_F ] ), sum )#
#
printlog( "Secondary output coefficients on heat produced by main activity CHP plants" )#
#Only do this for regions where district heat is being modeled#
L124.heatoutratio_R_elec_F_tech_Yh <- subset( L1231.out_EJ_R_elec_F_tech_Yh, fuel %in% L124.out_EJ_R_heatfromelec_F_Yh$fuel & GCAM_region_ID %in% heat_regionIDs )#
L124.heatoutratio_R_elec_F_tech_Yh[ X_historical_years ] <- L124.out_EJ_R_heatfromelec_F_Yh[#
      match( vecpaste( L124.heatoutratio_R_elec_F_tech_Yh[ R_F ] ), vecpaste( L124.out_EJ_R_heatfromelec_F_Yh[ R_F ] ) ), X_historical_years ] /#
      L124.heatoutratio_R_elec_F_tech_Yh[ X_historical_years ]
head(L124.heatoutratio_R_elec_F_tech_Yh)
dim(L124.heatoutratio_R_elec_F_tech_Yh)
subset(L124.heatoutratio_R_elec_F_tech_Yh, GCAM_region_ID==14)
subset(L124.out_EJ_R_heatfromelec_F_Yh, GCAM_region_ID==14)
vecpaste( L124.heatoutratio_R_elec_F_tech_Yh[ R_F ] )
L124.heatoutratio_R_elec_F_tech_Yh <- subset( L1231.out_EJ_R_elec_F_tech_Yh, fuel %in% L124.out_EJ_R_heatfromelec_F_Yh$fuel & GCAM_region_ID %in% heat_regionIDs )#
L124.heatoutratio_R_elec_F_tech_Yh[ X_historical_years ] <- L124.out_EJ_R_heatfromelec_F_Yh[#
      match( vecpaste( L124.heatoutratio_R_elec_F_tech_Yh[ R_F ] ), vecpaste( L124.out_EJ_R_heatfromelec_F_Yh[ R_F ] ) ), X_historical_years ] /#
      L124.heatoutratio_R_elec_F_tech_Yh[ X_historical_years ]
subset(L124.heatoutratio_R_elec_F_tech_Yh, GCAM_region_ID==14)
L124.heatoutratio_R_elec_F_tech_Yh[ is.na( L124.heatoutratio_R_elec_F_tech_Yh ) ] <- 0#
L124.heatoutratio_R_elec_F_tech_Yh[ L124.heatoutratio_R_elec_F_tech_Yh == Inf ] <- 0
subset(L124.heatoutratio_R_elec_F_tech_Yh, GCAM_region_ID==14)
unique(L124.out_EJ_R_heatfromelec_F_Yh$fuel)
enduse_fuel_aggregation
A24.globaltech_coef
calibrated_techs
head(L1231.out_EJ_R_elec_F_tech_Yh)
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )
calibrated_techs
calibrated_techs$technology[ calibrated_techs$secondary.output == "heat" ]
L124.heatoutratio_R_elec_F_tech_Yh <- subset( L1231.out_EJ_R_elec_F_tech_Yh, GCAM_region_ID %in% heat_regionIDs &#
      technology %in% calibrated_techs$technology[ calibrated_techs$secondary.output == "heat" ] )
subset(L124.heatoutratio_R_elec_F_tech_Yh, GCAM_region_ID==14)
subset(L100.IEAfull, COUNTRY == "South Africa" & PRODUCT == "Natural gas")[1:25]
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGTL" & PRODUCT != "Total of all energy sources",]
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGTL" & L100.IEAfullPRODUCT != "Total of all energy sources",]
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGTL" & L100.IEAfull$PRODUCT != "Total of all energy sources",]
874*1.654
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L122.gasproc_refining.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Historical inputs, outputs, and IO coefficients of gas processing and refining" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
FAO_ag_items_PRODSTAT <- readdata( "AGLU_MAPPINGS", "FAO_ag_items_PRODSTAT" )#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
A21.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_coef")#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
L121.in_EJ_R_unoil_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L121.in_EJ_R_unoil_F_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# 2a. REFINING#
##For most technologies, inputs are derived from outputs based on exogenous IO coefficients. Subset the relevant IO coefs#
L122.globaltech_coef <- subset( A22.globaltech_coef, paste( supplysector, subsector, technology ) %in% vecpaste( calibrated_techs[ s_s_t ] ) )#
L122.globaltech_coef[ S_F ] <- calibrated_techs[#
      match( vecpaste( L122.globaltech_coef[ s_s_t_i ] ), vecpaste( calibrated_techs[ s_s_t_i ] ) ),#
      S_F ]#
L122.globaltech_coef <- gcam_interp( L122.globaltech_coef, historical_years )#
#
## BIOMASS LIQUIDS#
printlog( "Ethanol and biodiesel output: equal to regional TPES")#
L122.out_EJ_R_biofuel_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel %in% c( "refined biofuels_ethanol", "refined biofuels_FT" ) )#
L122.out_EJ_R_biofuel_Yh$sector[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_ethanol" ] <- A_regions$ethanol[#
      match( L122.out_EJ_R_biofuel_Yh$GCAM_region_ID[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_ethanol" ],#
             A_regions$GCAM_region_ID ) ]#
L122.out_EJ_R_biofuel_Yh$sector[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_FT" ] <- A_regions$biodiesel[#
      match( L122.out_EJ_R_biofuel_Yh$GCAM_region_ID[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_FT" ],#
             A_regions$GCAM_region_ID ) ]#
L122.out_EJ_R_biofuel_Yh$fuel <- calibrated_techs$fuel[ match( L122.out_EJ_R_biofuel_Yh$sector, calibrated_techs$sector ) ]#
#
#Inputs to biofuel production are region-specific#
printlog( "Inputs to ethanol and biodiesel: equal to output times exogenous input-output coefficients" )#
L122.biofuel_coef <- subset( L122.globaltech_coef, sector %in% L122.out_EJ_R_biofuel_Yh$sector )#
#
#Because some have multiple inputs, repeat coefficient table by number of regions and then subset only the applicable combinations#
L122.biofuel_coef_repR <- repeat_and_add_vector( L122.biofuel_coef, "GCAM_region_ID", A_regions$GCAM_region_ID )#
L122.biofuel_coef_R <- subset( L122.biofuel_coef_repR, paste( GCAM_region_ID, sector ) %in%#
      c( vecpaste( A_regions[ c( "GCAM_region_ID", "ethanol" ) ] ),#
         vecpaste( A_regions[ c( "GCAM_region_ID", "biodiesel" ) ] ) ) )#
#
#Build table of inputs to biofuel production (IO coefs times output)#
L122.in_EJ_R_biofuel_F_Yh <- L122.biofuel_coef_R[ c( R_S_F ) ]#
L122.in_EJ_R_biofuel_F_Yh[ X_historical_years ] <- L122.biofuel_coef_R[ X_historical_years ] * L122.out_EJ_R_biofuel_Yh[#
      match( vecpaste( L122.in_EJ_R_biofuel_F_Yh[ R_S ] ), vecpaste( L122.out_EJ_R_biofuel_Yh[ R_S ] ) ),#
      X_historical_years ]#
#
## GAS AND COAL TO LIQUIDS#
printlog( "Output of GTL and CTL: subset from energy balance table")#
L122.out_EJ_R_gtlctl_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector %in% c( "out_gtl", "out_ctl" ) )#
L122.out_EJ_R_gtlctl_Yh$sector <- sub( "out_", "", L122.out_EJ_R_gtlctl_Yh$sector )#
#
printlog( "GTL and CTL inputs: derived as output times exogenous input-output coefficients" )#
# Interpolate gas processing IO coefs to all historical years and match in the fuel name#
L122.gtlctl_coef <- subset( L122.globaltech_coef, paste( sector, fuel ) %in% vecpaste( L122.out_EJ_R_gtlctl_Yh[ S_F ] ) )#
#
#Assuming only one input per technology#
L122.in_EJ_R_gtlctl_F_Yh <- L122.out_EJ_R_gtlctl_Yh#
L122.in_EJ_R_gtlctl_F_Yh[ X_historical_years ] <- L122.out_EJ_R_gtlctl_Yh[ X_historical_years ] * L122.gtlctl_coef[#
      match( vecpaste( L122.in_EJ_R_gtlctl_F_Yh[ S_F ] ), vecpaste( L122.gtlctl_coef[ S_F ] ) ),#
      X_historical_years ]#
##CRUDE OIL REFINING#
printlog( "Oil refining: output is equal to TPES minus net refinery energy use and output of CTL and GTL" )#
#NOTE: This is complicated. The outputs of CTL and GTL have the same fuel name as the output of oil refining,#
# so need to be deducted from TPES in order to calculate regional output of oil refining.#
# In contrast, biofuels are assigned different names, so they are not in the TPES of refined liquids.#
L122.out_EJ_R_oilrefining_Yh <- data.frame( GCAM_region_ID = GCAM_region_names$GCAM_region_ID, sector = "oil refining", fuel = "oil" )#
L122.out_EJ_R_oilrefining_Yh[ X_historical_years ] <-#
      subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "refined liquids", select = X_historical_years ) - #
      subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "net_oil refining" & fuel == "refined liquids", select = X_historical_years ) -#
      subset( L122.out_EJ_R_gtlctl_Yh, sector == "ctl" & fuel == "coal", select = X_historical_years ) -#
      subset( L122.out_EJ_R_gtlctl_Yh, sector == "gtl" & fuel == "gas", select = X_historical_years )#
#
printlog( "Oil refining: input of oil is equal to TPES, and input of other fuels is from net refinery energy use")#
L122.in_EJ_R_oilrefining_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "net_oil refining" )#
L122.in_EJ_R_oilrefining_F_Yh[ L122.in_EJ_R_oilrefining_F_Yh$fuel == "refined liquids", X_historical_years ] <-#
      subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "refined liquids", select = X_historical_years )#
L122.in_EJ_R_oilrefining_F_Yh$sector <- sub( "net_", "", L122.in_EJ_R_oilrefining_F_Yh$sector )#
L122.in_EJ_R_oilrefining_F_Yh$fuel[ L122.in_EJ_R_oilrefining_F_Yh$fuel == "refined liquids" ] <- "oil"      #
printlog( "Calculating region- and fuel-specific coefficients of crude oil refining" )#
L122.IO_R_oilrefining_F_Yh <- L122.in_EJ_R_oilrefining_F_Yh#
L122.IO_R_oilrefining_F_Yh[ X_historical_years ] <- L122.in_EJ_R_oilrefining_F_Yh[ X_historical_years ] / L122.out_EJ_R_oilrefining_Yh[#
      match( L122.IO_R_oilrefining_F_Yh$GCAM_region_ID, L122.out_EJ_R_oilrefining_Yh$GCAM_region_ID ),#
      X_historical_years ]#
#
#COMBINE (RBIND) ALL CALIBRATED REFINERY INPUT AND OUTPUT TABLES#
L122.out_EJ_R_refining_F_Yh <- rbind( L122.out_EJ_R_oilrefining_Yh, L122.out_EJ_R_gtlctl_Yh, L122.out_EJ_R_biofuel_Yh )#
L122.in_EJ_R_refining_F_Yh <- rbind( L122.in_EJ_R_oilrefining_F_Yh, L122.in_EJ_R_gtlctl_F_Yh, L122.in_EJ_R_biofuel_F_Yh )#
#
#Ancillary step: calculate and write out the derived crop inputs to the various first-generation biofuel technologies, for the AGLU processing#
L122.in_EJ_R_1stgenbio_F_Yh <- L122.in_EJ_R_biofuel_F_Yh#
L122.in_EJ_R_1stgenbio_F_Yh$passthrough.sector <- calibrated_techs$minicam.energy.input[#
      match( vecpaste( L122.in_EJ_R_1stgenbio_F_Yh[ S_F ] ), vecpaste( calibrated_techs[ S_F ] ) ) ]#
L122.in_EJ_R_1stgenbio_F_Yh <- subset( L122.in_EJ_R_1stgenbio_F_Yh, passthrough.sector %in% A21.globaltech_coef$supplysector )#
L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity <- A21.globaltech_coef$minicam.energy.input[#
      match( L122.in_EJ_R_1stgenbio_F_Yh$passthrough.sector, A21.globaltech_coef$supplysector ) ]#
#
#crop inputs to biodiesel are region-specific#
L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity[ L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity == "biomassOil" ] <- A_regions$biomassOil_tech[#
      match( L122.in_EJ_R_1stgenbio_F_Yh$GCAM_region_ID[ L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity == "biomassOil" ], A_regions$GCAM_region_ID ) ]#
L122.in_EJ_R_1stgenbio_F_Yh <- subset( L122.in_EJ_R_1stgenbio_F_Yh, GCAM_commodity %in% FAO_ag_items_PRODSTAT$GCAM_commodity )#
#
#Interpolate coefs to all historical periods, and multiply by the input quantities#
L121.globaltech_coef <- gcam_interp( A21.globaltech_coef, historical_years )#
L122.in_Mt_R_C_Yh <- L122.in_EJ_R_1stgenbio_F_Yh[ c( "GCAM_region_ID", "GCAM_commodity") ]#
L122.in_Mt_R_C_Yh[ X_historical_years ] <- L122.in_EJ_R_1stgenbio_F_Yh[ X_historical_years ] * L121.globaltech_coef[#
      match( L122.in_Mt_R_C_Yh$GCAM_commodity, L121.globaltech_coef$minicam.energy.input ),#
      X_historical_years ]#
#
# 2b. GAS PROCESSING#
printlog( "Gas processing input-output coefficients are exogenous" )#
# Interpolate gas processing IO coefs to all historical years and match in the fuel name#
L122.gasproc_coef <- gcam_interp( subset( A22.globaltech_coef, supplysector == "gas processing" ), historical_years )#
L122.gasproc_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L122.gasproc_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
#
printlog( "Gas processing output from biomass gasification is equal to regional TPES" )#
L122.out_EJ_R_gasproc_bio_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "gasified biomass" )#
L122.out_EJ_R_gasproc_bio_Yh$sector <- "gas processing"#
L122.out_EJ_R_gasproc_bio_Yh$fuel <- "biomass"#
#
printlog( "Gas processing output from coal gasification is calculated from the input of coal")#
L122.in_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L122.in_EJ_R_gasproc_coal_Yh$sector <- "gas processing"#
L122.out_EJ_R_gasproc_coal_Yh <- L122.in_EJ_R_gasproc_coal_Yh#
L122.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L122.in_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L122.gasproc_coef[#
      match( vecpaste( L122.in_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L122.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]#
printlog( "Natural gas is equal to regional TPES minus upstream use of natural gas (e.g. GTL)" )#
L122.out_EJ_R_gasproc_gas_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "gas" )#
L122.out_EJ_R_gasproc_gas_Yh$sector <- "gas processing"#
#NOTE: This is complicated. Several of the "upstream" energy users--in GCAM 3.0, unconventional oil production and gas-to-liquids--are assumed#
# to use natural gas upstream of the processing and T&D infrastructure. If this is the case, then these sectors' consumption of gas should not#
# be included in the gas processing and pipeline sectors. However this may be changed in the future, and for this reason the following#
# method is designed to work if future users re-set the energy inputs to these technologies from "regional natural gas" to "wholesale gas".#
#First, extract the input names#
reg_nat_gas <- calibrated_techs$minicam.energy.input[ calibrated_techs$sector == "gas processing" & calibrated_techs$fuel == "gas" ]#
gas_to_unconv_oil <- calibrated_techs$minicam.energy.input[ calibrated_techs$sector == "unconventional oil production" & calibrated_techs$fuel == "gas" ]#
gas_to_gtl <- calibrated_techs$minicam.energy.input[ calibrated_techs$sector == "gtl" & calibrated_techs$fuel == "gas" ]#
#
#Where the input names for unconv oil or GTL are equal to the name of the input to the gas processing sector,#
# subtract from the gas processing sector's production#
if ( gas_to_unconv_oil == reg_nat_gas ){#
	L122.out_EJ_R_gasproc_gas_Yh[ L122.out_EJ_R_gasproc_gas_Yh[[R]] %in% L121.in_EJ_R_unoil_F_Yh[[R]], X_historical_years ] <-#
	L122.out_EJ_R_gasproc_gas_Yh[ L122.out_EJ_R_gasproc_gas_Yh[[R]] %in% L121.in_EJ_R_unoil_F_Yh[[R]], X_historical_years ] - L121.in_EJ_R_unoil_F_Yh[#
	   match( vecpaste( L122.out_EJ_R_gasproc_gas_Yh[ L122.out_EJ_R_gasproc_gas_Yh[[R]] %in% L121.in_EJ_R_unoil_F_Yh[[R]], R_F ] ),#
	          vecpaste( L121.in_EJ_R_unoil_F_Yh[ R_F ] ) ),#
	   X_historical_years ]	#
}#
#
if ( gas_to_gtl == reg_nat_gas ){#
	L122.out_EJ_R_gasproc_gas_Yh[ X_historical_years ] <-#
	L122.out_EJ_R_gasproc_gas_Yh[ X_historical_years ] - L122.in_EJ_R_gtlctl_F_Yh[#
	   match( vecpaste( L122.out_EJ_R_gasproc_gas_Yh[ R_F ] ), vecpaste( L122.in_EJ_R_gtlctl_F_Yh[ R_F ] ) ),#
	   X_historical_years ]	#
}#
#
#Combine (rbind) individual fuel tables#
L122.out_EJ_R_gasproc_F_Yh <- rbind( L122.out_EJ_R_gasproc_gas_Yh, L122.out_EJ_R_gasproc_bio_Yh, L122.out_EJ_R_gasproc_coal_Yh )
L122.out_EJ_R_gasproc_coal_Yh[L122.out_EJ_R_gasproc_coal_Yh[[R]]==24,]
L122.out_EJ_R_gasproc_gas_Yh[L122.out_EJ_R_gasproc_gas_Yh[[R]]==24,]
L122.out_EJ_R_gasproc_gas_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "gas" )#
L122.out_EJ_R_gasproc_gas_Yh$sector <- "gas processing"
L122.out_EJ_R_gasproc_gas_Yh[L122.out_EJ_R_gasproc_gas_Yh[[R]]==24,]
subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "gas" )
head(L101.en_bal_EJ_R_Si_Fi_Yh_full)
L101.IEA_en_bal_ctry_hist <- L100.IEA_en_bal_ctry_hist#
L101.IEA_en_bal_ctry_hist$GCAM_region_ID <- iso_GCAM_regID$GCAM_region_ID[ match( L101.IEA_en_bal_ctry_hist$iso, iso_GCAM_regID$iso ) ]
Add in the fuel names and sector names#
L101.IEA_en_bal_ctry_hist$sector <- IEA_flow_sector$sector[ match( L101.IEA_en_bal_ctry_hist$FLOW, IEA_flow_sector$flow_code ) ]#
L101.IEA_en_bal_ctry_hist$fuel <- IEA_product_fuel$fuel[ match( L101.IEA_en_bal_ctry_hist$PRODUCT, IEA_product_fuel$product ) ]#
L101.IEA_en_bal_ctry_hist$conversion <- IEA_flow_sector$conversion[ match( L101.IEA_en_bal_ctry_hist$FLOW, IEA_flow_sector$flow_code ) ]#
#
#Drop missing values (many of the products and flows are not used)#
L101.IEA_en_bal_ctry_hist <- na.omit( L101.IEA_en_bal_ctry_hist )#
#
#Re-name sectors for selected sector/fuel combinations#
#Most of this re-mapping takes place in the "IEA_sector_fuel_modifications" mapping file; however, some are region-specific and are done here#
#Specify traditional biomass in regions where indicated; otherwise, label as biomass#
printlog( "Setting biomass_tradbio (wood) to biomass in regions/sectors where wood is not labeled traditional biomass" )#
L101.IEA_en_bal_ctry_hist$fuel[ { L101.IEA_en_bal_ctry_hist$fuel == "biomass_tradbio" & L101.IEA_en_bal_ctry_hist$sector != "in_bld_resid" } |#
      { L101.IEA_en_bal_ctry_hist$fuel == "biomass_tradbio" & A_regions$tradbio_region[#
      match( L101.IEA_en_bal_ctry_hist$GCAM_region_ID, A_regions$GCAM_region_ID ) ] == 0 } ] <- "biomass"#
#
#In some countries, "gas works gas" is produced from coal. This is calibrated (coal gasification), so re-name the relevant sectors#
printlog( "Specifying coal gasification in selected regions")#
#Rename the sector and the fuel: where the sector is gas works and the fuel is coal, this is the input to gas processing#
L101.IEA_en_bal_ctry_hist$sector[#
      L101.IEA_en_bal_ctry_hist$sector == "net_gas works" &#
      L101.IEA_en_bal_ctry_hist$fuel == "coal" ] <- "in_gas processing"#
#Where the sector is gas works and the fuel is not coal, this is industry/energy transformation#
L101.IEA_en_bal_ctry_hist$sector[#
      L101.IEA_en_bal_ctry_hist$sector == "net_gas works" &#
      L101.IEA_en_bal_ctry_hist$fuel != "coal" ] <- "net_industry_energy transformation"#
printlog( "Re-setting sector-fuel combinations as specified in", file_fqn( "ENERGY_MAPPINGS", "IEA_sector_fuel_modifications" ) )#
sector_fuel_init <- vecpaste( L101.IEA_en_bal_ctry_hist[ S_F ] )#
sector_fuel_tochange <- vecpaste( IEA_sector_fuel_modifications[ c( "sector_initial", "fuel_initial" ) ] )#
L101.IEA_en_bal_ctry_hist[ sector_fuel_init %in% sector_fuel_tochange, c( S_F, "conversion" ) ] <-#
      IEA_sector_fuel_modifications[ match( sector_fuel_init[ sector_fuel_init %in% sector_fuel_tochange ], sector_fuel_tochange ),#
      c( S_F, "conversion" ) ]#
#
#Drop some sector-fuel combinations that are not relevant#
#Electricity-only fuels in sectors other than electricity generation#
L101.IEA_en_bal_ctry_hist$sector[ grepl( "elec_", L101.IEA_en_bal_ctry_hist$fuel) & !grepl( "electricity generation", L101.IEA_en_bal_ctry_hist$sector ) ] <- NA#
L101.IEA_en_bal_ctry_hist$sector[ L101.IEA_en_bal_ctry_hist$fuel %in% c( "biomass", "heat" ) & grepl( "trn_", L101.IEA_en_bal_ctry_hist$sector ) ] <- NA#
#
#Subset the table minus the missing values for further processing#
L101.IEA_en_bal_ctry_hist_clean <- na.omit( L101.IEA_en_bal_ctry_hist )#
#
#Aggregate by relevant categories, multiplying through by conversion factors (to EJ)#
printlog( "Converting energy balance data to EJ and aggregating by GCAM region, intermediate sector, and intermediate fuel")#
L101.en_bal_EJ_R_Si_Fi_Yh <- aggregate( L101.IEA_en_bal_ctry_hist_clean[ X_historical_years ] * L101.IEA_en_bal_ctry_hist_clean$conv,#
      by=as.list( L101.IEA_en_bal_ctry_hist_clean[ R_S_F ] ), sum )#
printlog( "Setting to zero net fuel production from energy transformation sectors modeled under the industrial sector" )#
for( i in 1:ncol( L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ] ) ){#
	L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ][i][#
	    L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ][i] < 0 &#
	    grepl( "industry", L101.en_bal_EJ_R_Si_Fi_Yh$sector ),] <- 0#
}
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L101.en_bal_IEA.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Historical energy balances from IEA, aggregated to GCAM regions, intermediate sectors, and intermediate fuels" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID")#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
IEA_flow_sector <- readdata( "ENERGY_MAPPINGS", "IEA_flow_sector" )#
IEA_product_fuel <- readdata( "ENERGY_MAPPINGS", "IEA_product_fuel" )#
IEA_sector_fuel_modifications <- readdata( "ENERGY_MAPPINGS", "IEA_sector_fuel_modifications" )#
L100.IEA_en_bal_ctry_hist <- readdata( "ENERGY_LEVEL1_DATA", "L100.IEA_en_bal_ctry_hist" )#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# subset only the relevant years and combine OECD with non-OECD#
printlog( "Matching GCAM region names, intermediate sector names, and intermediate fuel names into IEA energy balances" )#
L101.IEA_en_bal_ctry_hist <- L100.IEA_en_bal_ctry_hist#
L101.IEA_en_bal_ctry_hist$GCAM_region_ID <- iso_GCAM_regID$GCAM_region_ID[ match( L101.IEA_en_bal_ctry_hist$iso, iso_GCAM_regID$iso ) ]#
#
#Add in the fuel names and sector names#
L101.IEA_en_bal_ctry_hist$sector <- IEA_flow_sector$sector[ match( L101.IEA_en_bal_ctry_hist$FLOW, IEA_flow_sector$flow_code ) ]#
L101.IEA_en_bal_ctry_hist$fuel <- IEA_product_fuel$fuel[ match( L101.IEA_en_bal_ctry_hist$PRODUCT, IEA_product_fuel$product ) ]#
L101.IEA_en_bal_ctry_hist$conversion <- IEA_flow_sector$conversion[ match( L101.IEA_en_bal_ctry_hist$FLOW, IEA_flow_sector$flow_code ) ]#
#
#Drop missing values (many of the products and flows are not used)#
L101.IEA_en_bal_ctry_hist <- na.omit( L101.IEA_en_bal_ctry_hist )#
#
#Re-name sectors for selected sector/fuel combinations#
#Most of this re-mapping takes place in the "IEA_sector_fuel_modifications" mapping file; however, some are region-specific and are done here#
#Specify traditional biomass in regions where indicated; otherwise, label as biomass#
printlog( "Setting biomass_tradbio (wood) to biomass in regions/sectors where wood is not labeled traditional biomass" )#
L101.IEA_en_bal_ctry_hist$fuel[ { L101.IEA_en_bal_ctry_hist$fuel == "biomass_tradbio" & L101.IEA_en_bal_ctry_hist$sector != "in_bld_resid" } |#
      { L101.IEA_en_bal_ctry_hist$fuel == "biomass_tradbio" & A_regions$tradbio_region[#
      match( L101.IEA_en_bal_ctry_hist$GCAM_region_ID, A_regions$GCAM_region_ID ) ] == 0 } ] <- "biomass"#
#
#In some countries, "gas works gas" is produced from coal. This is calibrated (coal gasification), so re-name the relevant sectors#
printlog( "Specifying coal gasification in selected regions")#
#Rename the sector and the fuel: where the sector is gas works and the fuel is coal, this is the input to gas processing#
L101.IEA_en_bal_ctry_hist$sector[#
      L101.IEA_en_bal_ctry_hist$sector == "net_gas works" &#
      L101.IEA_en_bal_ctry_hist$fuel == "coal" ] <- "in_gas processing"#
#Where the sector is gas works and the fuel is not coal, this is industry/energy transformation#
L101.IEA_en_bal_ctry_hist$sector[#
      L101.IEA_en_bal_ctry_hist$sector == "net_gas works" &#
      L101.IEA_en_bal_ctry_hist$fuel != "coal" ] <- "net_industry_energy transformation"#
printlog( "Re-setting sector-fuel combinations as specified in", file_fqn( "ENERGY_MAPPINGS", "IEA_sector_fuel_modifications" ) )#
sector_fuel_init <- vecpaste( L101.IEA_en_bal_ctry_hist[ S_F ] )#
sector_fuel_tochange <- vecpaste( IEA_sector_fuel_modifications[ c( "sector_initial", "fuel_initial" ) ] )#
L101.IEA_en_bal_ctry_hist[ sector_fuel_init %in% sector_fuel_tochange, c( S_F, "conversion" ) ] <-#
      IEA_sector_fuel_modifications[ match( sector_fuel_init[ sector_fuel_init %in% sector_fuel_tochange ], sector_fuel_tochange ),#
      c( S_F, "conversion" ) ]#
#
#Drop some sector-fuel combinations that are not relevant#
#Electricity-only fuels in sectors other than electricity generation#
L101.IEA_en_bal_ctry_hist$sector[ grepl( "elec_", L101.IEA_en_bal_ctry_hist$fuel) & !grepl( "electricity generation", L101.IEA_en_bal_ctry_hist$sector ) ] <- NA#
L101.IEA_en_bal_ctry_hist$sector[ L101.IEA_en_bal_ctry_hist$fuel %in% c( "biomass", "heat" ) & grepl( "trn_", L101.IEA_en_bal_ctry_hist$sector ) ] <- NA#
#
#Subset the table minus the missing values for further processing#
L101.IEA_en_bal_ctry_hist_clean <- na.omit( L101.IEA_en_bal_ctry_hist )#
#
#Aggregate by relevant categories, multiplying through by conversion factors (to EJ)#
printlog( "Converting energy balance data to EJ and aggregating by GCAM region, intermediate sector, and intermediate fuel")#
L101.en_bal_EJ_R_Si_Fi_Yh <- aggregate( L101.IEA_en_bal_ctry_hist_clean[ X_historical_years ] * L101.IEA_en_bal_ctry_hist_clean$conv,#
      by=as.list( L101.IEA_en_bal_ctry_hist_clean[ R_S_F ] ), sum )#
printlog( "Setting to zero net fuel production from energy transformation sectors modeled under the industrial sector" )#
for( i in 1:ncol( L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ] ) ){#
	L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ][i][#
	    L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ][i] < 0 &#
	    grepl( "industry", L101.en_bal_EJ_R_Si_Fi_Yh$sector ),] <- 0#
}#
#
printlog( "Setting to zero net production of fuels classified as coal at gas works (gas coke)" )#
for( i in 1:ncol( L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ] ) ){#
	L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ][i][#
	    L101.en_bal_EJ_R_Si_Fi_Yh[ X_historical_years ][i] < 0 &#
	    L101.en_bal_EJ_R_Si_Fi_Yh$sector == "in_gas processing",] <- 0#
}#
#
#Create a template table with all applicable combinations of sector and fuel found in any region#
# First, define the available combinations of sector and fuel#
sector_fuel_final <- sort( unique( paste( L101.en_bal_EJ_R_Si_Fi_Yh$sector, L101.en_bal_EJ_R_Si_Fi_Yh$fuel, sep = "|") ) )#
#
# Then build the table#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- data.frame(#
      GCAM_region_ID = sort( rep( A_regions$GCAM_region_ID, times = length( sector_fuel_final ) ) ),#
      sector = substr( sector_fuel_final, 1, regexpr( "|", sector_fuel_final, fixed = TRUE ) - 1 ),#
      fuel = substr( sector_fuel_final, regexpr( "|", sector_fuel_final, fixed = TRUE ) + 1, nchar( sector_fuel_final ) ) )#
L101.en_bal_EJ_R_Si_Fi_Yh_full[ X_historical_years ] <- L101.en_bal_EJ_R_Si_Fi_Yh[#
      match( vecpaste( L101.en_bal_EJ_R_Si_Fi_Yh_full[ R_S_F ] ),#
             vecpaste( L101.en_bal_EJ_R_Si_Fi_Yh[ R_S_F ] ) ),#
      X_historical_years ]#
L101.en_bal_EJ_R_Si_Fi_Yh_full[ is.na( L101.en_bal_EJ_R_Si_Fi_Yh_full ) ] <- 0#
#
#Calculate the total primary energy supply (TPES) in each region as the sum of all flows that are inputs#
##This guarantees that our TPES will be consistent with the tracked forms of consumption (i.e. no statdiffs, stock changes, transfers)#
printlog( "Calculating total primary energy supply for each region / intermediate fuel and appending to the energy balance table" )#
L101.in_EJ_R_Si_Fi_Yh <- subset( L101.en_bal_EJ_R_Si_Fi_Yh_full, grepl( "in_", substr( sector, 1, 3 ) ) | grepl( "net_", substr( sector, 1, 4 ) ) )#
L101.in_EJ_R_Si_Fi_Yh$sector <- "TPES"#
L101.in_EJ_R_TPES_Fi_Yh <- aggregate( L101.in_EJ_R_Si_Fi_Yh[ X_historical_years ],#
      by = as.list( L101.in_EJ_R_Si_Fi_Yh[ R_S_F ] ), sum )#
#Append (rbind) TPES onto the end of the energy balances#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- rbind( L101.en_bal_EJ_R_Si_Fi_Yh_full, L101.in_EJ_R_TPES_Fi_Yh )
dim(L101.in_EJ_R_Si_Fi_Yh)
subset(L101.in_EJ_R_Si_Fi_Yh, GCAM_region_ID==24 & fuel == "gas")
L101.in_EJ_R_Si_Fi_Yh <- subset( L101.en_bal_EJ_R_Si_Fi_Yh_full, grepl( "in_", substr( sector, 1, 3 ) ) | grepl( "net_", substr( sector, 1, 4 ) ) )#
L101.in_EJ_R_Si_Fi_Yh$sector <- "TPES"#
L101.in_EJ_R_TPES_Fi_Yh <- aggregate( L101.in_EJ_R_Si_Fi_Yh[ X_historical_years ],#
      by = as.list( L101.in_EJ_R_Si_Fi_Yh[ R_S_F ] ), sum )#
#Append (rbind) TPES onto the end of the energy balances#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- rbind( L101.en_bal_EJ_R_Si_Fi_Yh_full, L101.in_EJ_R_TPES_Fi_Yh )
subset(L101.en_bal_EJ_R_Si_Fi_Yh_full, fuel == "gas" & sector == "TPES" & GCAM_region_ID==24)
logstop()
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas",]
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID")#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
EIA_RFO_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_RFO_intlship_kbbld" )#
EIA_TOT_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_TOT_intlship_kbbld" )#
EIA_ctry <- readdata( "ENERGY_MAPPINGS", "EIA_ctry" )#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- readdata( "ENERGY_LEVEL1_DATA", "L101.en_bal_EJ_R_Si_Fi_Yh_full" )#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# subset only the relevant years and combine OECD with non-OECD#
###MODIFICATIONS TO IEA ENERGY BALANCES#
printlog( "Replacing IEA estimates of international shipping fuel consumption with EIA estimates")#
#First, convert available data to EJ per year of total refined liquid products#
EIA_yearcols <- names( EIA_RFO_intlship_kbbld )[ names( EIA_RFO_intlship_kbbld ) %in% X_historical_years ]#
L1011.in_EJ_ctry_intlship_RFO_Yh <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_RFO_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_RFO * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
EIA_distillate_intlship_kbbld <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_TOT_intlship_kbbld[ EIA_yearcols ] - EIA_RFO_intlship_kbbld[ EIA_yearcols ] )#
L1011.in_EJ_ctry_intlship_distillate_Yh <- data.frame(#
      EIA_distillate_intlship_kbbld[ "Country" ],#
      EIA_distillate_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_distillate * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
L1011.in_EJ_ctry_intlship_TOT_Yh <- data.frame(#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ "Country" ],#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ EIA_yearcols ] + L1011.in_EJ_ctry_intlship_RFO_Yh[ EIA_yearcols ] )#
#
#Several countries blink in and out of the time series. Only changing Russia because it's the only one that is a really large amount of fuel#
L1011.in_EJ_ctry_intlship_TOT_Yh[ is.na( L1011.in_EJ_ctry_intlship_TOT_Yh ) ] <- 0#
L1011.in_EJ_ctry_intlship_TOT_Yh[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia", paste( "X", 2006:2010, sep = "" ) ] <-#
      L1011.in_EJ_ctry_intlship_TOT_Yh$X2005[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia" ]#
#
#Match in the countries and aggregate by region#
L1011.in_EJ_ctry_intlship_TOT_Yh$iso <- EIA_ctry$iso[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$Country, EIA_ctry$EIA_ctry ) ]#
L1011.in_EJ_ctry_intlship_TOT_Yh$GCAM_region_ID <- iso_GCAM_regID$GCAM_region_ID[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$iso, iso_GCAM_regID$iso)]#
L1011.in_EJ_R_intlship_Yh <- aggregate( L1011.in_EJ_ctry_intlship_TOT_Yh[ EIA_yearcols ],#
      by=as.list( L1011.in_EJ_ctry_intlship_TOT_Yh[ "GCAM_region_ID" ] ), sum )#
#
#Replace the data in the IEA energy balances table#
L1011.en_bal_EJ_R_Si_Fi_Yh <- L101.en_bal_EJ_R_Si_Fi_Yh_full#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "in_trn_international ship" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "refined liquids", EIA_yearcols ] <-#
      L1011.in_EJ_R_intlship_Yh[ EIA_yearcols ]#
#
#Re-calculate TPES after all adjustments are made#
L1011.in_EJ_R_Si_Fi_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, grepl( "in_", substr( sector, 1, 3 ) ) | grepl( "net_", substr( sector, 1, 4 ) ) )#
L1011.in_EJ_R_Si_Fi_Yh$sector <- "TPES"#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES", ] <- aggregate( L1011.in_EJ_R_Si_Fi_Yh[ X_historical_years ],#
      by=as.list( L1011.in_EJ_R_Si_Fi_Yh[ R_S_F ] ), sum )#
#
printlog( "NOTE: TPES of natural gas includes gasified coal. This is subtracted here" )#
#This is complicated. Because the output of "gas works gas" that is produced from coal is not distinguished from that produced by other fuels,#
# the process is modeled based on the fuel inputs, and the output fuel is assigned the same name as natural gas. As a result the estimates of#
# TPES at this point for natural gas include both natural gas and gasified coal. This subtraction generally follows the method used in code file L122.#
L1011.gasproc_coef <- gcam_interp( subset( A22.globaltech_coef, supplysector == "gas processing" ), historical_years )#
L1011.gasproc_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L1011.gasproc_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
L1011.out_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L1011.out_EJ_R_gasproc_coal_Yh$sector <- sub( "in_", "", L1011.out_EJ_R_gasproc_coal_Yh$sector )#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L1011.en_bal_adj.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Adjustments to IEA energy balances" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID")#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
EIA_RFO_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_RFO_intlship_kbbld" )#
EIA_TOT_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_TOT_intlship_kbbld" )#
EIA_ctry <- readdata( "ENERGY_MAPPINGS", "EIA_ctry" )#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- readdata( "ENERGY_LEVEL1_DATA", "L101.en_bal_EJ_R_Si_Fi_Yh_full" )#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# subset only the relevant years and combine OECD with non-OECD#
###MODIFICATIONS TO IEA ENERGY BALANCES#
printlog( "Replacing IEA estimates of international shipping fuel consumption with EIA estimates")#
#First, convert available data to EJ per year of total refined liquid products#
EIA_yearcols <- names( EIA_RFO_intlship_kbbld )[ names( EIA_RFO_intlship_kbbld ) %in% X_historical_years ]#
L1011.in_EJ_ctry_intlship_RFO_Yh <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_RFO_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_RFO * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
EIA_distillate_intlship_kbbld <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_TOT_intlship_kbbld[ EIA_yearcols ] - EIA_RFO_intlship_kbbld[ EIA_yearcols ] )#
L1011.in_EJ_ctry_intlship_distillate_Yh <- data.frame(#
      EIA_distillate_intlship_kbbld[ "Country" ],#
      EIA_distillate_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_distillate * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
L1011.in_EJ_ctry_intlship_TOT_Yh <- data.frame(#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ "Country" ],#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ EIA_yearcols ] + L1011.in_EJ_ctry_intlship_RFO_Yh[ EIA_yearcols ] )#
#
#Several countries blink in and out of the time series. Only changing Russia because it's the only one that is a really large amount of fuel#
L1011.in_EJ_ctry_intlship_TOT_Yh[ is.na( L1011.in_EJ_ctry_intlship_TOT_Yh ) ] <- 0#
L1011.in_EJ_ctry_intlship_TOT_Yh[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia", paste( "X", 2006:2010, sep = "" ) ] <-#
      L1011.in_EJ_ctry_intlship_TOT_Yh$X2005[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia" ]#
#
#Match in the countries and aggregate by region#
L1011.in_EJ_ctry_intlship_TOT_Yh$iso <- EIA_ctry$iso[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$Country, EIA_ctry$EIA_ctry ) ]#
L1011.in_EJ_ctry_intlship_TOT_Yh$GCAM_region_ID <- iso_GCAM_regID$GCAM_region_ID[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$iso, iso_GCAM_regID$iso)]#
L1011.in_EJ_R_intlship_Yh <- aggregate( L1011.in_EJ_ctry_intlship_TOT_Yh[ EIA_yearcols ],#
      by=as.list( L1011.in_EJ_ctry_intlship_TOT_Yh[ "GCAM_region_ID" ] ), sum )#
#
#Replace the data in the IEA energy balances table#
L1011.en_bal_EJ_R_Si_Fi_Yh <- L101.en_bal_EJ_R_Si_Fi_Yh_full#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "in_trn_international ship" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "refined liquids", EIA_yearcols ] <-#
      L1011.in_EJ_R_intlship_Yh[ EIA_yearcols ]#
#
#Re-calculate TPES after all adjustments are made#
L1011.in_EJ_R_Si_Fi_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, grepl( "in_", substr( sector, 1, 3 ) ) | grepl( "net_", substr( sector, 1, 4 ) ) )#
L1011.in_EJ_R_Si_Fi_Yh$sector <- "TPES"#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES", ] <- aggregate( L1011.in_EJ_R_Si_Fi_Yh[ X_historical_years ],#
      by=as.list( L1011.in_EJ_R_Si_Fi_Yh[ R_S_F ] ), sum )#
#
printlog( "NOTE: TPES of natural gas includes gasified coal. This is subtracted here" )#
#This is complicated. Because the output of "gas works gas" that is produced from coal is not distinguished from that produced by other fuels,#
# the process is modeled based on the fuel inputs, and the output fuel is assigned the same name as natural gas. As a result the estimates of#
# TPES at this point for natural gas include both natural gas and gasified coal. This subtraction generally follows the method used in code file L122.#
L1011.gasproc_coef <- gcam_interp( subset( A22.globaltech_coef, supplysector == "gas processing" ), historical_years )#
L1011.gasproc_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L1011.gasproc_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
L1011.out_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L1011.out_EJ_R_gasproc_coal_Yh$sector <- sub( "in_", "", L1011.out_EJ_R_gasproc_coal_Yh$sector )#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas",]
0.08380372
subset(L1011.out_EJ_R_gasproc_coal_Yh, GCAM_region_ID==24)
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] <-#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] -#
      L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
         L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
         L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] <- #
      L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] +#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
subset(L1011.out_EJ_R_gasproc_coal_Yh, GCAM_region_ID==24)
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "in_gas processing" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "coal", ]
L1011.in_EJ_R_gasproc_coal_Yh
L1011.in_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] * L1011.gasproc_coef[#
      match( vecpaste( L1011.in_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]
L1011.in_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L1011.out_EJ_R_gasproc_coal_Yh <- L1011.in_EJ_R_gasproc_coal_Yh#
L1011.out_EJ_R_gasproc_coal_Yh$sector <- sub( "in_", "", L1011.out_EJ_R_gasproc_coal_Yh$sector )#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] <- #
      L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] +#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]#
L1011.in_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] * L1011.gasproc_coef[#
      match( vecpaste( L1011.in_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]
subset(L1011.in_EJ_R_gasproc_coal_Yh, GCAM_region_ID==24)
subset(L1011.out_EJ_R_gasproc_coal_Yh, GCAM_region_ID==24)
L1011.gasproc_coef
L1011.in_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] * L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]
L1011.in_EJ_R_gasproc_coal_Yh
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID")#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
EIA_RFO_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_RFO_intlship_kbbld" )#
EIA_TOT_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_TOT_intlship_kbbld" )#
EIA_ctry <- readdata( "ENERGY_MAPPINGS", "EIA_ctry" )#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- readdata( "ENERGY_LEVEL1_DATA", "L101.en_bal_EJ_R_Si_Fi_Yh_full" )#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# subset only the relevant years and combine OECD with non-OECD#
###MODIFICATIONS TO IEA ENERGY BALANCES#
printlog( "Replacing IEA estimates of international shipping fuel consumption with EIA estimates")#
#First, convert available data to EJ per year of total refined liquid products#
EIA_yearcols <- names( EIA_RFO_intlship_kbbld )[ names( EIA_RFO_intlship_kbbld ) %in% X_historical_years ]#
L1011.in_EJ_ctry_intlship_RFO_Yh <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_RFO_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_RFO * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
EIA_distillate_intlship_kbbld <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_TOT_intlship_kbbld[ EIA_yearcols ] - EIA_RFO_intlship_kbbld[ EIA_yearcols ] )#
L1011.in_EJ_ctry_intlship_distillate_Yh <- data.frame(#
      EIA_distillate_intlship_kbbld[ "Country" ],#
      EIA_distillate_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_distillate * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
L1011.in_EJ_ctry_intlship_TOT_Yh <- data.frame(#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ "Country" ],#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ EIA_yearcols ] + L1011.in_EJ_ctry_intlship_RFO_Yh[ EIA_yearcols ] )#
#
#Several countries blink in and out of the time series. Only changing Russia because it's the only one that is a really large amount of fuel#
L1011.in_EJ_ctry_intlship_TOT_Yh[ is.na( L1011.in_EJ_ctry_intlship_TOT_Yh ) ] <- 0#
L1011.in_EJ_ctry_intlship_TOT_Yh[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia", paste( "X", 2006:2010, sep = "" ) ] <-#
      L1011.in_EJ_ctry_intlship_TOT_Yh$X2005[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia" ]#
#
#Match in the countries and aggregate by region#
L1011.in_EJ_ctry_intlship_TOT_Yh$iso <- EIA_ctry$iso[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$Country, EIA_ctry$EIA_ctry ) ]#
L1011.in_EJ_ctry_intlship_TOT_Yh$GCAM_region_ID <- iso_GCAM_regID$GCAM_region_ID[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$iso, iso_GCAM_regID$iso)]#
L1011.in_EJ_R_intlship_Yh <- aggregate( L1011.in_EJ_ctry_intlship_TOT_Yh[ EIA_yearcols ],#
      by=as.list( L1011.in_EJ_ctry_intlship_TOT_Yh[ "GCAM_region_ID" ] ), sum )#
#
#Replace the data in the IEA energy balances table#
L1011.en_bal_EJ_R_Si_Fi_Yh <- L101.en_bal_EJ_R_Si_Fi_Yh_full#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "in_trn_international ship" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "refined liquids", EIA_yearcols ] <-#
      L1011.in_EJ_R_intlship_Yh[ EIA_yearcols ]#
#
#Re-calculate TPES after all adjustments are made#
L1011.in_EJ_R_Si_Fi_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, grepl( "in_", substr( sector, 1, 3 ) ) | grepl( "net_", substr( sector, 1, 4 ) ) )#
L1011.in_EJ_R_Si_Fi_Yh$sector <- "TPES"#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES", ] <- aggregate( L1011.in_EJ_R_Si_Fi_Yh[ X_historical_years ],#
      by=as.list( L1011.in_EJ_R_Si_Fi_Yh[ R_S_F ] ), sum )#
#
printlog( "NOTE: TPES of natural gas includes gasified coal. This is subtracted here" )#
#This is complicated. Because the output of "gas works gas" that is produced from coal is not distinguished from that produced by other fuels,#
# the process is modeled based on the fuel inputs, and the output fuel is assigned the same name as natural gas. As a result the estimates of#
# TPES at this point for natural gas include both natural gas and gasified coal. This subtraction generally follows the method used in code file L122.#
L1011.gasproc_coef <- gcam_interp( subset( A22.globaltech_coef, supplysector == "gas processing" ), historical_years )#
L1011.gasproc_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L1011.gasproc_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
L1011.in_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L1011.out_EJ_R_gasproc_coal_Yh <- L1011.in_EJ_R_gasproc_coal_Yh#
L1011.out_EJ_R_gasproc_coal_Yh$sector <- sub( "in_", "", L1011.out_EJ_R_gasproc_coal_Yh$sector )#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]#
#
#Subtract#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] <-#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] -#
      L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ]#
#
#This is also complicated. The use of an exogenous IO coefficient may cause TPES of natural gas to go negative in regions with#
# very low gas consumption (e.g. South Africa). Where negative values are produced, they should be set to zero and#
# the coal-to-gas input should be reduced by this amount times the IO coef#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] <- #
      L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] +#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]#
L1011.in_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] * L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "in_gas processing" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "coal", ] <-#
      L1011.in_EJ_R_gasproc_coal_Yh#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] <- 0
subset(L1011.en_bal_EJ_R_Si_Fi_Yh, sector %in% c( "in_gas processing", "TPES") & GCAM_region_ID==24)
subset(L1011.en_bal_EJ_R_Si_Fi_Yh, sector %in% c( "in_gas processing", "TPES") & GCAM_region_ID==24)[c(1:3,18:25)]
subset(L1011.out_EJ_R_gasproc_coal_Yh, GCAM_region_ID==24)
.08380372*1.326
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
source("../energy-processing-code/level1/L1011.en_bal_adj.R")
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L122.gasproc_refining.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Historical inputs, outputs, and IO coefficients of gas processing and refining" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
FAO_ag_items_PRODSTAT <- readdata( "AGLU_MAPPINGS", "FAO_ag_items_PRODSTAT" )#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
A21.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_coef")#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
L121.in_EJ_R_unoil_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L121.in_EJ_R_unoil_F_Yh" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
FAO_ag_items_PRODSTAT <- readdata( "AGLU_MAPPINGS", "FAO_ag_items_PRODSTAT" )#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
A_regions <- readdata( "ENERGY_ASSUMPTIONS", "A_regions" )#
A21.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A21.globaltech_coef")#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
L121.in_EJ_R_unoil_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L121.in_EJ_R_unoil_F_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# 2a. REFINING#
##For most technologies, inputs are derived from outputs based on exogenous IO coefficients. Subset the relevant IO coefs#
L122.globaltech_coef <- subset( A22.globaltech_coef, paste( supplysector, subsector, technology ) %in% vecpaste( calibrated_techs[ s_s_t ] ) )#
L122.globaltech_coef[ S_F ] <- calibrated_techs[#
      match( vecpaste( L122.globaltech_coef[ s_s_t_i ] ), vecpaste( calibrated_techs[ s_s_t_i ] ) ),#
      S_F ]#
L122.globaltech_coef <- gcam_interp( L122.globaltech_coef, historical_years )#
#
## BIOMASS LIQUIDS#
printlog( "Ethanol and biodiesel output: equal to regional TPES")#
L122.out_EJ_R_biofuel_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel %in% c( "refined biofuels_ethanol", "refined biofuels_FT" ) )#
L122.out_EJ_R_biofuel_Yh$sector[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_ethanol" ] <- A_regions$ethanol[#
      match( L122.out_EJ_R_biofuel_Yh$GCAM_region_ID[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_ethanol" ],#
             A_regions$GCAM_region_ID ) ]#
L122.out_EJ_R_biofuel_Yh$sector[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_FT" ] <- A_regions$biodiesel[#
      match( L122.out_EJ_R_biofuel_Yh$GCAM_region_ID[ L122.out_EJ_R_biofuel_Yh$fuel == "refined biofuels_FT" ],#
             A_regions$GCAM_region_ID ) ]#
L122.out_EJ_R_biofuel_Yh$fuel <- calibrated_techs$fuel[ match( L122.out_EJ_R_biofuel_Yh$sector, calibrated_techs$sector ) ]#
#
#Inputs to biofuel production are region-specific#
printlog( "Inputs to ethanol and biodiesel: equal to output times exogenous input-output coefficients" )#
L122.biofuel_coef <- subset( L122.globaltech_coef, sector %in% L122.out_EJ_R_biofuel_Yh$sector )#
#
#Because some have multiple inputs, repeat coefficient table by number of regions and then subset only the applicable combinations#
L122.biofuel_coef_repR <- repeat_and_add_vector( L122.biofuel_coef, "GCAM_region_ID", A_regions$GCAM_region_ID )#
L122.biofuel_coef_R <- subset( L122.biofuel_coef_repR, paste( GCAM_region_ID, sector ) %in%#
      c( vecpaste( A_regions[ c( "GCAM_region_ID", "ethanol" ) ] ),#
         vecpaste( A_regions[ c( "GCAM_region_ID", "biodiesel" ) ] ) ) )#
#
#Build table of inputs to biofuel production (IO coefs times output)#
L122.in_EJ_R_biofuel_F_Yh <- L122.biofuel_coef_R[ c( R_S_F ) ]#
L122.in_EJ_R_biofuel_F_Yh[ X_historical_years ] <- L122.biofuel_coef_R[ X_historical_years ] * L122.out_EJ_R_biofuel_Yh[#
      match( vecpaste( L122.in_EJ_R_biofuel_F_Yh[ R_S ] ), vecpaste( L122.out_EJ_R_biofuel_Yh[ R_S ] ) ),#
      X_historical_years ]#
#
## GAS AND COAL TO LIQUIDS#
printlog( "Output of GTL and CTL: subset from energy balance table")#
L122.out_EJ_R_gtlctl_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector %in% c( "out_gtl", "out_ctl" ) )#
L122.out_EJ_R_gtlctl_Yh$sector <- sub( "out_", "", L122.out_EJ_R_gtlctl_Yh$sector )#
#
printlog( "GTL and CTL inputs: derived as output times exogenous input-output coefficients" )#
# Interpolate gas processing IO coefs to all historical years and match in the fuel name#
L122.gtlctl_coef <- subset( L122.globaltech_coef, paste( sector, fuel ) %in% vecpaste( L122.out_EJ_R_gtlctl_Yh[ S_F ] ) )#
#
#Assuming only one input per technology#
L122.in_EJ_R_gtlctl_F_Yh <- L122.out_EJ_R_gtlctl_Yh#
L122.in_EJ_R_gtlctl_F_Yh[ X_historical_years ] <- L122.out_EJ_R_gtlctl_Yh[ X_historical_years ] * L122.gtlctl_coef[#
      match( vecpaste( L122.in_EJ_R_gtlctl_F_Yh[ S_F ] ), vecpaste( L122.gtlctl_coef[ S_F ] ) ),#
      X_historical_years ]#
##CRUDE OIL REFINING#
printlog( "Oil refining: output is equal to TPES minus net refinery energy use and output of CTL and GTL" )#
#NOTE: This is complicated. The outputs of CTL and GTL have the same fuel name as the output of oil refining,#
# so need to be deducted from TPES in order to calculate regional output of oil refining.#
# In contrast, biofuels are assigned different names, so they are not in the TPES of refined liquids.#
L122.out_EJ_R_oilrefining_Yh <- data.frame( GCAM_region_ID = GCAM_region_names$GCAM_region_ID, sector = "oil refining", fuel = "oil" )#
L122.out_EJ_R_oilrefining_Yh[ X_historical_years ] <-#
      subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "refined liquids", select = X_historical_years ) - #
      subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "net_oil refining" & fuel == "refined liquids", select = X_historical_years ) -#
      subset( L122.out_EJ_R_gtlctl_Yh, sector == "ctl" & fuel == "coal", select = X_historical_years ) -#
      subset( L122.out_EJ_R_gtlctl_Yh, sector == "gtl" & fuel == "gas", select = X_historical_years )#
#
printlog( "Oil refining: input of oil is equal to TPES, and input of other fuels is from net refinery energy use")#
L122.in_EJ_R_oilrefining_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "net_oil refining" )#
L122.in_EJ_R_oilrefining_F_Yh[ L122.in_EJ_R_oilrefining_F_Yh$fuel == "refined liquids", X_historical_years ] <-#
      subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "refined liquids", select = X_historical_years )#
L122.in_EJ_R_oilrefining_F_Yh$sector <- sub( "net_", "", L122.in_EJ_R_oilrefining_F_Yh$sector )#
L122.in_EJ_R_oilrefining_F_Yh$fuel[ L122.in_EJ_R_oilrefining_F_Yh$fuel == "refined liquids" ] <- "oil"      #
printlog( "Calculating region- and fuel-specific coefficients of crude oil refining" )#
L122.IO_R_oilrefining_F_Yh <- L122.in_EJ_R_oilrefining_F_Yh#
L122.IO_R_oilrefining_F_Yh[ X_historical_years ] <- L122.in_EJ_R_oilrefining_F_Yh[ X_historical_years ] / L122.out_EJ_R_oilrefining_Yh[#
      match( L122.IO_R_oilrefining_F_Yh$GCAM_region_ID, L122.out_EJ_R_oilrefining_Yh$GCAM_region_ID ),#
      X_historical_years ]#
#
#COMBINE (RBIND) ALL CALIBRATED REFINERY INPUT AND OUTPUT TABLES#
L122.out_EJ_R_refining_F_Yh <- rbind( L122.out_EJ_R_oilrefining_Yh, L122.out_EJ_R_gtlctl_Yh, L122.out_EJ_R_biofuel_Yh )#
L122.in_EJ_R_refining_F_Yh <- rbind( L122.in_EJ_R_oilrefining_F_Yh, L122.in_EJ_R_gtlctl_F_Yh, L122.in_EJ_R_biofuel_F_Yh )#
#
#Ancillary step: calculate and write out the derived crop inputs to the various first-generation biofuel technologies, for the AGLU processing#
L122.in_EJ_R_1stgenbio_F_Yh <- L122.in_EJ_R_biofuel_F_Yh#
L122.in_EJ_R_1stgenbio_F_Yh$passthrough.sector <- calibrated_techs$minicam.energy.input[#
      match( vecpaste( L122.in_EJ_R_1stgenbio_F_Yh[ S_F ] ), vecpaste( calibrated_techs[ S_F ] ) ) ]#
L122.in_EJ_R_1stgenbio_F_Yh <- subset( L122.in_EJ_R_1stgenbio_F_Yh, passthrough.sector %in% A21.globaltech_coef$supplysector )#
L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity <- A21.globaltech_coef$minicam.energy.input[#
      match( L122.in_EJ_R_1stgenbio_F_Yh$passthrough.sector, A21.globaltech_coef$supplysector ) ]#
#
#crop inputs to biodiesel are region-specific#
L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity[ L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity == "biomassOil" ] <- A_regions$biomassOil_tech[#
      match( L122.in_EJ_R_1stgenbio_F_Yh$GCAM_region_ID[ L122.in_EJ_R_1stgenbio_F_Yh$GCAM_commodity == "biomassOil" ], A_regions$GCAM_region_ID ) ]#
L122.in_EJ_R_1stgenbio_F_Yh <- subset( L122.in_EJ_R_1stgenbio_F_Yh, GCAM_commodity %in% FAO_ag_items_PRODSTAT$GCAM_commodity )#
#
#Interpolate coefs to all historical periods, and multiply by the input quantities#
L121.globaltech_coef <- gcam_interp( A21.globaltech_coef, historical_years )#
L122.in_Mt_R_C_Yh <- L122.in_EJ_R_1stgenbio_F_Yh[ c( "GCAM_region_ID", "GCAM_commodity") ]#
L122.in_Mt_R_C_Yh[ X_historical_years ] <- L122.in_EJ_R_1stgenbio_F_Yh[ X_historical_years ] * L121.globaltech_coef[#
      match( L122.in_Mt_R_C_Yh$GCAM_commodity, L121.globaltech_coef$minicam.energy.input ),#
      X_historical_years ]#
#
# 2b. GAS PROCESSING#
printlog( "Gas processing input-output coefficients are exogenous" )#
# Interpolate gas processing IO coefs to all historical years and match in the fuel name#
L122.gasproc_coef <- gcam_interp( subset( A22.globaltech_coef, supplysector == "gas processing" ), historical_years )#
L122.gasproc_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L122.gasproc_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
#
printlog( "Gas processing output from biomass gasification is equal to regional TPES" )#
L122.out_EJ_R_gasproc_bio_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "gasified biomass" )#
L122.out_EJ_R_gasproc_bio_Yh$sector <- "gas processing"#
L122.out_EJ_R_gasproc_bio_Yh$fuel <- "biomass"#
#
printlog( "Gas processing output from coal gasification is calculated from the input of coal")#
L122.in_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L122.in_EJ_R_gasproc_coal_Yh$sector <- "gas processing"#
L122.out_EJ_R_gasproc_coal_Yh <- L122.in_EJ_R_gasproc_coal_Yh#
L122.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L122.in_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L122.gasproc_coef[#
      match( vecpaste( L122.in_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L122.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]#
printlog( "Natural gas is equal to regional TPES minus upstream use of natural gas (e.g. GTL)" )#
L122.out_EJ_R_gasproc_gas_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "TPES" & fuel == "gas" )#
L122.out_EJ_R_gasproc_gas_Yh$sector <- "gas processing"
dim(L122.out_EJ_R_gasproc_gas_Yh)
L122.out_EJ_R_gasproc_gas_Yh
subset(L122.out_EJ_R_gasproc_gas_Yh, GCAM_region_ID==24)
dim(L101.IEA_en_bal_ctry_hist_clean)
subset(L101.IEA_en_bal_ctry_hist_clean, COUNTRY == "South Africa" & fuel %in% c( "coal", "gas"))[c(1:3,20:25)]
subset(L101.IEA_en_bal_ctry_hist_clean, iso == "zaf" & fuel %in% c( "coal", "gas"))[c(1:3,20:25)]
2738/497
subset(L101.IEA_en_bal_ctry_hist_clean, FLOW == "TGASWKS" & X1990 !=0 & GCAM_region_ID %in% c(1,11:14))
subset(L101.IEA_en_bal_ctry_hist_clean, FLOW == "TGASWKS" & X1990 !=0 & GCAM_region_ID %in% c(1,11:14))[c(1:3,20:25)]
subset(L101.IEA_en_bal_ctry_hist_clean, FLOW == "TGASWKS" & X1990 !=0 & GCAM_region_ID %in% c(1,13,24))[c(1:3,20:25)]
subset(L101.IEA_en_bal_ctry_hist_clean, iso == "zaf" & fuel %in% c( "gas"))[c(1:3,20:25)]
dim(L101.IEA_en_bal_ctry_hist_clean)
subset(L101.IEA_en_bal_ctry_hist_clean, iso == "zaf" & fuel %in% c( "gas"))[c(1:3,20:25,44:47)]
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L1011.en_bal_adj.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Adjustments to IEA energy balances" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID")#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
EIA_RFO_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_RFO_intlship_kbbld" )#
EIA_TOT_intlship_kbbld <- readdata( "ENERGY_LEVEL0_DATA", "EIA_TOT_intlship_kbbld" )#
EIA_ctry <- readdata( "ENERGY_MAPPINGS", "EIA_ctry" )#
A22.globaltech_coef <- readdata( "ENERGY_ASSUMPTIONS", "A22.globaltech_coef" )#
L101.en_bal_EJ_R_Si_Fi_Yh_full <- readdata( "ENERGY_LEVEL1_DATA", "L101.en_bal_EJ_R_Si_Fi_Yh_full" )#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# subset only the relevant years and combine OECD with non-OECD#
###MODIFICATIONS TO IEA ENERGY BALANCES#
printlog( "Replacing IEA estimates of international shipping fuel consumption with EIA estimates")#
#First, convert available data to EJ per year of total refined liquid products#
EIA_yearcols <- names( EIA_RFO_intlship_kbbld )[ names( EIA_RFO_intlship_kbbld ) %in% X_historical_years ]#
L1011.in_EJ_ctry_intlship_RFO_Yh <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_RFO_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_RFO * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
EIA_distillate_intlship_kbbld <- data.frame(#
      EIA_RFO_intlship_kbbld[ "Country" ],#
      EIA_TOT_intlship_kbbld[ EIA_yearcols ] - EIA_RFO_intlship_kbbld[ EIA_yearcols ] )#
L1011.in_EJ_ctry_intlship_distillate_Yh <- data.frame(#
      EIA_distillate_intlship_kbbld[ "Country" ],#
      EIA_distillate_intlship_kbbld[ EIA_yearcols ] *#
         conv_kbbl_bbl * conv_bbl_tonne_distillate * conv_tonne_GJ_RFO * conv_GJ_EJ / conv_days_year )#
L1011.in_EJ_ctry_intlship_TOT_Yh <- data.frame(#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ "Country" ],#
      L1011.in_EJ_ctry_intlship_distillate_Yh[ EIA_yearcols ] + L1011.in_EJ_ctry_intlship_RFO_Yh[ EIA_yearcols ] )#
#
#Several countries blink in and out of the time series. Only changing Russia because it's the only one that is a really large amount of fuel#
L1011.in_EJ_ctry_intlship_TOT_Yh[ is.na( L1011.in_EJ_ctry_intlship_TOT_Yh ) ] <- 0#
L1011.in_EJ_ctry_intlship_TOT_Yh[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia", paste( "X", 2006:2010, sep = "" ) ] <-#
      L1011.in_EJ_ctry_intlship_TOT_Yh$X2005[ L1011.in_EJ_ctry_intlship_TOT_Yh$Country=="Russia" ]#
#
#Match in the countries and aggregate by region#
L1011.in_EJ_ctry_intlship_TOT_Yh$iso <- EIA_ctry$iso[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$Country, EIA_ctry$EIA_ctry ) ]#
L1011.in_EJ_ctry_intlship_TOT_Yh$GCAM_region_ID <- iso_GCAM_regID$GCAM_region_ID[ match( L1011.in_EJ_ctry_intlship_TOT_Yh$iso, iso_GCAM_regID$iso)]#
L1011.in_EJ_R_intlship_Yh <- aggregate( L1011.in_EJ_ctry_intlship_TOT_Yh[ EIA_yearcols ],#
      by=as.list( L1011.in_EJ_ctry_intlship_TOT_Yh[ "GCAM_region_ID" ] ), sum )#
#
#Replace the data in the IEA energy balances table#
L1011.en_bal_EJ_R_Si_Fi_Yh <- L101.en_bal_EJ_R_Si_Fi_Yh_full#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "in_trn_international ship" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "refined liquids", EIA_yearcols ] <-#
      L1011.in_EJ_R_intlship_Yh[ EIA_yearcols ]#
#
#Re-calculate TPES after all adjustments are made#
L1011.in_EJ_R_Si_Fi_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, grepl( "in_", substr( sector, 1, 3 ) ) | grepl( "net_", substr( sector, 1, 4 ) ) )#
L1011.in_EJ_R_Si_Fi_Yh$sector <- "TPES"#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES", ] <- aggregate( L1011.in_EJ_R_Si_Fi_Yh[ X_historical_years ],#
      by=as.list( L1011.in_EJ_R_Si_Fi_Yh[ R_S_F ] ), sum )#
#
printlog( "NOTE: TPES of natural gas includes gasified coal. This is subtracted here" )#
#This is complicated. Because the output of "gas works gas" that is produced from coal is not distinguished from that produced by other fuels,#
# the process is modeled based on the fuel inputs, and the output fuel is assigned the same name as natural gas. As a result the estimates of#
# TPES at this point for natural gas include both natural gas and gasified coal. This subtraction generally follows the method used in code file L122.#
L1011.gasproc_coef <- gcam_interp( subset( A22.globaltech_coef, supplysector == "gas processing" ), historical_years )#
L1011.gasproc_coef[ S_F ] <- calibrated_techs[ match( vecpaste( L1011.gasproc_coef[ s_s_t ] ), vecpaste( calibrated_techs[ s_s_t ] ) ), S_F ]#
L1011.in_EJ_R_gasproc_coal_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_gas processing" & fuel == "coal" )#
L1011.out_EJ_R_gasproc_coal_Yh <- L1011.in_EJ_R_gasproc_coal_Yh#
L1011.out_EJ_R_gasproc_coal_Yh$sector <- sub( "in_", "", L1011.out_EJ_R_gasproc_coal_Yh$sector )#
L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] <- L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ] / L1011.gasproc_coef[#
      match( vecpaste( L1011.out_EJ_R_gasproc_coal_Yh[ S_F ] ), vecpaste( L1011.gasproc_coef[ S_F ] ) ),#
      X_historical_years ]#
#
#Subtract#
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] <-#
      L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] -#
      L1011.out_EJ_R_gasproc_coal_Yh[ X_historical_years ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
any( L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ][#
            L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ] )
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0 ]
L1011.en_bal_EJ_R_Si_Fi_Yh[ L1011.en_bal_EJ_R_Si_Fi_Yh$sector == "TPES" & L1011.en_bal_EJ_R_Si_Fi_Yh$fuel == "gas", X_historical_years ] < 0
TGASWKSsubset(L101.IEA_en_bal_ctry_hist_clean, iso == "zaf" & FLOW =="TGASWKS")
subset(L101.IEA_en_bal_ctry_hist_clean, iso == "zaf" & FLOW =="TGASWKS")
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Hard coal (if no detail)",  X_historical_years ]
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Hard coal (if no detail)",  X_historical_years ] <-#
      L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Other bituminous coal",  X_historical_years] *#
      coal_to_gas_coef * -1     #Need to multiply by -1 because inputs and outputs have a different sign#
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Hard coal (if no detail)",  X_historical_years ] <-#
      L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Gas works gas",  X_historical_years] *#
      coal_to_gas_coef * -1     #Need to multiply by -1 because inputs and outputs have a different sign
coal_to_gas_coef <- 1.5#
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Hard coal (if no detail)",  X_historical_years ] <-#
      L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Other bituminous coal",  X_historical_years] *#
      coal_to_gas_coef * -1     #Need to multiply by -1 because inputs and outputs have a different sign#
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Hard coal (if no detail)",  X_historical_years ] <-#
      L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS" & L100.IEAfull$PRODUCT == "Gas works gas",  X_historical_years] *#
      coal_to_gas_coef * -1     #Need to multiply by -1 because inputs and outputs have a different sign
L100.IEAfull[ L100.IEAfull$COUNTRY == "South Africa" & L100.IEAfull$FLOW == "TGASWKS",]
logstop()
logstop()
source("../energy-processing-code/level1/L100.IEA_downscale_ctry.R")
logstop()
L100.IEAfull <- rbind( en_OECD[ c( IEA_IDcodes, X_historical_years ) ], en_nonOECD[ c( IEA_IDcodes, X_historical_years ) ] )
q()
