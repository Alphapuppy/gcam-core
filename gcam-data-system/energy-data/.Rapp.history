ENERGYPROC_DIR <- "../energy-processing-code/"
if( !exists( "ENERGYPROC_DIR" ) ){#
    if( Sys.getenv( "ENERGYPROC" ) != "" ){#
        ENERGYPROC_DIR <- Sys.getenv( "ENERGYPROC" )#
    } else {#
        stop("Could not determine location of energy data system. Please set the R var ENERGYPROC_DIR to the appropriate location")#
    }#
}#
#
# Universal header file - provides logging, file support, etc.#
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L123.electricity.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Historical inputs, outputs, and IO coefficients of electricity (incl. CHP)" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
enduse_fuel_aggregation <- readdata( "ENERGY_MAPPINGS", "enduse_fuel_aggregation" )#
A23.chp_elecratio <- readdata( "ENERGY_ASSUMPTIONS", "A23.chp_elecratio" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Perform computations#
# 2a. CENTRAL ELECTRICITY#
printlog( "Electricity output (central only): aggregating intermediate fuels as specified in ", file_fqn( "ENERGY_MAPPINGS", "enduse_fuel_aggregation" ) )#
L123.out_EJ_R_elec_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "out_electricity generation" )#
L123.out_EJ_R_elec_F_Yh$sector <- sub( "out_", "", L123.out_EJ_R_elec_F_Yh$sector )#
L123.out_EJ_R_elec_F_Yh$fuel <- enduse_fuel_aggregation$electricity[ match( L123.out_EJ_R_elec_F_Yh$fuel, enduse_fuel_aggregation$fuel ) ]#
L123.out_EJ_R_elec_F_Yh <- aggregate( L123.out_EJ_R_elec_F_Yh[ X_historical_years ], by=as.list( L123.out_EJ_R_elec_F_Yh[ R_S_F ] ), sum )#
#
printlog( "Fuel inputs to electricity: aggregating intermediate fuels" )#
L123.in_EJ_R_elec_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "in_electricity generation" & fuel %in% electricity_input_fuels )#
L123.in_EJ_R_elec_F_Yh$sector <- sub( "in_", "", L123.in_EJ_R_elec_F_Yh$sector )#
L123.in_EJ_R_elec_F_Yh$fuel <- enduse_fuel_aggregation$electricity[ match( L123.in_EJ_R_elec_F_Yh$fuel, enduse_fuel_aggregation$fuel ) ]#
L123.in_EJ_R_elec_F_Yh <- aggregate( L123.in_EJ_R_elec_F_Yh[ X_historical_years ], by=as.list( L123.in_EJ_R_elec_F_Yh[ R_S_F ] ), sum )#
#
printlog( "Calculating efficiencies whose inputs are considered")#
L123.eff_R_elec_F_Yh <- L123.in_EJ_R_elec_F_Yh#
L123.eff_R_elec_F_Yh[ X_historical_years ] <- L123.out_EJ_R_elec_F_Yh[#
      match( vecpaste( L123.eff_R_elec_F_Yh[ R_F ] ), vecpaste( L123.out_EJ_R_elec_F_Yh[ R_F ] ) ), X_historical_years ] /#
      L123.in_EJ_R_elec_F_Yh[ X_historical_years ]#
#
#Re-set NaN (no input or output), 0 (input but no output), and "Inf" (output but no input) to default electric efficiency#
##Only the change to the 0 efficiencies will have any impacts#
L123.eff_R_elec_F_Yh[ is.na( L123.eff_R_elec_F_Yh ) ] <- default_electric_efficiency#
L123.eff_R_elec_F_Yh[ L123.eff_R_elec_F_Yh == 0 ] <- default_electric_efficiency#
L123.eff_R_elec_F_Yh[ L123.eff_R_elec_F_Yh == Inf ] <- default_electric_efficiency#
#
#Re-calculate the output to take into account these changes in selected efficiencies#
L123.out_EJ_R_elec_F_Yh[ vecpaste( L123.out_EJ_R_elec_F_Yh[ R_F ] ) %in% vecpaste( L123.eff_R_elec_F_Yh[ R_F ] ), X_historical_years ] <- #
      L123.eff_R_elec_F_Yh[ X_historical_years ] * L123.in_EJ_R_elec_F_Yh[ X_historical_years ]#
#
# 2b. CHP#
printlog( "Electricity output (CHP only): aggregating intermediate fuels as specified in ", file_fqn( "ENERGY_MAPPINGS", "enduse_fuel_aggregation" ) )#
L123.out_EJ_R_indchp_F_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, sector == "out_chp_elec" )#
L123.out_EJ_R_indchp_F_Yh$sector <- sub( "out_", "", L123.out_EJ_R_indchp_F_Yh$sector )#
L123.out_EJ_R_indchp_F_Yh$fuel <- enduse_fuel_aggregation$industry[ match( L123.out_EJ_R_indchp_F_Yh$fuel, enduse_fuel_aggregation$fuel ) ]#
L123.out_EJ_R_indchp_F_Yh$fuel[ L123.out_EJ_R_indchp_F_Yh$fuel %!in% enduse_fuel_aggregation$electricity ] <- NA#
L123.out_EJ_R_indchp_F_Yh <- aggregate( L123.out_EJ_R_indchp_F_Yh[ X_historical_years ], by=as.list( L123.out_EJ_R_indchp_F_Yh[ R_S_F ] ), sum )#
#
printlog( "Fuel inputs to CHP systems: calculated from electricity output using exogenous elec/fuel ratios" )#
L123.in_EJ_R_indchp_F_Yh <- L123.out_EJ_R_indchp_F_Yh#
L123.in_EJ_R_indchp_F_Yh[ X_historical_years ] <- L123.out_EJ_R_indchp_F_Yh[ X_historical_years ] / A23.chp_elecratio$elec_ratio[#
      match( L123.in_EJ_R_indchp_F_Yh$fuel, A23.chp_elecratio$fuel ) ]
subset(L123.in_EJ_R_indchp_F_Yh, GCAM_region_ID==1)
logstop()
AGLUPROC_DIR <- "../aglu-processing-code/"
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
GCAMLandLeaf_CdensityLT <- readdata( "AGLU_MAPPINGS", "GCAMLandLeaf_CdensityLT" )#
A_LandNode_logit <- readdata( "AGLU_ASSUMPTIONS", "A_LandNode_logit" )#
A_LandNode2 <- readdata( "AGLU_ASSUMPTIONS", "A_LandNode2" )#
A_LandLeaf_Unmgd2 <- readdata( "AGLU_ASSUMPTIONS", "A_LandLeaf_Unmgd2" )#
A_LandLeaf2 <- readdata( "AGLU_ASSUMPTIONS", "A_LandLeaf2" )#
L121.VegC_kgm2_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.VegC_kgm2_R_LT_AEZ" )#
L121.SoilC_kgm2_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.SoilC_kgm2_R_LT_AEZ" )#
L121.MatureAge_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.MatureAge_R_LT_AEZ" )#
L125.R_AEZ_nonexist <- readdata( "AGLU_LEVEL1_DATA", "L125.R_AEZ_nonexist" )#
L125.LC_bm2_R_LT_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L125.LC_bm2_R_LT_Yh_AEZ" )#
# -----------------------------------------------------------------------------#
# 2. Build tables#
printlog( "L212.LN2_Logit: Logit exponent of the third nest" )#
L212.LN2_Logit <- data.frame(#
      region = rep( GCAM_region_names$region, times = nrow( A_LandNode2 ) ),#
      LandAllocatorRoot = "root",#
      LandNode2 = sort( rep( A_LandNode2$LandNode2, times = length( GCAM_region_names$region ) ) ) )#
L212.LN2_Logit$LandNode1 <- A_LandNode2$LandNode1[ match( L212.LN2_Logit$LandNode2, A_LandNode2$LandNode2 ) ]#
L212.LN2_Logit <- repeat_and_add_vector( L212.LN2_Logit, AEZ, AEZs )
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L212.land_input_2.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Land cover and characteristics, node level 2" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
GCAMLandLeaf_CdensityLT <- readdata( "AGLU_MAPPINGS", "GCAMLandLeaf_CdensityLT" )#
A_LandNode_logit <- readdata( "AGLU_ASSUMPTIONS", "A_LandNode_logit" )#
A_LandNode2 <- readdata( "AGLU_ASSUMPTIONS", "A_LandNode2" )#
A_LandLeaf_Unmgd2 <- readdata( "AGLU_ASSUMPTIONS", "A_LandLeaf_Unmgd2" )#
A_LandLeaf2 <- readdata( "AGLU_ASSUMPTIONS", "A_LandLeaf2" )#
L121.VegC_kgm2_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.VegC_kgm2_R_LT_AEZ" )#
L121.SoilC_kgm2_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.SoilC_kgm2_R_LT_AEZ" )#
L121.MatureAge_R_LT_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L121.MatureAge_R_LT_AEZ" )#
L125.R_AEZ_nonexist <- readdata( "AGLU_LEVEL1_DATA", "L125.R_AEZ_nonexist" )#
L125.LC_bm2_R_LT_Yh_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L125.LC_bm2_R_LT_Yh_AEZ" )
L212.LN2_Logit <- data.frame(#
      region = rep( GCAM_region_names$region, times = nrow( A_LandNode2 ) ),#
      LandAllocatorRoot = "root",#
      LandNode2 = sort( rep( A_LandNode2$LandNode2, times = length( GCAM_region_names$region ) ) ) )#
L212.LN2_Logit$LandNode1 <- A_LandNode2$LandNode1[ match( L212.LN2_Logit$LandNode2, A_LandNode2$LandNode2 ) ]#
L212.LN2_Logit <- repeat_and_add_vector( L212.LN2_Logit, AEZ, AEZs )
head(L212.LN2_Logit)
L212.LN2_Logit$logit.exponent <- A_LandNode_logit$logit.exponent[ match( L212.LN2_Logit$LandNode2, A_LandNode_logit$LandNode ) ]#
L212.LN2_Logit$logit.exponent[ L212.LN2_Logit$AEZ %in% AEZs_most_arid ] <- A_LandNode_logit$logit.exponent.arid[#
      match( L212.LN2_Logit$LandNode2[ L212.LN2_Logit$AEZ %in% AEZs_most_arid ], A_LandNode_logit$LandNode ) ]#
#Append AEZ names and keep only relevant columns#
L212.LN2_Logit <- append_AEZ( L212.LN2_Logit )#
L212.LN2_Logit <- L212.LN2_Logit[ names_LN2_Logit ]
head(L212.LN2_Logit)
append_AEZ
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L202.Ccoef.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Carbon contents of fuels in the energy system" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
sourcedata( "EMISSIONS_ASSUMPTIONS", "A_emissions_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
A_PrimaryFuelCCoef <- readdata( "EMISSIONS_ASSUMPTIONS", "A_PrimaryFuelCCoef")#
fuel_to_Ccoef <- readdata( "EMISSIONS_MAPPINGS", "fuel_to_Ccoef")#
L102.Ccoef_kgCGJ_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L102.Ccoef_kgCGJ_F_Yh" )#
L102.Ccoef_kgCGJ_R_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L102.Ccoef_kgCGJ_R_F_Yh" )#
#
# -----------------------------------------------------------------------------#
# 2. Build tables for CSVs#
#Carbon contents#
printlog( "L202.C_Coefs: Carbon contents of fuels in all regions" )#
L202.CarbonCoef <- write_to_all_regions( A_PrimaryFuelCCoef )#
if( use_GCAM3_Ccoefs == 1 ) {#
	printlog( "Using exogenous C coefs from GCAM 3.0")#
	L202.CarbonCoef <- L202.CarbonCoef[ c( "region", "PrimaryFuelCO2Coef.name", "PrimaryFuelCO2Coef")]#
}#
if( use_GCAM3_Ccoefs == 0 ) {#
	L202.CarbonCoef$fuel <- fuel_to_Ccoef$fuel[ match( L202.CarbonCoef$PrimaryFuelCO2Coef.name, fuel_to_Ccoef$PrimaryFuelCO2Coef.name ) ]#
	if( use_global_Ccoefs == 1 ){#
		printlog( "Using global average emissions coefficients based on CDIAC inventory and IEA energy balances")#
		L202.Ccoef_kgCGJ_F_Yh.melt <- interpolate_and_melt( L102.Ccoef_kgCGJ_F_Yh, CO2_historical_years )  #
		L202.Ccoef_kgCGJ_F_fby.melt <- subset( L202.Ccoef_kgCGJ_F_Yh.melt, year == inventory_match_year )#
		L202.CarbonCoef$PrimaryFuelCO2Coef[ !is.na( L202.CarbonCoef$fuel ) ] <- round(#
		   L202.Ccoef_kgCGJ_F_fby.melt$value[#
		      match( L202.CarbonCoef$fuel[ !is.na( L202.CarbonCoef$fuel ) ], L202.Ccoef_kgCGJ_F_fby.melt$fuel ) ],	#
		digits_CO2coef)#
		L202.CarbonCoef <- L202.CarbonCoef[ c( "region", "PrimaryFuelCO2Coef.name", "PrimaryFuelCO2Coef")]#
	}#
	if( use_global_Ccoefs == 0 ){#
		printlog( "Using region-specific average emissions coefficients based on CDIAC inventory and IEA energy balances")#
		L202.Ccoef_kgCGJ_R_F_Yh.melt <- interpolate_and_melt( L102.Ccoef_kgCGJ_R_F_Yh, CO2_historical_years )  #
		L202.Ccoef_kgCGJ_R_F_fby.melt <- subset( L202.Ccoef_kgCGJ_R_F_Yh.melt, year == inventory_match_year )#
		L202.CarbonCoef <- add_region_name( L202.CarbonCoef )#
		L202.CarbonCoef$PrimaryFuelCO2Coef[ !is.na( L202.CarbonCoef$fuel ) ] <- round(#
		   L202.Ccoef_kgCGJ_R_F_fby.melt$value[#
		      match( paste( L202.CarbonCoef$GCAM_region_ID[ !is.na( L202.CarbonCoef$fuel ) ], L202.CarbonCoef$fuel[ !is.na( L202.CarbonCoef$fuel ) ] ),#
		             paste( L202.Ccoef_kgCGJ_R_F_fby.melt$GCAM_region_ID, L202.Ccoef_kgCGJ_R_F_fby.melt$fuel ) ) ],#
		digits_CO2coef)#
		L202.CarbonCoef <- L202.CarbonCoef[ c( "region", "PrimaryFuelCO2Coef.name", "PrimaryFuelCO2Coef")]#
	}#
}
dim(L202.CarbonCoef)
names(L202.CarbonCoef)
subset( L202.CarbonCoef, PrimaryFuelCO2Coef.name == "traded unconventional oil")
A_PrimaryFuelCCoef
fuel_to_Ccoef
head(L102.Ccoef_kgCGJ_F_Yh)
head(L102.Ccoef_kgCGJ_R_F_Yh)
set_traded_names
L202.CarbonCoef <- write_to_all_regions( A_PrimaryFuelCCoef )
head(L202.CarbonCoef)
write_to_all_regions
A_PrimaryFuelCCoef <- readdata( "EMISSIONS_ASSUMPTIONS", "A_PrimaryFuelCCoef")
A_PrimaryFuelCCoef
L202.CarbonCoef <- write_to_all_regions( A_PrimaryFuelCCoef, has.traded = T )
dim(L202.CarbonCoef)
L202.CarbonCoef[L202.CarbonCoef$PrimaryFuelCO2Coef.name == "traded unconventional oil",]
printlog( "L202.C_Coefs: Carbon contents of fuels in all regions" )#
L202.CarbonCoef <- write_to_all_regions( A_PrimaryFuelCCoef, has.traded = T )#
if( use_GCAM3_Ccoefs == 1 ) {#
	printlog( "Using exogenous C coefs from GCAM 3.0")#
	L202.CarbonCoef <- L202.CarbonCoef[ c( "region", "PrimaryFuelCO2Coef.name", "PrimaryFuelCO2Coef")]#
}#
if( use_GCAM3_Ccoefs == 0 ) {#
	L202.CarbonCoef$fuel <- fuel_to_Ccoef$fuel[ match( L202.CarbonCoef$PrimaryFuelCO2Coef.name, fuel_to_Ccoef$PrimaryFuelCO2Coef.name ) ]#
	if( use_global_Ccoefs == 1 ){#
		printlog( "Using global average emissions coefficients based on CDIAC inventory and IEA energy balances")#
		L202.Ccoef_kgCGJ_F_Yh.melt <- interpolate_and_melt( L102.Ccoef_kgCGJ_F_Yh, CO2_historical_years )  #
		L202.Ccoef_kgCGJ_F_fby.melt <- subset( L202.Ccoef_kgCGJ_F_Yh.melt, year == inventory_match_year )#
		L202.CarbonCoef$PrimaryFuelCO2Coef[ !is.na( L202.CarbonCoef$fuel ) ] <- round(#
		   L202.Ccoef_kgCGJ_F_fby.melt$value[#
		      match( L202.CarbonCoef$fuel[ !is.na( L202.CarbonCoef$fuel ) ], L202.Ccoef_kgCGJ_F_fby.melt$fuel ) ],	#
		digits_CO2coef)#
		L202.CarbonCoef <- L202.CarbonCoef[ c( "region", "PrimaryFuelCO2Coef.name", "PrimaryFuelCO2Coef")]#
	}#
	if( use_global_Ccoefs == 0 ){#
		printlog( "Using region-specific average emissions coefficients based on CDIAC inventory and IEA energy balances")#
		L202.Ccoef_kgCGJ_R_F_Yh.melt <- interpolate_and_melt( L102.Ccoef_kgCGJ_R_F_Yh, CO2_historical_years )  #
		L202.Ccoef_kgCGJ_R_F_fby.melt <- subset( L202.Ccoef_kgCGJ_R_F_Yh.melt, year == inventory_match_year )#
		L202.CarbonCoef <- add_region_name( L202.CarbonCoef )#
		L202.CarbonCoef$PrimaryFuelCO2Coef[ !is.na( L202.CarbonCoef$fuel ) ] <- round(#
		   L202.Ccoef_kgCGJ_R_F_fby.melt$value[#
		      match( paste( L202.CarbonCoef$GCAM_region_ID[ !is.na( L202.CarbonCoef$fuel ) ], L202.CarbonCoef$fuel[ !is.na( L202.CarbonCoef$fuel ) ] ),#
		             paste( L202.Ccoef_kgCGJ_R_F_fby.melt$GCAM_region_ID, L202.Ccoef_kgCGJ_R_F_fby.melt$fuel ) ) ],#
		digits_CO2coef)#
		L202.CarbonCoef <- L202.CarbonCoef[ c( "region", "PrimaryFuelCO2Coef.name", "PrimaryFuelCO2Coef")]#
	}#
}#
#
# -----------------------------------------------------------------------------#
# 3. Write all csvs as tables, and paste csv filenames into a single batch XML file#
write_mi_data( L202.CarbonCoef, "CarbonCoef", "ENERGY_LEVEL2_DATA", "L202.CarbonCoef", "ENERGY_XML_BATCH", "batch_Ccoef.xml" )
subset(L202.CarbonCoef, region%in% c( "USA", "Canada"))
logstop()
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L202.an_input.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Model input for animal production (including inputs to animal produciton)" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
A_agRsrc <- readdata( "AGLU_ASSUMPTIONS", "A_agRsrc" )#
A_agSubRsrc <- readdata( "AGLU_ASSUMPTIONS", "A_agSubRsrc" )#
A_agRsrcCurves <- readdata( "AGLU_ASSUMPTIONS", "A_agRsrcCurves" )#
A_an_input_supplysector <- readdata( "AGLU_ASSUMPTIONS", "A_an_input_supplysector" )#
A_an_input_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_an_input_subsector" )#
A_an_input_technology <- readdata( "AGLU_ASSUMPTIONS", "A_an_input_technology" )#
A_an_supplysector <- readdata( "AGLU_ASSUMPTIONS", "A_an_supplysector" )#
A_an_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_an_subsector" )#
A_an_technology <- readdata( "AGLU_ASSUMPTIONS", "A_an_technology" )#
L107.an_Prod_Mt_R_C_Sys_Fd_Y <- readdata( "AGLU_LEVEL1_DATA", "L107.an_Prod_Mt_R_C_Sys_Fd_Y" )#
L107.an_FeedIO_R_C_Sys_Fd_Y <- readdata( "AGLU_LEVEL1_DATA", "L107.an_FeedIO_R_C_Sys_Fd_Y" )#
L107.an_Feed_Mt_R_C_Sys_Fd_Y <- readdata( "AGLU_LEVEL1_DATA", "L107.an_Feed_Mt_R_C_Sys_Fd_Y" )#
L108.ag_Feed_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L108.ag_Feed_Mt_R_C_Y" )#
L109.an_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.an_ALL_Mt_R_C_Y" )#
L132.ag_an_For_Prices <- readdata( "AGLU_LEVEL1_DATA", "L132.ag_an_For_Prices" )#
# -----------------------------------------------------------------------------#
# 2. Build tables#
#Base table for resources#
printlog( "Melting and adding region names to Level1 data tables" )#
L202.an_Prod_Mt_R_C_Sys_Fd_Y.melt <- interpolate_and_melt( L107.an_Prod_Mt_R_C_Sys_Fd_Y, model_base_years )#
L202.an_FeedIO_R_C_Sys_Fd_Y.melt <- interpolate_and_melt( L107.an_FeedIO_R_C_Sys_Fd_Y, model_base_years )#
L202.an_Feed_Mt_R_C_Sys_Fd_Y.melt <- interpolate_and_melt( L107.an_Feed_Mt_R_C_Sys_Fd_Y, model_base_years )#
L202.ag_Feed_Mt_R_C_Y.melt <- interpolate_and_melt( L108.ag_Feed_Mt_R_C_Y, model_base_years )#
L202.an_Prod_Mt_R_C_Sys_Fd_Y.melt <- add_region_name( L202.an_Prod_Mt_R_C_Sys_Fd_Y.melt )#
L202.an_FeedIO_R_C_Sys_Fd_Y.melt <- add_region_name( L202.an_FeedIO_R_C_Sys_Fd_Y.melt )#
L202.an_Feed_Mt_R_C_Sys_Fd_Y.melt <- add_region_name( L202.an_Feed_Mt_R_C_Sys_Fd_Y.melt )#
L202.ag_Feed_Mt_R_C_Y.melt <- add_region_name( L202.ag_Feed_Mt_R_C_Y.melt )#
L202.an_ALL_Mt_R_C_Y <- add_region_name( L109.an_ALL_Mt_R_C_Y )#
#
printlog( "L202.RenewRsrc: generic resource attributes" )#
L202.RenewRsrc <- write_to_all_regions_ag( A_agRsrc, names_RenewRsrc )#
L202.RenewRsrc$market[ L202.RenewRsrc$market == "regional" ] <- L202.RenewRsrc$region[ L202.RenewRsrc$market == "regional" ]#
#
printlog( "L202.RenewRsrcPrice: resource prices" )#
L202.RenewRsrcPrice <- L202.RenewRsrc[ c( "region", "renewresource" ) ]#
L202.RenewRsrcPrice$year <- min( model_base_years )#
L202.RenewRsrcPrice$price <- 1#
printlog( "L202.RenewRsrcCalProd: Calibrated production of resources" )#
L202.RenewRsrcCalProd <- write_to_all_regions_ag( A_agSubRsrc, names = names_SubRenewRsrc )#
L202.RenewRsrcCalProd <- repeat_and_add_vector( L202.RenewRsrcCalProd, Y, model_base_years )#
#
#Paste in cal-production from Animal products table, where appropriate.#
L202.RenewRsrcCalProd_an <- L202.RenewRsrcCalProd[ L202.RenewRsrcCalProd$sub.renewable.resource %in% L202.an_ALL_Mt_R_C_Y[[C]], ]#
L202.RenewRsrcCalProd_an$cal.production <- round( L202.an_ALL_Mt_R_C_Y$Prod_Mt[#
      match( vecpaste( L202.RenewRsrcCalProd_an[ c( reg, SubRenewRsrc, Y ) ] ),#
             vecpaste( L202.an_ALL_Mt_R_C_Y[ c( reg, C, Y ) ] ) ) ],#
      digits_calOutput )#
#Paste in cal-production from Feed table, where appropriate.#
L202.RenewRsrcCalProd_feed <- L202.RenewRsrcCalProd[ L202.RenewRsrcCalProd$sub.renewable.resource %in% L202.ag_Feed_Mt_R_C_Y.melt[[C]], ]#
L202.RenewRsrcCalProd_feed$cal.production <- round( L202.ag_Feed_Mt_R_C_Y.melt$value[#
      match( vecpaste( L202.RenewRsrcCalProd_feed[ c( reg, SubRenewRsrc, Y ) ] ),#
             vecpaste( L202.ag_Feed_Mt_R_C_Y.melt[ c( reg, C, Y ) ] ) ) ],#
      digits_calOutput )#
#Rbind the two tables#
L202.RenewRsrcCalProd <- rbind( L202.RenewRsrcCalProd_an, L202.RenewRsrcCalProd_feed )[ names_RenewRsrcCalProd ]#
printlog( "L202.maxSubResource: maximum amount of resource production allowed in any period" )#
#Compute the maxsubresource as the maximum of all base periods, for each region and resource#
L202.maxSubResource <- aggregate( L202.RenewRsrcCalProd$cal.production, by=as.list( L202.RenewRsrcCalProd[ names_SubRenewRsrc ] ), max )#
names( L202.maxSubResource )[ names( L202.maxSubResource ) == "x" ] <- "maxSubResource"#
L202.maxSubResource <- L202.maxSubResource[ names_maxSubResource ]#
#
printlog( "L202.RenewRsrcCurves" )#
L202.RenewRsrcCurves <- write_to_all_regions_ag( A_agRsrcCurves, names_RenewRsrcCurves )#
printlog( "L202.Supplysector_in: generic supplysector info for inputs to animal production" )#
L202.Supplysector_in <- write_to_all_regions_ag( A_an_input_supplysector, names_Supplysector )#
printlog( "L202.SubsectorAll_in: generic subsector info for inputs to animal production technologies" )#
L202.SubsectorAll_in <- write_to_all_regions_ag( A_an_input_subsector, names_SubsectorAll )#
printlog( "L202.StubTech_in: identification of stub technologies for inputs to animal production" )#
L202.StubTech_in <- write_to_all_regions_ag( A_an_input_technology, names_Tech )#
names( L202.StubTech_in ) <- gsub( "technology", "stub.technology", names( L202.StubTech_in ) )#
#
printlog( "L202.StubTechInterp_in: generic technology info for inputs to animal production" )#
L202.StubTechInterp_in <- write_to_all_regions_ag( A_an_input_technology, names_TechInterp )#
names( L202.StubTechInterp_in ) <- gsub( "technology", "stub.technology", names( L202.StubTechInterp_in ) )#
#
printlog( "L202.GlobalTechCoef_in: coefficients for inputs to animal production" )#
L202.GlobalTechCoef_in <- repeat_and_add_vector( A_an_input_technology, Y, c( model_base_years, model_future_years ) )#
L202.GlobalTechCoef_in[ c( "sector.name", "subsector.name" ) ] <- L202.GlobalTechCoef_in[ c( supp, subs ) ]#
L202.GlobalTechCoef_in <- L202.GlobalTechCoef_in[ names_GlobalTechCoef ]
dim(L202.GlobalTechCoef_in)
subset(L202.GlobalTechCoef_in, supplysector == "FodderHerb_Residue")
subset(L202.GlobalTechCoef_in, sector.name == "FodderHerb_Residue")
A_an_input_technology
logstop()
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L203.demand_input.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Model input for demands of all aglu commodities (crop, animal, forest)" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
A_demand_supplysector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_supplysector" )#
A_demand_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_subsector" )#
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )#
L101.ag_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_Food_Pcal_R_C_Y" )#
L101.ag_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_kcalg_R_C_Y" )#
L105.an_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_Food_Pcal_R_C_Y" )#
L105.an_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_kcalg_R_C_Y" )#
L109.ag_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.ag_ALL_Mt_R_C_Y" )#
L109.an_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.an_ALL_Mt_R_C_Y" )#
L110.For_ALL_bm3_R_Y <- readdata( "AGLU_LEVEL1_DATA", "L110.For_ALL_bm3_R_Y" )#
L134.pcFood_kcald_R_Dmnd_Y <- readdata( "AGLU_LEVEL1_DATA", "L134.pcFood_kcald_R_Dmnd_Y" )#
L101.Pop_thous_R_Yh <- readdata( "SOCIO_LEVEL1_DATA", "L101.Pop_thous_R_Yh" )#
L102.pcgdp_thous90USD_SSP_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L102.pcgdp_thous90USD_SSP_R_Y" )
A_demand_technology
names_GlobalTechInput
names_GlobalTechCoef
head(L203.GlobalTechInput_demand)
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
A_demand_supplysector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_supplysector" )#
A_demand_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_subsector" )#
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )#
L101.ag_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_Food_Pcal_R_C_Y" )#
L101.ag_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_kcalg_R_C_Y" )#
L105.an_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_Food_Pcal_R_C_Y" )#
L105.an_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_kcalg_R_C_Y" )#
L109.ag_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.ag_ALL_Mt_R_C_Y" )#
L109.an_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.an_ALL_Mt_R_C_Y" )#
L110.For_ALL_bm3_R_Y <- readdata( "AGLU_LEVEL1_DATA", "L110.For_ALL_bm3_R_Y" )#
L134.pcFood_kcald_R_Dmnd_Y <- readdata( "AGLU_LEVEL1_DATA", "L134.pcFood_kcald_R_Dmnd_Y" )#
L101.Pop_thous_R_Yh <- readdata( "SOCIO_LEVEL1_DATA", "L101.Pop_thous_R_Yh" )#
L102.pcgdp_thous90USD_SSP_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L102.pcgdp_thous90USD_SSP_R_Y" )#
# -----------------------------------------------------------------------------#
# 2. Build tables#
L203.ag_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L101.ag_Food_Pcal_R_C_Y, model_base_years )#
L203.ag_kcalg_R_C_Y.melt <- interpolate_and_melt( L101.ag_kcalg_R_C_Y, model_base_years )#
L203.an_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L105.an_Food_Pcal_R_C_Y, model_base_years )#
L203.an_kcalg_R_C_Y.melt <- interpolate_and_melt( L105.an_kcalg_R_C_Y, model_base_years )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- interpolate_and_melt( L134.pcFood_kcald_R_Dmnd_Y, diet_years )#
L203.Pop_thous_R_Yh <- interpolate_and_melt( L101.Pop_thous_R_Yh, model_base_years )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- interpolate_and_melt( L102.pcgdp_thous90USD_SSP_R_Y, c( model_base_years, model_future_years ) )#
#
#Adding lookup vectors to level1 output tables#
printlog( "Adding region names to Level1 data tables" )#
L203.ag_Food_Pcal_R_C_Y.melt <- add_region_name( L203.ag_Food_Pcal_R_C_Y.melt )#
L203.ag_kcalg_R_C_Y.melt  <- add_region_name( L203.ag_kcalg_R_C_Y.melt )#
L203.an_Food_Pcal_R_C_Y.melt <- add_region_name( L203.an_Food_Pcal_R_C_Y.melt )#
L203.an_kcalg_R_C_Y.melt  <- add_region_name( L203.an_kcalg_R_C_Y.melt )#
L203.ag_ALL_Mt_R_C_Y <- add_region_name( L109.ag_ALL_Mt_R_C_Y )#
L203.an_ALL_Mt_R_C_Y <- add_region_name( L109.an_ALL_Mt_R_C_Y )#
L203.For_ALL_bm3_R_Y <- add_region_name( L110.For_ALL_bm3_R_Y )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- add_region_name( L203.pcFood_kcald_R_Dmnd_Y.melt )#
L203.Pop_thous_R_Yh <- add_region_name( L203.Pop_thous_R_Yh )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- add_region_name( L203.pcgdp_thous90USD_SSP_R_Y.melt )#
printlog( "L203.Supplysector_demand: generic info for demand sectors" )#
L203.Supplysector_demand <- write_to_all_regions_ag( A_demand_supplysector, names_Supplysector )#
#
printlog( "L203.SubsectorAll_demand: generic info for demand subsectors" )#
L203.SubsectorAll_demand <- write_to_all_regions_ag( A_demand_subsector, names_SubsectorAll )#
#
printlog( "L203.StubTech_demand: identification of stub technologies for demands" )#
L203.StubTech_demand <- write_to_all_regions_ag( A_demand_technology, names_Tech )#
names( L203.StubTech_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTech_demand ) )#
#
printlog( "L203.StubTechInterp_demand: shareweight interpolation for demands" )#
L203.StubTechInterp_demand <- write_to_all_regions_ag( A_demand_technology, names_TechInterp )#
names( L203.StubTechInterp_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTechInterp_demand ) )#
#
printlog( "L203.GlobalTechInput_demand: input names of demand technologies" )#
L203.GlobalTechInput_demand <- repeat_and_add_vector( A_demand_technology, Y, c( model_base_years, model_future_years ) )#
L203.GlobalTechInput_demand[ c( "sector.name", "subsector.name" ) ] <- L203.GlobalTechInput_demand[ c( "supplysector", "subsector" ) ]#
L203.GlobalTechInput_demand <- L203.GlobalTechInput_demand[ names_GlobalTechInput ]
head(L203.GlobalTechInput_demand)
subset(L203.GlobalTechInput_demand, sector.name=="NonFoodDemand_Forest")
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )
head(A_demand_technology)
L203.ag_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L101.ag_Food_Pcal_R_C_Y, model_base_years )#
L203.ag_kcalg_R_C_Y.melt <- interpolate_and_melt( L101.ag_kcalg_R_C_Y, model_base_years )#
L203.an_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L105.an_Food_Pcal_R_C_Y, model_base_years )#
L203.an_kcalg_R_C_Y.melt <- interpolate_and_melt( L105.an_kcalg_R_C_Y, model_base_years )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- interpolate_and_melt( L134.pcFood_kcald_R_Dmnd_Y, diet_years )#
L203.Pop_thous_R_Yh <- interpolate_and_melt( L101.Pop_thous_R_Yh, model_base_years )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- interpolate_and_melt( L102.pcgdp_thous90USD_SSP_R_Y, c( model_base_years, model_future_years ) )#
#
#Adding lookup vectors to level1 output tables#
printlog( "Adding region names to Level1 data tables" )#
L203.ag_Food_Pcal_R_C_Y.melt <- add_region_name( L203.ag_Food_Pcal_R_C_Y.melt )#
L203.ag_kcalg_R_C_Y.melt  <- add_region_name( L203.ag_kcalg_R_C_Y.melt )#
L203.an_Food_Pcal_R_C_Y.melt <- add_region_name( L203.an_Food_Pcal_R_C_Y.melt )#
L203.an_kcalg_R_C_Y.melt  <- add_region_name( L203.an_kcalg_R_C_Y.melt )#
L203.ag_ALL_Mt_R_C_Y <- add_region_name( L109.ag_ALL_Mt_R_C_Y )#
L203.an_ALL_Mt_R_C_Y <- add_region_name( L109.an_ALL_Mt_R_C_Y )#
L203.For_ALL_bm3_R_Y <- add_region_name( L110.For_ALL_bm3_R_Y )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- add_region_name( L203.pcFood_kcald_R_Dmnd_Y.melt )#
L203.Pop_thous_R_Yh <- add_region_name( L203.Pop_thous_R_Yh )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- add_region_name( L203.pcgdp_thous90USD_SSP_R_Y.melt )#
printlog( "L203.Supplysector_demand: generic info for demand sectors" )#
L203.Supplysector_demand <- write_to_all_regions_ag( A_demand_supplysector, names_Supplysector )#
#
printlog( "L203.SubsectorAll_demand: generic info for demand subsectors" )#
L203.SubsectorAll_demand <- write_to_all_regions_ag( A_demand_subsector, names_SubsectorAll )#
#
printlog( "L203.StubTech_demand: identification of stub technologies for demands" )#
L203.StubTech_demand <- write_to_all_regions_ag( A_demand_technology, names_Tech )#
names( L203.StubTech_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTech_demand ) )#
#
printlog( "L203.StubTechInterp_demand: shareweight interpolation for demands" )#
L203.StubTechInterp_demand <- write_to_all_regions_ag( A_demand_technology, names_TechInterp )#
names( L203.StubTechInterp_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTechInterp_demand ) )#
#
printlog( "L203.GlobalTechCoef_demand: input names of demand technologies" )#
L203.GlobalTechCoef_demand <- repeat_and_add_vector( A_demand_technology, Y, c( model_base_years, model_future_years ) )#
L203.GlobalTechCoef_demand[ c( "sector.name", "subsector.name" ) ] <- L203.GlobalTechCoef_demand[ c( "supplysector", "subsector" ) ]#
L203.GlobalTechCoef_demand <- L203.GlobalTechCoef_demand[ names_GlobalTechCoef ]#
#
#Calibrated food and nonfood demands of crops and meat#
#Create table of regions, technologies, and all base years#
A_demand_technology_R <- write_to_all_regions_ag( A_demand_technology, c( names_Tech, "minicam.energy.input", "market.name" ) )#
A_demand_technology_R$stub.technology <- A_demand_technology_R$technology#
A_demand_technology_R_Ybase <- repeat_and_add_vector( A_demand_technology_R, Y, model_base_years )#
A_demand_technology_R_Y <- repeat_and_add_vector( A_demand_technology_R, Y, c( model_base_years, model_future_years ) )#
#
printlog( "L203.StubTechProd_food_crop: crop food demand by technology and region" )#
L203.StubTechProd_food_crop <- subset( A_demand_technology_R_Ybase, supplysector == "FoodDemand_Crops" )#
L203.StubTechProd_food_crop$calOutputValue <- round( L203.ag_Food_Pcal_R_C_Y.melt$value[#
      match( vecpaste( L203.StubTechProd_food_crop[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.ag_Food_Pcal_R_C_Y.melt[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput )#
#Subsector and technology shareweights (subsector requires the year as well)#
L203.StubTechProd_food_crop$share.weight.year <- L203.StubTechProd_food_crop$year#
L203.StubTechProd_food_crop$subs.share.weight <- ifelse( L203.StubTechProd_food_crop$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_food_crop$tech.share.weight <- ifelse( L203.StubTechProd_food_crop$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_food_crop <- L203.StubTechProd_food_crop[ names_StubTechProd]#
printlog( "L203.StubTechProd_food_meat: meat food demand by technology and region" )#
L203.StubTechProd_food_meat <- subset( A_demand_technology_R_Ybase, supplysector == "FoodDemand_Meat" )#
L203.StubTechProd_food_meat$calOutputValue <- round( L203.an_Food_Pcal_R_C_Y.melt$value[#
      match( vecpaste( L203.StubTechProd_food_meat[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.an_Food_Pcal_R_C_Y.melt[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput )#
#Subsector and technology shareweights (subsector requires the year as well)#
L203.StubTechProd_food_meat$share.weight.year <- L203.StubTechProd_food_meat$year#
L203.StubTechProd_food_meat$subs.share.weight <- ifelse( L203.StubTechProd_food_meat$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_food_meat$tech.share.weight <- ifelse( L203.StubTechProd_food_meat$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_food_meat <- L203.StubTechProd_food_meat[ names_StubTechProd]#
printlog( "L203.StubTechProd_nonfood_crop: crop nonfood demand by technology and region" )#
L203.StubTechProd_nonfood_crop <- subset( A_demand_technology_R_Ybase, supplysector == "NonFoodDemand_Crops" )#
L203.StubTechProd_nonfood_crop$calOutputValue <- round( L203.ag_ALL_Mt_R_C_Y$OtherUses_Mt[#
      match( vecpaste( L203.StubTechProd_nonfood_crop[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.ag_ALL_Mt_R_C_Y[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput )#
#Subsector and technology shareweights (subsector requires the year as well)#
L203.StubTechProd_nonfood_crop$share.weight.year <- L203.StubTechProd_nonfood_crop$year#
L203.StubTechProd_nonfood_crop$subs.share.weight <- ifelse( L203.StubTechProd_nonfood_crop$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_nonfood_crop$tech.share.weight <- ifelse( L203.StubTechProd_nonfood_crop$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_nonfood_crop <- L203.StubTechProd_nonfood_crop[ names_StubTechProd]#
#
printlog( "L203.StubTechProd_nonfood_meat: meat nonfood demand by technology and region" )#
L203.StubTechProd_nonfood_meat <- subset( A_demand_technology_R_Ybase, supplysector == "NonFoodDemand_Meat" )#
L203.StubTechProd_nonfood_meat$calOutputValue <- round( L203.an_ALL_Mt_R_C_Y$OtherUses_Mt[#
      match( vecpaste( L203.StubTechProd_nonfood_meat[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.an_ALL_Mt_R_C_Y[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput )#
#Subsector and technology shareweights (subsector requires the year as well)#
L203.StubTechProd_nonfood_meat$share.weight.year <- L203.StubTechProd_nonfood_meat$year#
L203.StubTechProd_nonfood_meat$subs.share.weight <- ifelse( L203.StubTechProd_nonfood_meat$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_nonfood_meat$tech.share.weight <- ifelse( L203.StubTechProd_nonfood_meat$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_nonfood_meat <- L203.StubTechProd_nonfood_meat[ names_StubTechProd]#
printlog( "L203.StubTechProd_For: Forest product demand by technology and region" )#
L203.StubTechProd_For <- subset( A_demand_technology_R_Ybase, supplysector == "NonFoodDemand_Forest" )#
L203.StubTechProd_For$calOutputValue <- round( L203.For_ALL_bm3_R_Y$Cons_bm3[#
      match( vecpaste( L203.StubTechProd_For[ c( "region", Y ) ] ),#
             vecpaste( L203.For_ALL_bm3_R_Y[ c( "region", Y ) ] ) ) ],#
      digits_calOutput )#
#Subsector and technology shareweights (subsector requires the year as well)#
L203.StubTechProd_For$share.weight.year <- L203.StubTechProd_For$year#
L203.StubTechProd_For$subs.share.weight <- ifelse( L203.StubTechProd_For$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_For$tech.share.weight <- ifelse( L203.StubTechProd_For$calOutputValue > 0, 1, 0 )#
L203.StubTechProd_For <- L203.StubTechProd_For[ names_StubTechProd]#
#
printlog( "L203.StubTechFixOut_exp: animal exports for net exporting regions in all periods" )#
L203.StubTechFixOut_exp <- subset( A_demand_technology_R_Y, supplysector == "Exports_Meat" )#
L203.StubTechFixOut_exp$fixedOutput <- pmax( 0, round( L203.an_ALL_Mt_R_C_Y$NetExp_Mt[#
      match( vecpaste( L203.StubTechFixOut_exp[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.an_ALL_Mt_R_C_Y[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput ) )#
L203.StubTechFixOut_exp$fixedOutput[ L203.StubTechFixOut_exp$year > max( model_base_years ) ] <-#
      L203.StubTechFixOut_exp$fixedOutput[ L203.StubTechFixOut_exp$year == max( model_base_years ) ]#
L203.StubTechFixOut_exp$share.weight.year <- L203.StubTechFixOut_exp$year#
L203.StubTechFixOut_exp$subs.share.weight <- 0#
L203.StubTechFixOut_exp$tech.share.weight <- 0#
L203.StubTechFixOut_exp <- L203.StubTechFixOut_exp[ names_StubTechFixOut]#
#
printlog( "L203.StubCalorieContent_crop: caloric content of food crops (incl secondary products)" )#
L203.StubCalorieContent_crop <- subset( A_demand_technology_R_Y, supplysector == "FoodDemand_Crops" )#
L203.StubCalorieContent_crop$efficiency <- round( L203.ag_kcalg_R_C_Y.melt$value[#
      match( vecpaste( L203.StubCalorieContent_crop[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.ag_kcalg_R_C_Y.melt[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput )#
L203.StubCalorieContent_crop$efficiency[ L203.StubCalorieContent_crop$year > max( model_base_years ) ] <- #
      L203.StubCalorieContent_crop$efficiency[ L203.StubCalorieContent_crop$year == max( model_base_years) ]#
L203.StubCalorieContent_crop <- L203.StubCalorieContent_crop[ names_StubTechCalorieContent ]#
printlog( "L203.StubCalorieContent_meat: caloric content of meat commodities" )#
L203.StubCalorieContent_meat <- subset( A_demand_technology_R_Y, supplysector == "FoodDemand_Meat" )#
L203.StubCalorieContent_meat$efficiency <- round( L203.an_kcalg_R_C_Y.melt$value[#
      match( vecpaste( L203.StubCalorieContent_meat[ c( "region", "technology", Y ) ] ),#
             vecpaste( L203.an_kcalg_R_C_Y.melt[ c( "region", C, Y ) ] ) ) ],#
      digits_calOutput )#
L203.StubCalorieContent_meat$efficiency[ L203.StubCalorieContent_meat$year > max( model_base_years ) ] <- #
      L203.StubCalorieContent_meat$efficiency[ L203.StubCalorieContent_meat$year == max( model_base_years) ]#
L203.StubCalorieContent_meat <- L203.StubCalorieContent_meat[ names_StubTechCalorieContent ]#
#FINAL DEMANDS#
printlog( "L203.PerCapitaBased: final demand attributes that do not vary by time period" )#
L203.PerCapitaBased <- write_to_all_regions_ag( A_demand_supplysector, names_PerCapitaBased )#
printlog( "L203.BaseService: base service of final demands" )#
Prod_colnames <- c( "region", "supplysector", "year", "calOutputValue" )#
L203.StubTechProd_exp <- subset( L203.StubTechFixOut_exp, year %in% model_base_years )#
L203.StubTechProd_exp$calOutputValue <- L203.StubTechProd_exp$fixedOutput#
L203.StubTechProd_all <- rbind( L203.StubTechProd_food_crop[ Prod_colnames ], L203.StubTechProd_food_meat[ Prod_colnames ],#
      L203.StubTechProd_nonfood_crop[ Prod_colnames ], L203.StubTechProd_nonfood_meat[ Prod_colnames ],#
      L203.StubTechProd_For[ Prod_colnames ], L203.StubTechProd_exp[ Prod_colnames ] )#
L203.BaseService <- aggregate( L203.StubTechProd_all$calOutputValue,#
      by=as.list( L203.StubTechProd_all[ c( "region", "supplysector", "year" ) ] ), sum )#
names( L203.BaseService ) <- names_BaseService#
printlog( "L203.IncomeElasticity: Income elasticities" )#
#Note: these steps contain processing normally considered level 1, but are done here because unlike other quantities computed in level 1,#
# the income elasticities depend on the timestep length chosen, and as such are dependent on the modeltime, which is not a level 1 attribute#
printlog( "Step 1: Building historical estimates of changes in per-capita food demands by region and demand type")#
L203.Food_pckcald_R.melt <- subset( L203.BaseService, energy.final.demand %in% c( "FoodDemand_Crops", "FoodDemand_Meat" ) )#
L203.Food_pckcald_R.melt$population <- L203.Pop_thous_R_Yh$value[#
      match( vecpaste( L203.Food_pckcald_R.melt[ c( "region", "year" ) ] ),#
             vecpaste( L203.Pop_thous_R_Yh[ c( "region", "year" ) ] ) ) ]#
L203.Food_pckcald_R.melt$pckcald <- L203.Food_pckcald_R.melt$base.service * conv_Pcal_Mcal * conv_days_year / L203.Food_pckcald_R.melt$population#
#
#Cast so that years are columns (with X pasted in front), and compute a table of ratios#
L203.Food_pckcald_R.melt$Xyear <- paste0( "X", L203.Food_pckcald_R.melt$year )#
L203.Food_pckcald_R_Yh <- cast( L203.Food_pckcald_R.melt, region + energy.final.demand ~ Xyear, value = "pckcald" )#
L203.pcFoodRatio_R_Yh <- L203.Food_pckcald_R_Yh#
L203.pcFoodRatio_R_Yh[ X_model_base_years[ 2:length( X_model_base_years ) ] ] <-#
      L203.Food_pckcald_R_Yh[ X_model_base_years[ 2:length( X_model_base_years ) ] ] / #
      L203.Food_pckcald_R_Yh[ X_model_base_years[ 1:( length( X_model_base_years ) - 1 ) ] ]#
L203.pcFoodRatio_R_Yh[ X_model_base_years[1] ] <- 1#
#
printlog( "Step 2: Calculating future changes (ratios) in caloric demands by region and demand type" )#
#Cast table of future diet change and compute ratios#
L203.pcFood_kcald_R_Dmnd_Y.melt$energy.final.demand[ L203.pcFood_kcald_R_Dmnd_Y.melt$GCAM_demand == "crops" ] <- "FoodDemand_Crops"#
L203.pcFood_kcald_R_Dmnd_Y.melt$energy.final.demand[ L203.pcFood_kcald_R_Dmnd_Y.melt$GCAM_demand == "meat" ] <- "FoodDemand_Meat"#
L203.pcFood_kcald_R_Dmnd_Yfut <- cast( L203.pcFood_kcald_R_Dmnd_Y.melt, region + energy.final.demand ~ variable )#
L203.pcFoodRatio_R_Dmnd_Yfut <- L203.pcFood_kcald_R_Dmnd_Yfut#
L203.pcFoodRatio_R_Dmnd_Yfut[ X_diet_years[ 2:length( X_diet_years ) ] ] <-#
      L203.pcFood_kcald_R_Dmnd_Yfut[ X_diet_years[ 2:length( X_diet_years ) ] ] / #
      L203.pcFood_kcald_R_Dmnd_Yfut[ X_diet_years[ 1:( length( X_diet_years ) - 1 ) ] ]#
L203.pcFoodRatio_R_Dmnd_Yfut[ X_diet_years[1] ] <- 1#
#
printlog( "Step 3: Merging the historical and future caloric demand trajectories" )#
L203.pcFoodRatio_R_Dmnd_Y <- L203.pcFoodRatio_R_Yh#
L203.pcFoodRatio_R_Dmnd_Y[ X_diet_years ] <- L203.pcFoodRatio_R_Yh[[X_model_base_years[ length( X_model_base_years ) ]]] * #
      L203.pcFoodRatio_R_Dmnd_Yfut[#
          match( vecpaste( L203.pcFoodRatio_R_Yh[ names_EnergyFinalDemand ] ),#
                 vecpaste( L203.pcFoodRatio_R_Dmnd_Yfut[ names_EnergyFinalDemand ] ) ),#
          X_diet_years ]#
#
printlog( "Step 4: Calculating the historical per-capita GDP trajectories over the same time period" )#
printlog( "NOTE: only computing elasticities based on the specified GDP scenario" )#
IncElas_years <- sort( unique( c( model_base_years, diet_years ) ) )#
X_IncElas_years <- paste0( "X", IncElas_years )#
L203.pcgdp_thous90USD_R_Y.melt <- L203.pcgdp_thous90USD_SSP_R_Y.melt[#
       L203.pcgdp_thous90USD_SSP_R_Y.melt[[Scen]] == diet_gdpScen & L203.pcgdp_thous90USD_SSP_R_Y.melt[[Y]] %in% IncElas_years, ]#
L203.pcgdp_usd_R_Y <- cast( L203.pcgdp_thous90USD_R_Y.melt, region ~ variable )#
L203.pcgdpRatio_R_Y <- L203.pcgdp_usd_R_Y#
L203.pcgdpRatio_R_Y[ X_IncElas_years[ 2:length( X_IncElas_years ) ] ] <-#
      L203.pcgdp_usd_R_Y[ X_IncElas_years[ 2:length( X_IncElas_years ) ] ] / #
      L203.pcgdp_usd_R_Y[ X_IncElas_years[ 1:( length( X_IncElas_years ) - 1 ) ] ]#
L203.pcgdpRatio_R_Y[ X_IncElas_years[1] ] <- 1#
#
printlog( "Step 5: Solving for the income elasticities in each time period" )#
L203.IncElas_R_Dmnd_Y <- L203.pcFoodRatio_R_Dmnd_Y#
L203.IncElas_R_Dmnd_Y[ X_IncElas_years ] <-#
      round( log( L203.pcFoodRatio_R_Dmnd_Y [ X_IncElas_years ] ) / #
             log( L203.pcgdpRatio_R_Y[ match( L203.pcFoodRatio_R_Dmnd_Y$region, L203.pcgdpRatio_R_Y$region ), X_IncElas_years ] ),#
             digits_IncElas )#
L203.IncElas_R_Dmnd_Y[ is.na( L203.IncElas_R_Dmnd_Y ) ] <- 0#
#
printlog( "Step 6: Filling out the income elasticities beyond the final diet period, and subsetting only future periods")#
L203.IncElas_R_Dmnd_Y[[ X_model_future_years[ length( X_model_future_years ) ] ]] <- default_IncElas#
L203.IncElas_R_Dmnd_Y <- data.frame( L203.IncElas_R_Dmnd_Y ) #Need to remove the information left by the melt and cast functions#
L203.IncomeElasticity <- interpolate_and_melt( L203.IncElas_R_Dmnd_Y, model_future_years, value.name = "income.elasticity" )#
L203.IncomeElasticity <- L203.IncomeElasticity[ names_IncomeElasticity ]#
#
printlog( "L203.PriceElasticity: Price elasticities" )#
L203.PriceElasticity <- write_to_all_regions_ag( A_demand_supplysector, c( names_EnergyFinalDemand, "price.elasticity" ) )#
#Price elasticities are only read for future periods#
L203.PriceElasticity <- repeat_and_add_vector( L203.PriceElasticity, Y, model_future_years )#
#Set the USA price elasticity to a region-specific value#
L203.PriceElasticity$price.elasticity[ L203.PriceElasticity$region == "USA" &#
      L203.PriceElasticity$energy.final.demand == "FoodDemand_Meat" ] <- food_meat_P_elas_USA#
L203.PriceElasticity <- L203.PriceElasticity[ names_PriceElasticity ]#
# -----------------------------------------------------------------------------#
# 3. Write all csvs as tables, and paste csv filenames into a single batch XML file#
write_mi_data( L203.Supplysector_demand, IDstring="Supplysector", domain="AGLU_LEVEL2_DATA", fn="L203.Supplysector_demand",#
               batch_XML_domain="AGLU_XML_BATCH", batch_XML_file="batch_demand_input.xml" )#
write_mi_data( L203.SubsectorAll_demand, "SubsectorAll", "AGLU_LEVEL2_DATA", "L203.SubsectorAll_demand", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTech_demand, "StubTech", "AGLU_LEVEL2_DATA", "L203.StubTech_demand", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechInterp_demand, "StubTechInterp", "AGLU_LEVEL2_DATA", "L203.StubTechInterp_demand", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.GlobalTechCoef_demand, "GlobalTechCoef", "AGLU_LEVEL2_DATA", "L203.GlobalTechCoef_demand", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechProd_food_crop, "StubTechProd", "AGLU_LEVEL2_DATA", "L203.StubTechProd_food_crop", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechProd_food_meat, "StubTechProd", "AGLU_LEVEL2_DATA", "L203.StubTechProd_food_meat", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechProd_nonfood_crop, "StubTechProd", "AGLU_LEVEL2_DATA", "L203.StubTechProd_nonfood_crop", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechProd_nonfood_meat, "StubTechProd", "AGLU_LEVEL2_DATA", "L203.StubTechProd_nonfood_meat", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechProd_For, "StubTechProd", "AGLU_LEVEL2_DATA", "L203.StubTechProd_For", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubTechFixOut_exp, "StubTechFixOut", "AGLU_LEVEL2_DATA", "L203.StubTechFixOut_exp", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubCalorieContent_crop, "StubCalorieContent", "AGLU_LEVEL2_DATA", "L203.StubCalorieContent_crop", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.StubCalorieContent_meat, "StubCalorieContent", "AGLU_LEVEL2_DATA", "L203.StubCalorieContent_meat", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.PerCapitaBased, "PerCapitaBased", "AGLU_LEVEL2_DATA", "L203.PerCapitaBased", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.BaseService, "BaseService", "AGLU_LEVEL2_DATA", "L203.BaseService", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.IncomeElasticity, "IncomeElasticity", "AGLU_LEVEL2_DATA", "L203.IncomeElasticity", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
write_mi_data( L203.PriceElasticity, "PriceElasticity", "AGLU_LEVEL2_DATA", "L203.PriceElasticity", "AGLU_XML_BATCH", "batch_demand_input.xml" )#
insert_file_into_batchxml( "AGLU_XML_BATCH", "batch_demand_input.xml", "AGLU_XML_FINAL", "demand_input.xml", "", xml_tag="outFile" )#
logstop()
if( !exists( "AGLUPROC_DIR" ) ){#
    if( Sys.getenv( "AGLUPROC" ) != "" ){#
        AGLUPROC_DIR <- Sys.getenv( "AGLUPROC" )#
    } else {#
        stop("Could not determine location of aglu processing scripts, please set the R var AGLUPROC_DIR to the appropriate location")#
    }#
}#
# Universal header file - provides logging, file support, etc.#
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L203.demand_input.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Model input for demands of all aglu commodities (crop, animal, forest)" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
A_demand_supplysector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_supplysector" )#
A_demand_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_subsector" )#
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )#
L101.ag_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_Food_Pcal_R_C_Y" )#
L101.ag_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_kcalg_R_C_Y" )#
L105.an_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_Food_Pcal_R_C_Y" )#
L105.an_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_kcalg_R_C_Y" )#
L109.ag_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.ag_ALL_Mt_R_C_Y" )#
L109.an_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.an_ALL_Mt_R_C_Y" )#
L110.For_ALL_bm3_R_Y <- readdata( "AGLU_LEVEL1_DATA", "L110.For_ALL_bm3_R_Y" )#
L134.pcFood_kcald_R_Dmnd_Y <- readdata( "AGLU_LEVEL1_DATA", "L134.pcFood_kcald_R_Dmnd_Y" )#
L101.Pop_thous_R_Yh <- readdata( "SOCIO_LEVEL1_DATA", "L101.Pop_thous_R_Yh" )#
L102.pcgdp_thous90USD_SSP_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L102.pcgdp_thous90USD_SSP_R_Y" )
A_demand_technology
L203.ag_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L101.ag_Food_Pcal_R_C_Y, model_base_years )#
L203.ag_kcalg_R_C_Y.melt <- interpolate_and_melt( L101.ag_kcalg_R_C_Y, model_base_years )#
L203.an_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L105.an_Food_Pcal_R_C_Y, model_base_years )#
L203.an_kcalg_R_C_Y.melt <- interpolate_and_melt( L105.an_kcalg_R_C_Y, model_base_years )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- interpolate_and_melt( L134.pcFood_kcald_R_Dmnd_Y, diet_years )#
L203.Pop_thous_R_Yh <- interpolate_and_melt( L101.Pop_thous_R_Yh, model_base_years )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- interpolate_and_melt( L102.pcgdp_thous90USD_SSP_R_Y, c( model_base_years, model_future_years ) )#
#
#Adding lookup vectors to level1 output tables#
printlog( "Adding region names to Level1 data tables" )#
L203.ag_Food_Pcal_R_C_Y.melt <- add_region_name( L203.ag_Food_Pcal_R_C_Y.melt )#
L203.ag_kcalg_R_C_Y.melt  <- add_region_name( L203.ag_kcalg_R_C_Y.melt )#
L203.an_Food_Pcal_R_C_Y.melt <- add_region_name( L203.an_Food_Pcal_R_C_Y.melt )#
L203.an_kcalg_R_C_Y.melt  <- add_region_name( L203.an_kcalg_R_C_Y.melt )#
L203.ag_ALL_Mt_R_C_Y <- add_region_name( L109.ag_ALL_Mt_R_C_Y )#
L203.an_ALL_Mt_R_C_Y <- add_region_name( L109.an_ALL_Mt_R_C_Y )#
L203.For_ALL_bm3_R_Y <- add_region_name( L110.For_ALL_bm3_R_Y )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- add_region_name( L203.pcFood_kcald_R_Dmnd_Y.melt )#
L203.Pop_thous_R_Yh <- add_region_name( L203.Pop_thous_R_Yh )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- add_region_name( L203.pcgdp_thous90USD_SSP_R_Y.melt )#
printlog( "L203.Supplysector_demand: generic info for demand sectors" )#
L203.Supplysector_demand <- write_to_all_regions_ag( A_demand_supplysector, names_Supplysector )#
#
printlog( "L203.SubsectorAll_demand: generic info for demand subsectors" )#
L203.SubsectorAll_demand <- write_to_all_regions_ag( A_demand_subsector, names_SubsectorAll )#
#
printlog( "L203.StubTech_demand: identification of stub technologies for demands" )#
L203.StubTech_demand <- write_to_all_regions_ag( A_demand_technology, names_Tech )#
names( L203.StubTech_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTech_demand ) )
L203.StubTech_demand
L203.StubTechInterp_demand <- write_to_all_regions_ag( A_demand_technology, names_TechInterp )
A_demand_technology
names_TechInterp
A_demand_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_subsector" )
A_demand_subsector
A_demand_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_subsector" )
A_demand_subsector
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )
A_demand_technology
printlog( "L203.Supplysector_demand: generic info for demand sectors" )#
L203.Supplysector_demand <- write_to_all_regions_ag( A_demand_supplysector, names_Supplysector )#
#
printlog( "L203.SubsectorAll_demand: generic info for demand subsectors" )#
L203.SubsectorAll_demand <- write_to_all_regions_ag( A_demand_subsector, names_SubsectorAll )#
#
printlog( "L203.StubTech_demand: identification of stub technologies for demands" )#
L203.StubTech_demand <- write_to_all_regions_ag( A_demand_technology, names_Tech )#
names( L203.StubTech_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTech_demand ) )#
#
printlog( "L203.StubTechInterp_demand: shareweight interpolation for demands" )#
L203.StubTechInterp_demand <- write_to_all_regions_ag( A_demand_technology, names_TechInterp )#
names( L203.StubTechInterp_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTechInterp_demand ) )
L203.StubTechInterp_demand
L203.GlobalTechCoef_demand <- repeat_and_add_vector( A_demand_technology, Y, c( model_base_years, model_future_years ) )#
L203.GlobalTechCoef_demand[ c( "sector.name", "subsector.name" ) ] <- L203.GlobalTechCoef_demand[ c( "supplysector", "subsector" ) ]#
L203.GlobalTechCoef_demand <- L203.GlobalTechCoef_demand[ names_GlobalTechCoef ]
L203.GlobalTechCoef_demand
logstop()
GlobalTechCoef_demand[1:10,]
L203.GlobalTechCoef_demand <- repeat_and_add_vector( A_demand_technology, Y, c( model_base_years, model_future_years ) )#
L203.GlobalTechCoef_demand[ c( "sector.name", "subsector.name" ) ] <- L203.GlobalTechCoef_demand[ c( "supplysector", "subsector" ) ]#
L203.GlobalTechCoef_demand <- L203.GlobalTechCoef_demand[ names_GlobalTechCoef ]
head(L203.GlobalTechCoef_demand)
names_GlobalTechYr
names_StubTechInterp_demand
names_StubTechInterp
logstop()
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L203.demand_input.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Model input for demands of all aglu commodities (crop, animal, forest)" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
A_demand_supplysector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_supplysector" )#
A_demand_subsector <- readdata( "AGLU_ASSUMPTIONS", "A_demand_subsector" )#
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )#
L101.ag_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_Food_Pcal_R_C_Y" )#
L101.ag_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L101.ag_kcalg_R_C_Y" )#
L105.an_Food_Pcal_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_Food_Pcal_R_C_Y" )#
L105.an_kcalg_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L105.an_kcalg_R_C_Y" )#
L109.ag_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.ag_ALL_Mt_R_C_Y" )#
L109.an_ALL_Mt_R_C_Y <- readdata( "AGLU_LEVEL1_DATA", "L109.an_ALL_Mt_R_C_Y" )#
L110.For_ALL_bm3_R_Y <- readdata( "AGLU_LEVEL1_DATA", "L110.For_ALL_bm3_R_Y" )#
L134.pcFood_kcald_R_Dmnd_Y <- readdata( "AGLU_LEVEL1_DATA", "L134.pcFood_kcald_R_Dmnd_Y" )#
L101.Pop_thous_R_Yh <- readdata( "SOCIO_LEVEL1_DATA", "L101.Pop_thous_R_Yh" )#
L102.pcgdp_thous90USD_SSP_R_Y <- readdata( "SOCIO_LEVEL1_DATA", "L102.pcgdp_thous90USD_SSP_R_Y" )#
# -----------------------------------------------------------------------------#
# 2. Build tables#
L203.ag_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L101.ag_Food_Pcal_R_C_Y, model_base_years )#
L203.ag_kcalg_R_C_Y.melt <- interpolate_and_melt( L101.ag_kcalg_R_C_Y, model_base_years )#
L203.an_Food_Pcal_R_C_Y.melt <- interpolate_and_melt( L105.an_Food_Pcal_R_C_Y, model_base_years )#
L203.an_kcalg_R_C_Y.melt <- interpolate_and_melt( L105.an_kcalg_R_C_Y, model_base_years )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- interpolate_and_melt( L134.pcFood_kcald_R_Dmnd_Y, diet_years )#
L203.Pop_thous_R_Yh <- interpolate_and_melt( L101.Pop_thous_R_Yh, model_base_years )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- interpolate_and_melt( L102.pcgdp_thous90USD_SSP_R_Y, c( model_base_years, model_future_years ) )#
#
#Adding lookup vectors to level1 output tables#
printlog( "Adding region names to Level1 data tables" )#
L203.ag_Food_Pcal_R_C_Y.melt <- add_region_name( L203.ag_Food_Pcal_R_C_Y.melt )#
L203.ag_kcalg_R_C_Y.melt  <- add_region_name( L203.ag_kcalg_R_C_Y.melt )#
L203.an_Food_Pcal_R_C_Y.melt <- add_region_name( L203.an_Food_Pcal_R_C_Y.melt )#
L203.an_kcalg_R_C_Y.melt  <- add_region_name( L203.an_kcalg_R_C_Y.melt )#
L203.ag_ALL_Mt_R_C_Y <- add_region_name( L109.ag_ALL_Mt_R_C_Y )#
L203.an_ALL_Mt_R_C_Y <- add_region_name( L109.an_ALL_Mt_R_C_Y )#
L203.For_ALL_bm3_R_Y <- add_region_name( L110.For_ALL_bm3_R_Y )#
L203.pcFood_kcald_R_Dmnd_Y.melt <- add_region_name( L203.pcFood_kcald_R_Dmnd_Y.melt )#
L203.Pop_thous_R_Yh <- add_region_name( L203.Pop_thous_R_Yh )#
L203.pcgdp_thous90USD_SSP_R_Y.melt <- add_region_name( L203.pcgdp_thous90USD_SSP_R_Y.melt )#
printlog( "L203.Supplysector_demand: generic info for demand sectors" )#
L203.Supplysector_demand <- write_to_all_regions_ag( A_demand_supplysector, names_Supplysector )#
#
printlog( "L203.SubsectorAll_demand: generic info for demand subsectors" )#
L203.SubsectorAll_demand <- write_to_all_regions_ag( A_demand_subsector, names_SubsectorAll )#
#
printlog( "L203.StubTech_demand: identification of stub technologies for demands" )#
L203.StubTech_demand <- write_to_all_regions_ag( A_demand_technology, names_Tech )#
names( L203.StubTech_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTech_demand ) )#
#
printlog( "L203.StubTechInterp_demand: shareweight interpolation for demands" )#
L203.StubTechInterp_demand <- write_to_all_regions_ag( A_demand_technology, names_TechInterp )#
names( L203.StubTechInterp_demand ) <- gsub( "technology", "stub.technology", names( L203.StubTechInterp_demand ) )#
#
printlog( "L203.GlobalTechCoef_demand: input names of demand technologies" )#
L203.GlobalTechCoef_demand <- repeat_and_add_vector( A_demand_technology, Y, c( model_base_years, model_future_years ) )#
L203.GlobalTechCoef_demand[ c( "sector.name", "subsector.name" ) ] <- L203.GlobalTechCoef_demand[ c( "supplysector", "subsector" ) ]#
L203.GlobalTechCoef_demand <- L203.GlobalTechCoef_demand[ names_GlobalTechCoef ]
head(L203.GlobalTechCoef_demand)
head(L203.StubTechInterp_demand)
A_demand_technology
L203.GlobalTechShrwt_demand <- L203.GlobalTechCoef_demand[ names_GlobalTechYr ]#
L203.GlobalTechShrwt_demand$share.weight <- 1
head(L203.GlobalTechShrwt_demand)
logstop()
source("../aglu-processing-code/level2/L203.demand_input.R")
L203.StubTechProd_For
logstop()
source(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
logstart( "L204.resbio_input.R" )#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(AGLUPROC_DIR,"/../_common/headers/AGLU_header.R",sep=""))#
printlog( "Model input for residue biomass production from agriculture / forestry / milling" )#
# -----------------------------------------------------------------------------#
# 1. Read files#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "AGLU_ASSUMPTIONS", "A_aglu_data", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names" )#
A_AgSupplySector <- readdata( "AGLU_ASSUMPTIONS", "A_agSupplySector" )#
A_biocrops_R_AEZ <- readdata( "AGLU_ASSUMPTIONS", "A_biocrops_R_AEZ" )#
A_demand_technology <- readdata( "AGLU_ASSUMPTIONS", "A_demand_technology" )#
A_resbio_curves <- readdata( "AGLU_ASSUMPTIONS", "A_resbio_curves" )#
A_bio_frac_prod_R <- readdata( "AGLU_ASSUMPTIONS", "A_bio_frac_prod_R" )#
L111.ag_resbio_R_C <- readdata( "AGLU_LEVEL1_DATA", "L111.ag_resbio_R_C" )#
L123.For_Prod_bm3_R_Y_AEZ <- readdata( "AGLU_LEVEL1_DATA", "L123.For_Prod_bm3_R_Y_AEZ" )#
L125.R_AEZ_nonexist <- readdata( "AGLU_LEVEL1_DATA", "L125.R_AEZ_nonexist" )#
# -----------------------------------------------------------------------------#
# 2. Build tables#
printlog( "Building base tables of combinations of regions / sectors / technologies" )#
#Add region names to bio frac table#
A_bio_frac_prod_R <- add_region_name( A_bio_frac_prod_R )#
#FORESTRY#
#Melt forest production table to get Forest name by region and AEZ#
L204.For_Prod_bm3_R_Y_AEZ.melt <- melt( L123.For_Prod_bm3_R_Y_AEZ, id.vars = R_C_AEZ, variable_name = "year" )#
L204.For_Prod_bm3_R_Y_AEZ.melt$year <- sub( "X", "", L204.For_Prod_bm3_R_Y_AEZ.melt$year )#
L204.For_Prod_bm3_R_Y_AEZ.melt<- add_region_name( L204.For_Prod_bm3_R_Y_AEZ.melt )#
L204.For_Prod_bm3_R_AEZ.melt <- subset( L204.For_Prod_bm3_R_Y_AEZ.melt, year == max( year ) )#
L204.R_For_tech <- data.frame(#
      region = L204.For_Prod_bm3_R_AEZ.melt[[reg]],#
      AgSupplySector = L204.For_Prod_bm3_R_AEZ.melt[[C]],#
      AgSupplySubsector = paste( L204.For_Prod_bm3_R_AEZ.melt[[C]], L204.For_Prod_bm3_R_AEZ.melt[[AEZ]], sep = AEZ_delimiter ),#
      AgProductionTechnology = paste( L204.For_Prod_bm3_R_AEZ.melt[[C]], L204.For_Prod_bm3_R_AEZ.melt[[AEZ]], sep = AEZ_delimiter ) )#
printlog( "L204.AgResBio_For: Forest residue biomass parameters" )#
L204.AgResBio_For <- repeat_and_add_vector( L204.R_For_tech, Y, c( model_base_years, model_future_years ) )#
L204.AgResBio_For$residue.biomass.production <- "biomass"#
L204.AgResBio_For$mass.conversion <- AvgWoodDensity_kgm3#
L204.AgResBio_For$harvest.index <- ForestHarvestIndex#
L204.AgResBio_For$eros.ctrl <- ForestErosCtrl_kgm2#
L204.AgResBio_For$mass.to.energy <- WoodEnergyContent_GJkg#
L204.AgResBio_For$water.content <- WoodWaterContent#
printlog( "L204.AgResBioCurve_For: Forest residue biomass supply curves" )#
L204.R_For_tech_year <- repeat_and_add_vector( L204.R_For_tech, "year", c( model_base_years, model_future_years ) )#
L204.R_For_tech_year$residue.biomass.production <- "biomass"#
L204.AgResBioCurve_For <- repeat_and_add_vector( L204.R_For_tech_year, "price", unique (A_resbio_curves$price) )#
L204.AgResBioCurve_For$fract.harvested <- A_resbio_curves$For[ match( L204.AgResBioCurve_For$price, A_resbio_curves$price ) ]#
#In base years, replace the "fraction produced" at specified prices in order to calibrate resbio production#
L204.AgResBioCurve_For$fract.harvested[#
      L204.AgResBioCurve_For$price == Price_bio_frac & L204.AgResBioCurve_For$year %in% model_base_years ] <-#
      A_bio_frac_prod_R$For[ match( L204.AgResBioCurve_For$region[#
           L204.AgResBioCurve_For$price == Price_bio_frac & L204.AgResBioCurve_For$year %in% model_base_years ],#
      A_bio_frac_prod_R$region ) ]#
#MILL#
L204.Mill_tech <- A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]#
L204.R_Mill_tech <- data.frame(#
      region = GCAM_region_names$region,#
      L204.Mill_tech[ rep( 1:nrow( L204.Mill_tech ), times = length( GCAM_region_names$region ) ), ] )#
printlog( "L204.ResBio_Mill: Mill residue biomass parameters" )#
L204.ResBio_Mill <- repeat_and_add_vector( L204.R_Mill_tech, Y, c( model_base_years, model_future_years ) )#
L204.ResBio_Mill$residue.biomass.production <- "biomass"#
L204.ResBio_Mill$mass.conversion <- AvgWoodDensity_kgm3#
L204.ResBio_Mill$harvest.index <- ForestHarvestIndex#
L204.ResBio_Mill$eros.ctrl <- 0#
L204.ResBio_Mill$mass.to.energy <- WoodEnergyContent_GJkg#
L204.ResBio_Mill$water.content <- WoodWaterContent#
printlog( "L204.ResBioCurve_Mill: Mill residue biomass supply curves" )#
L204.R_Mill_tech_year <- repeat_and_add_vector( L204.R_Mill_tech, "year", c( model_base_years, model_future_years ) )#
L204.R_Mill_tech_year$residue.biomass.production <- "biomass"#
L204.ResBioCurve_Mill <- repeat_and_add_vector( L204.R_Mill_tech_year, "price", unique( A_resbio_curves$price) )#
L204.ResBioCurve_Mill$fract.harvested <- A_resbio_curves$For[ match( L204.ResBioCurve_Mill$price, A_resbio_curves$price ) ]#
#In base years, replace the "fraction produced" at specified prices in order to calibrate resbio production#
L204.ResBioCurve_Mill$fract.harvested[#
      L204.ResBioCurve_Mill$price == Price_bio_frac & L204.ResBioCurve_Mill$year %in% model_base_years ] <-#
         A_bio_frac_prod_R$Mill[ match( L204.ResBioCurve_Mill$region[#
             L204.ResBioCurve_Mill$price == Price_bio_frac & L204.ResBioCurve_Mill$year %in% model_base_years ],#
      A_bio_frac_prod_R$region ) ]#
#AGRICULTURE#
L204.ag_resbio_R_C <- add_region_name( L111.ag_resbio_R_C )#
L204.R_Ag_supplysector <- data.frame(#
      region = rep( GCAM_region_names$region, times = length( unique( L111.ag_resbio_R_C$GCAM_commodity ) ) ),#
      AgSupplySector = sort( rep( unique( L111.ag_resbio_R_C$GCAM_commodity ), times = length( GCAM_region_names$region ) ) ) )#
L204.R_Ag_technology <- repeat_and_add_vector( L204.R_Ag_supplysector, AEZ, AEZs )#
L204.R_Ag_technology$AgSupplySubsector = paste( L204.R_Ag_technology$AgSupplySector, L204.R_Ag_technology$AEZ, sep = AEZ_delimiter )#
L204.R_Ag_technology$AgProductionTechnology <- L204.R_Ag_technology$AgSupplySubsector#
L204.R_Ag_technology <- L204.R_Ag_technology[ names( L204.R_Ag_technology ) != "AEZ" ]#
L204.R_Ag_technology_year <- repeat_and_add_vector( L204.R_Ag_technology, "year", c( model_base_years, model_future_years ) )#
L204.R_Ag_technology_year$residue.biomass.production <- "biomass"#
printlog( "L204.AgResBio_ag: Agricultural residue biomass parameters" )#
L204.AgResBio_ag <- L204.R_Ag_technology_year#
L204.AgResBio_ag$mass.conversion <- 1#
L204.AgResBio_ag$harvest.index <- round( L204.ag_resbio_R_C$HarvestIndex[#
      match( vecpaste( L204.AgResBio_ag[ c( reg, agsupp ) ] ), vecpaste( L204.ag_resbio_R_C[ c( reg, C ) ] ) ) ],#
      digits_harvest_index )#
L204.AgResBio_ag$eros.ctrl <- round( L204.ag_resbio_R_C$ErosCtrl_tHa[#
      match( vecpaste( L204.AgResBio_ag[ c( reg, agsupp ) ] ), vecpaste( L204.ag_resbio_R_C[ c( reg, C ) ] ) ) ] * conv_tha_kgm2,#
      digits_eros_ctrl )#
L204.AgResBio_ag$mass.to.energy <- round( L204.ag_resbio_R_C$ResEnergy_GJt[#
      match( vecpaste( L204.AgResBio_ag[ c( reg, agsupp ) ] ), vecpaste( L204.ag_resbio_R_C[ c( reg, C ) ] ) ) ] * conv_kg_t,#
      digits_res_energy )#
L204.AgResBio_ag$water.content <- round( L204.ag_resbio_R_C$WaterContent[#
      match( vecpaste( L204.AgResBio_ag[ c( reg, agsupp ) ] ), vecpaste( L204.ag_resbio_R_C[ c( reg, C ) ] ) ) ],#
      digits_water_content )#
#
#Calcs return missing values where crops x regions do not exist. Drop these#
L204.AgResBio_ag <- na.omit( L204.AgResBio_ag )#
printlog( "L204.AgResBioCurve_ag: Agricultural residue biomass supply curves" )#
L204.AgResBioCurve_ag <- repeat_and_add_vector( L204.AgResBio_ag[ c( names_AgTechYr, "residue.biomass.production" ) ], "price", unique (A_resbio_curves$price) )#
L204.AgResBioCurve_ag$fract.harvested <- A_resbio_curves$ag[ match( L204.AgResBioCurve_ag$price, A_resbio_curves$price ) ]#
#JATROPHA#
printlog( "L204.Jatr_R_Y_AEZ: Jatropha residue biomass parameters" )#
L204.A_biocrops_R_AEZ <- A_biocrops_R_AEZ#
L204.A_biocrops_R_AEZ$crop <- substr( A_biocrops_R_AEZ$AgSupplySubsector,#
      1,#
      nchar( as.character( A_biocrops_R_AEZ$AgSupplySubsector ) ) - 5 )#
#Build base table for jatropha res bio input tables#
L204.Jatr_R_AEZ <- L204.A_biocrops_R_AEZ[ L204.A_biocrops_R_AEZ$crop == "Jatropha", c( reg, agsupp, agsubs, agtech ) ]#
L204.Jatr_R_Y_AEZ <- repeat_and_add_vector( L204.Jatr_R_AEZ, Y, c( model_base_years, model_future_years ) )#
L204.Jatr_R_Y_AEZ$residue.biomass.production <- "biomass"#
L204.AgResBio_Jatr <- L204.Jatr_R_Y_AEZ#
L204.AgResBio_Jatr$mass.conversion <- 1#
L204.AgResBio_Jatr$harvest.index <- JatrophaHarvestIndex#
L204.AgResBio_Jatr$eros.ctrl <- JatrophaErosCtrl_kgm2#
L204.AgResBio_Jatr$mass.to.energy <- JatrophaMassEnergy#
L204.AgResBio_Jatr$water.content <- JatrophaWaterContent#
printlog( "L204.AgResBioCurve_Jatr: Agricultural residue biomass supply curves" )#
L204.AgResBioCurve_Jatr <- repeat_and_add_vector( L204.Jatr_R_Y_AEZ, "price", unique( A_resbio_curves$price) )#
L204.AgResBioCurve_Jatr$fract.harvested <- A_resbio_curves$Jatr[ match( L204.AgResBioCurve_Jatr$price, A_resbio_curves$price ) ]#
printlog( "Removing non-existent region x AEZs from all tables" )#
L204.AgResBio_For <- remove_AEZ_nonexist( L204.AgResBio_For )#
L204.AgResBioCurve_For <- remove_AEZ_nonexist( L204.AgResBioCurve_For )#
L204.AgResBio_ag <- remove_AEZ_nonexist( L204.AgResBio_ag )#
L204.AgResBioCurve_ag <- remove_AEZ_nonexist( L204.AgResBioCurve_ag )#
L204.AgResBio_Jatr <- remove_AEZ_nonexist( L204.AgResBio_Jatr )#
L204.AgResBioCurve_Jatr <- remove_AEZ_nonexist( L204.AgResBioCurve_Jatr )
dim(L204.AgResBio_For)
subset(L204.AgResBio_For, region=="USA" & year==2020)
head(L204.ResBio_Mill)
subset(L204.ResBio_Mill, region=="USA")
A_resbio_curves
L204.Mill_tech <- A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]
L204.Mill_tech
L204.Mill_tech[ c( "sector.name", "subsector.name" ) ] <- L204.Mill_tech[ c( "supplysector", "subsector" ) ]
L204.Mill_tech
L204.GlobalResBio_Mill <- repeat_and_add_vector( L204.Mill_tech, Y, c( model_base_years, model_future_years ) )#
L204.GlobalResBio_Mill$residue.biomass.production <- "biomass"#
L204.GlobalResBio_Mill$mass.conversion <- AvgWoodDensity_kgm3#
L204.GlobalResBio_Mill$harvest.index <- ForestHarvestIndex#
L204.GlobalResBio_Mill$eros.ctrl <- 0#
L204.GlobalResBio_Mill$mass.to.energy <- WoodEnergyContent_GJkg#
L204.GlobalResBio_Mill$water.content <- WoodWaterContent
L204.GlobalResBio_Mill
L204.Mill_tech <- A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]#
L204.Mill_tech[ c( "sector.name", "subsector.name" ) ] <- L204.Mill_tech[ c( "supplysector", "subsector" ) ]#
L204.R_Mill_tech <- data.frame(#
      region = GCAM_region_names$region,#
      L204.Mill_tech[ rep( 1:nrow( L204.Mill_tech ), times = length( GCAM_region_names$region ) ), ] )
L204.R_Mill_tech
L204.R_Mill_tech <- L204.R_Mill_tech[ !names( L204.R_Mill_tech ) %in% c( "sector.name", "subsector.name" ) ]
L204.R_Mill_tech
L204.R_Mill_tech_year <- repeat_and_add_vector( L204.R_Mill_tech, "year", c( model_base_years, model_future_years ) )#
L204.R_Mill_tech_year$residue.biomass.production <- "biomass"#
L204.StubResBioCurve_Mill <- repeat_and_add_vector( L204.R_Mill_tech_year, "price", unique( A_resbio_curves$price) )#
L204.StubResBioCurve_Mill$fract.harvested <- A_resbio_curves$For[ match( L204.StubResBioCurve_Mill$price, A_resbio_curves$price ) ]
head(L204.StubResBioCurve_Mill)
names( L204.StubResBioCurve_Mill )[ names( L204.StubResBioCurve_Mill ) == "technology" ] <- "stub.technology"
L204.R_Mill_tech_year <- repeat_and_add_vector( L204.R_Mill_tech, "year", c( model_base_years, model_future_years ) )#
L204.R_Mill_tech_year$residue.biomass.production <- "biomass"#
L204.StubResBioCurve_Mill <- repeat_and_add_vector( L204.R_Mill_tech_year, "price", unique( A_resbio_curves$price) )#
L204.StubResBioCurve_Mill$fract.harvested <- A_resbio_curves$For[ match( L204.StubResBioCurve_Mill$price, A_resbio_curves$price ) ]#
names( L204.StubResBioCurve_Mill )[ names( L204.StubResBioCurve_Mill ) == "technology" ] <- "stub.technology"
dim(L204.StubResBioCurve_Mill)
head(L204.StubResBioCurve_Mill)
AvgWoodDensity_kgm3
L204.Mill_tech <- A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]#
L204.Mill_tech[ c( "sector.name", "subsector.name" ) ] <- L204.Mill_tech[ c( "supplysector", "subsector" ) ]#
L204.R_Mill_tech <- data.frame(#
      region = GCAM_region_names$region,#
      L204.Mill_tech[ rep( 1:nrow( L204.Mill_tech ), times = length( GCAM_region_names$region ) ), ] )#
L204.R_Mill_tech <- L204.R_Mill_tech[ !names( L204.R_Mill_tech ) %in% c( "sector.name", "subsector.name" ) ]
L204.R_Mill_tech
L204.Mill_tech <- A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]#
L204.Mill_tech[ c( "sector.name", "subsector.name" ) ] <- L204.Mill_tech[ c( "supplysector", "subsector" ) ]#
L204.Mill_globaltech <- L204.Mill_tech[ c( "sector.name", "subsector.name", "technology" ) ]
L204.Mill_globaltech
A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]
L204.Mill_tech <- A_demand_technology[ A_demand_technology$supplysector == "NonFoodDemand_Forest", c( supp, subs, tech ) ]#
L204.Mill_tech[ c( "sector.name", "subsector.name" ) ] <- L204.Mill_tech[ c( "supplysector", "subsector" ) ]#
L204.Mill_globaltech <- L204.Mill_tech[ c( "sector.name", "subsector.name", "technology" ) ]#
L204.R_Mill_tech <- data.frame(#
      region = GCAM_region_names$region,#
      L204.Mill_tech[ rep( 1:nrow( L204.Mill_tech ), times = length( GCAM_region_names$region ) ), ] )#
L204.R_Mill_tech <- L204.R_Mill_tech[ !names( L204.R_Mill_tech ) %in% c( "sector.name", "subsector.name" ) ]
L204.R_Mill_tech
L204.Mill_globaltech
L204.GlobalResBio_Mill <- repeat_and_add_vector( L204.Mill_globaltech, Y, c( model_base_years, model_future_years ) )#
L204.GlobalResBio_Mill$residue.biomass.production <- "biomass"#
L204.GlobalResBio_Mill$mass.conversion <- AvgWoodDensity_kgm3#
L204.GlobalResBio_Mill$harvest.index <- ForestHarvestIndex#
L204.GlobalResBio_Mill$eros.ctrl <- 0#
L204.GlobalResBio_Mill$mass.to.energy <- WoodEnergyContent_GJkg#
L204.GlobalResBio_Mill$water.content <- WoodWaterContent
L204.GlobalResBio_Mill
q()
