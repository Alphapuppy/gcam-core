source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L117.tradbio" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Traditional biomass resource supply curves" )
ENERGYPROC_DIR <- "../energy-processing-code"
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L117.tradbio" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Traditional biomass resource supply curves" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
iso_GCAM_regID <- readdata( "COMMON_MAPPINGS", "iso_GCAM_regID" )#
L1011.en_bal_EJ_R_Si_Fi_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1011.en_bal_EJ_R_Si_Fi_Yh" )#
A17.tradbio_curves <- readdata( "ENERGY_ASSUMPTIONS", "A17.tradbio_curves" )
A17.tradbio_curves
A17.tradbio_curves <- readdata( "ENERGY_ASSUMPTIONS", "A17.tradbio_curves" )
A17.tradbio_curves
dim(L1011.en_bal_EJ_R_Si_Fi_Yh)
subset(L1011.en_bal_EJ_R_Si_Fi_Yh, fuel=="traditaional biomass")[1:10,]
unique(L1011.en_bal_EJ_R_Si_Fi_Yh$fuel)
subset(L1011.en_bal_EJ_R_Si_Fi_Yh, fuel=="biomass_tradbio")[1:10,]
tmp<-subset(L1011.en_bal_EJ_R_Si_Fi_Yh, fuel=="biomass_tradbio")
unique(L1011.en_bal_EJ_R_Si_Fi_Yh$fuel)
unique(tmp$fuel)
unique(tmp$sector)
L117.TPES_EJ_R_bld_tradbio_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, fuel == "biomass_tradbio" & sector == "TPES" )
dim(L117.TPES_EJ_R_bld_tradbio_Yh)
L117.TPES_EJ_R_bld_tradbio_Yh.melt <- melt( L117.TPES_EJ_R_bld_tradbio_Yh, id.vars = R_S_F )
head(L117.TPES_EJ_R_bld_tradbio_Yh.melt)
L117.TPES_EJ_R_bld_tradbio_Yh.melt <- melt( L117.TPES_EJ_R_bld_tradbio_Yh, id.vars = R_S_F, variable_name = "Xyear" )
head(L117.TPES_EJ_R_bld_tradbio_Yh.melt)
L117.maxSubResource_tradbio <- aggregate( L117.TPES_EJ_R_bld_tradbio_Yh.melt[ "value" ],#
      by=as.list( L117.TPES_EJ_R_bld_tradbio_Yh.melt[ c( R_S_F ) ] ), max )
dim(L117.maxSubResource_tradbio)
L117.maxSubResource_tradbio
L117.RsrcCurves_EJ_R_tradbio <- data.frame(#
      GCAM_region_ID = sort( unique( iso_GCAM_regID[[R]] ) ),#
      resource = unique( A17.tradbio_curves$resource ),#
      subresource = unique( A17.tradbio_curves$subresource) )#
L117.RsrcCurves_EJ_R_tradbio <- repeat_and_add_vector( L117.RsrcCurves_EJ_R_tradbio, "grade", unique(  A17.tradbio_curves$grade ) )
head(L117.RsrcCurves_EJ_R_tradbio)
A17.tradbio_curves
write_to_all_regions
L117.RsrcCurves_EJ_R_tradbio <- write_to_all_regions( A17.tradbio_curves )
L117.RsrcCurves_EJ_R_tradbio <- repeat_and_add_vector( A17.tradbio_curves, R, sort( unique( iso_GCAM_regID[[R]] ) ) )
L117.RsrcCurves_EJ_R_tradbio
head(L117.maxSubResource_tradbio)
L117.maxSubResource_tradbio
L117.RsrcCurves_EJ_R_tradbio$available <- L117.RsrcCurves_EJ_R_tradbio$available * L117.maxSubResource_tradbio$value[#
      match( L117.RsrcCurves_EJ_R_tradbio[[R]], L117.maxSubResource_tradbio[[R]] ) ]
L117.RsrcCurves_EJ_R_tradbio
L117.RsrcCurves_EJ_R_tradbio <- repeat_and_add_vector( A17.tradbio_curves, R, sort( unique( iso_GCAM_regID[[R]] ) ) )[#
      c( R, names( A17.tradbio_curves ) ) ]
L117.RsrcCurves_EJ_R_tradbio
L117.TPES_EJ_R_bld_tradbio_Yh <- subset( L1011.en_bal_EJ_R_Si_Fi_Yh, fuel == "biomass_tradbio" & sector == "TPES" )#
L117.TPES_EJ_R_bld_tradbio_Yh.melt <- melt( L117.TPES_EJ_R_bld_tradbio_Yh, id.vars = R_S_F, variable_name = "Xyear" )#
L117.maxSubResource_tradbio <- aggregate( L117.TPES_EJ_R_bld_tradbio_Yh.melt[ "value" ],#
      by=as.list( L117.TPES_EJ_R_bld_tradbio_Yh.melt[ c( R_S_F ) ] ), max )#
#
printlog( "Setting a minimum quantity for regions where the fuel does not apply" )#
#Any number will work as demand in these regions will always be 0, but setting 0 available may cause solution problems#
L117.maxSubResource_tradbio$value[ L117.maxSubResource_tradbio$value == 0 ] <- 0.1#
#
printlog( "Writing the supply curves to all regions, multiplying maxSubResouce by quantity available at each grade")#
L117.RsrcCurves_EJ_R_tradbio <- repeat_and_add_vector( A17.tradbio_curves, R, sort( unique( iso_GCAM_regID[[R]] ) ) )[ c( R, names( A17.tradbio_curves ) ) ]#
L117.RsrcCurves_EJ_R_tradbio$available <- L117.RsrcCurves_EJ_R_tradbio$available * L117.maxSubResource_tradbio$value[#
      match( L117.RsrcCurves_EJ_R_tradbio[[R]], L117.maxSubResource_tradbio[[R]] ) ]
L117.RsrcCurves_EJ_R_tradbio
comments.L117.RsrcCurves_EJ_R_tradbio <- c( "Traditional biomass resources by GCAM region","Unit = EJ" )
writedata( L117.RsrcCurves_EJ_R_tradbio, domain="ENERGY_LEVEL1_DATA", fn="L117.RsrcCurves_EJ_R_tradbio", comments=comments.L117.RsrcCurves_EJ_R_geo )
writedata( L117.RsrcCurves_EJ_R_tradbio, domain="ENERGY_LEVEL1_DATA", fn="L117.RsrcCurves_EJ_R_tradbio", comments=comments.L117.RsrcCurves_EJ_R_tradbio )
logstop()
logstart( "L210.resources.R" )
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
A10.rsrc_info <- readdata( "ENERGY_ASSUMPTIONS", "A10.rsrc_info")#
A10.subrsrc_info <- readdata( "ENERGY_ASSUMPTIONS", "A10.subrsrc_info")#
A10.TechChange <- readdata( "ENERGY_ASSUMPTIONS", "A10.TechChange")#
A15.roofPV_TechChange <- readdata( "ENERGY_ASSUMPTIONS", "A15.roofPV_TechChange" )#
L111.RsrcCurves_EJ_R_Ffos <- readdata( "ENERGY_LEVEL1_DATA", "L111.RsrcCurves_EJ_R_Ffos" )#
L111.Prod_EJ_R_F_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L111.Prod_EJ_R_F_Yh" )#
L112.RsrcCurves_Mt_R_U <- readdata( "ENERGY_LEVEL1_DATA", "L112.RsrcCurves_Mt_R_U" )#
L113.RsrcCurves_EJ_R_MSW <- readdata( "ENERGY_LEVEL1_DATA", "L113.RsrcCurves_EJ_R_MSW" )#
L114.RsrcCurves_EJ_R_wind <- readdata( "ENERGY_LEVEL1_DATA", "L114.RsrcCurves_EJ_R_wind" )#
L115.RsrcCurves_EJ_R_roofPV <- readdata( "ENERGY_LEVEL1_DATA", "L115.RsrcCurves_EJ_R_roofPV" )#
L116.RsrcCurves_EJ_R_geo <- readdata( "ENERGY_LEVEL1_DATA", "L116.RsrcCurves_EJ_R_geo" )#
L116.RsrcCurves_EJ_R_EGS <- readdata( "ENERGY_LEVEL1_DATA", "L116.RsrcCurves_EJ_R_EGS" )#
L117.RsrcCurves_EJ_R_tradbio <- readdata( "ENERGY_LEVEL1_DATA", "L116.RsrcCurves_EJ_R_tradbio" )
L117.RsrcCurves_EJ_R_tradbio <- readdata( "ENERGY_LEVEL1_DATA", "L117.RsrcCurves_EJ_R_tradbio" )
head(L117.RsrcCurves_EJ_R_tradbio)
L210.rsrc_info <- gcam_interp( A10.rsrc_info, model_base_years )#
#
#Repeat and add region vector to resource assumptions table (use ID to ensure correct region ordering)#
L210.rsrc_info <- repeat_and_add_vector( A10.rsrc_info, "GCAM_region_ID", GCAM_region_names$GCAM_region_ID )#
L210.rsrc_info <- add_region_name( L210.rsrc_info )#
#
#Reset regional markets to the names of the specific regions#
L210.rsrc_info$market[ L210.rsrc_info$market == "regional" ] <- L210.rsrc_info$region[ L210.rsrc_info$market == "regional" ]#
#
#Split different types of resources into separate tables#
L210.dep_rsrc_info <- subset( L210.rsrc_info, resource_type == "depresource" )#
L210.renew_rsrc_info <- subset( L210.rsrc_info, resource_type == "renewresource" )#
L210.unlim_rsrc_info <- subset( L210.rsrc_info, resource_type == "unlimited-resource" )#
#
printlog( "L210.DepRsrc: output unit, price unit, and market for depletable resources" )#
L210.DepRsrc <- data.frame(#
      region = L210.dep_rsrc_info$region,#
      depresource = L210.dep_rsrc_info$resource,#
      output.unit = L210.dep_rsrc_info$output.unit,#
      price.unit = L210.dep_rsrc_info$price.unit,#
      market = L210.dep_rsrc_info$market)#
#
printlog( "L210.RenewRsrc: output unit, price unit, and market for renewable resources" )#
L210.RenewRsrc <- data.frame(#
      region = L210.renew_rsrc_info$region,#
      renewresource = L210.renew_rsrc_info$resource,#
      output.unit = L210.renew_rsrc_info$output.unit,#
      price.unit = L210.renew_rsrc_info$price.unit,#
      market = L210.renew_rsrc_info$market)#
#
printlog( "L210.UnlimitRsrc: output unit, price unit, and market for unlimited resources" )#
L210.UnlimitRsrc <- data.frame(#
      region = L210.unlim_rsrc_info$region,#
      unlimited.resource = L210.unlim_rsrc_info$resource,#
      output.unit = L210.unlim_rsrc_info$output.unit,#
      price.unit = L210.unlim_rsrc_info$price.unit,#
      market = L210.unlim_rsrc_info$market)#
#
printlog( "L210.DepRsrcPrice: historical prices for depletable resources" )#
L210.dep_rsrc_price.melt <- melt( L210.dep_rsrc_info[ c( "region", "resource", X_model_base_years ) ], id.vars = c( "region", "resource" ) )#
L210.DepRsrcPrice <- data.frame(#
      region = L210.dep_rsrc_price.melt$region,#
      depresource = L210.dep_rsrc_price.melt$resource,#
      year = substr( L210.dep_rsrc_price.melt$variable, 2, 5 ),#
      price = L210.dep_rsrc_price.melt$value )#
#
printlog( "L210.RenewRsrcPrice: historical prices for renewable resources" )#
L210.renew_rsrc_price.melt <- melt( L210.renew_rsrc_info[ c( "region", "resource", X_model_base_years ) ], id.vars = c( "region", "resource" ) )#
L210.RenewRsrcPrice <- data.frame(#
      region = L210.renew_rsrc_price.melt$region,#
      renewresource = L210.renew_rsrc_price.melt$resource,#
      year = substr( L210.renew_rsrc_price.melt$variable, 2, 5 ),#
      price = L210.renew_rsrc_price.melt$value )#
#
printlog( "L210.UnlimitRsrcPrice: prices for unlimited resources" )#
L210.unlimit_rsrc_price.melt <- melt( L210.unlim_rsrc_info[ c( "region", "resource", X_model_base_years ) ], id.vars = c( "region", "resource" ) )#
L210.UnlimitRsrcPrice <- data.frame(#
      region = L210.unlimit_rsrc_price.melt$region,#
      unlimited.resource = L210.unlimit_rsrc_price.melt$resource,#
      year = substr( L210.unlimit_rsrc_price.melt$variable, 2, 5 ),#
      price = L210.unlimit_rsrc_price.melt$value )#
#
# 2b. Tech change#
# Repeat and add region vector to assumed techchange tables#
L210.rsrc_TechChange <- repeat_and_add_vector( A10.TechChange, "GCAM_region_ID", GCAM_region_names$GCAM_region_ID )#
L210.rsrc_TechChange <- add_region_name( L210.rsrc_TechChange )#
#
#Retrieve the techChange years from the table column names#
X_rsrc_TechChangeYears <- names( A10.TechChange )[ grep( "X[0-9]{4}", names( A10.TechChange ) )]#
#
#Melt#
#NOTE: assuming no tech change for unlimited resources#
L210.rsrc_TechChange.melt <- melt( L210.rsrc_TechChange[ c( "region", "resource", "subresource", X_rsrc_TechChangeYears ) ],#
      id.vars = c( "region", "resource", "subresource" ) )#
L210.rsrc_TechChange.melt$subresource_type <- A10.subrsrc_info$subresource_type[ match( L210.rsrc_TechChange.melt$subresource, A10.subrsrc_info$subresource ) ]#
#
#Rooftop PV: follow same steps#
L210.roofPV_TechChange <- repeat_and_add_vector( A15.roofPV_TechChange, "GCAM_region_ID", GCAM_region_names$GCAM_region_ID )#
L210.roofPV_TechChange <- add_region_name( L210.roofPV_TechChange )#
X_roofPV_TechChangeYears <- names( A15.roofPV_TechChange )[ grep( "X[0-9]{4}", names( A15.roofPV_TechChange ) )]#
L210.roofPV_TechChange.melt <- melt( L210.roofPV_TechChange[ c( "region", "resource", "subresource", X_roofPV_TechChangeYears ) ],#
      id.vars = c( "region", "resource", "subresource" ) )#
L210.roofPV_TechChange.melt$subresource_type <- A10.subrsrc_info$subresource_type[ match( L210.roofPV_TechChange.melt$subresource, A10.subrsrc_info$subresource ) ]#
#
#Combine (rbind) these two tables#
L210.rsrc_TechChange.melt <- rbind( L210.rsrc_TechChange.melt, L210.roofPV_TechChange.melt )#
L210.dep_rsrc_TechChange.melt <- subset( L210.rsrc_TechChange.melt, subresource_type == "subresource" )#
L210.renew_rsrc_TechChange.melt <- subset( L210.rsrc_TechChange.melt, subresource_type == "smooth-renewable-subresource" )
printlog( "L210.DepRsrcTechChange: technological change for depletable resources" )#
L210.DepRsrcTechChange <- data.frame(#
      region = L210.dep_rsrc_TechChange.melt$region,#
      depresource = L210.dep_rsrc_TechChange.melt$resource,#
      subresource = L210.dep_rsrc_TechChange.melt$subresource,#
      year.fillout = substr( L210.dep_rsrc_TechChange.melt$variable, 2, 5 ),#
      techChange = L210.dep_rsrc_TechChange.melt$value )#
#
printlog( "L210.SmthRenewRsrcTechChange: technological change for smooth renewable subresources" )#
L210.SmthRenewRsrcTechChange <- data.frame(#
      region = L210.renew_rsrc_TechChange.melt$region,#
      renewresource = L210.renew_rsrc_TechChange.melt$resource,#
      smooth.renewable.subresource = L210.renew_rsrc_TechChange.melt$subresource,#
      year.fillout = substr( L210.renew_rsrc_TechChange.melt$variable, 2, 5 ),#
      techChange = L210.renew_rsrc_TechChange.melt$value )#
#
# 2c. Calibrated production (depletable resources only)#
printlog( "L210.DepRsrcCalProd: calibrated production of depletable resources" )#
printlog( "NOTE: Assuming only one calibrated subresource per depletable resource" )#
L210.Prod_EJ_R_F_Y <- L111.Prod_EJ_R_F_Yh[ c( R_S_F, X_model_base_years ) ]#
L210.Prod_EJ_R_F_Y.melt <- melt( L210.Prod_EJ_R_F_Y, id.vars = c( R_S_F ) )#
L210.Prod_EJ_R_F_Y.melt <- add_region_name( L210.Prod_EJ_R_F_Y.melt )#
#
L210.DepRsrcCalProd <- data.frame(#
      region = L210.Prod_EJ_R_F_Y.melt$region,#
      depresource = L210.Prod_EJ_R_F_Y.melt$fuel,#
      subresource = A10.TechChange$subresource[ match( L210.Prod_EJ_R_F_Y.melt$fuel, A10.TechChange$resource ) ],#
      year = substr( L210.Prod_EJ_R_F_Y.melt$variable, 2, 5 ),#
      cal.production = round( L210.Prod_EJ_R_F_Y.melt$value, digits_calproduction ) )#
# 2d. Resource supply curves#
printlog( "L210.DepRsrcCurves_fos: supply curves of fossil resources")#
L210.RsrcCurves_EJ_R_Ffos <- add_region_name( L111.RsrcCurves_EJ_R_Ffos )#
L210.DepRsrcCurves_fos <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_Ffos, "depresource" )#
#
printlog( "L210.DepRsrcCurves_U: supply curves of uranium resources")#
L210.RsrcCurves_Mt_R_U <- add_region_name( L112.RsrcCurves_Mt_R_U )#
L210.DepRsrcCurves_U <- convert_rsrc_to_L2( L210.RsrcCurves_Mt_R_U, "depresource" )#
#
printlog( "L210.SmthRenewRsrcCurves_MSW: supply curves of waste biomass resources")#
L210.RsrcCurves_EJ_R_MSW <- add_region_name( L113.RsrcCurves_EJ_R_MSW )#
L210.SmthRenewRsrcCurves_MSW <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_MSW, "renewresource", "smooth-renewable-subresource" )#
#
printlog( "L210.SmthRenewRsrcCurves_wind: supply curves of wind resources")#
L210.RsrcCurves_EJ_R_wind <- add_region_name( L114.RsrcCurves_EJ_R_wind )#
L210.SmthRenewRsrcCurves_wind <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_wind, "renewresource", "smooth-renewable-subresource" )#
#
printlog( "L210.SmthRenewRsrcCurves_roofPV: supply curves of rooftop PV resources")#
L210.RsrcCurves_EJ_R_roofPV <- add_region_name( L115.RsrcCurves_EJ_R_roofPV )#
L210.SmthRenewRsrcCurves_roofPV <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_roofPV, "renewresource", "smooth-renewable-subresource" )#
#
printlog( "L210.GrdRenewRsrcCurves_geo: graded supply curves of geothermal (hydrothermal) resources")#
L210.RsrcCurves_EJ_R_geo <- add_region_name( L116.RsrcCurves_EJ_R_geo )#
L210.GrdRenewRsrcCurves_geo <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_geo, "renewresource", "sub-renewable-resource" )#
#
printlog( "L210.GrdRenewRsrcCurves_EGS: graded supply curves of geothermal (EGS) resources")#
L210.RsrcCurves_EJ_R_EGS <- add_region_name( L116.RsrcCurves_EJ_R_EGS )#
L210.GrdRenewRsrcCurves_EGS <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_EGS, "renewresource", "sub-renewable-resource" )
L210.RsrcCurves_EJ_R_tradbio <- add_region_name( L117.RsrcCurves_EJ_R_tradbio )#
L210.GrdRenewRsrcCurves_geo <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_tradbio, "renewresource", "sub-renewable-resource" )
L210.RsrcCurves_EJ_R_tradbio <- add_region_name( L117.RsrcCurves_EJ_R_tradbio )#
L210.GrdRenewRsrcCurves_tradbio <- convert_rsrc_to_L2( L210.RsrcCurves_EJ_R_tradbio, "renewresource", "sub-renewable-resource" )
head(L210.GrdRenewRsrcCurves_tradbio)
logstop()
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L223.electricity.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Electricity sector" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
#
sourcedata( "COMMON_ASSUMPTIONS", "A_common_data", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "level2_data_names", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "A_modeltime_data", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "A_energy_data", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
fuel_energy_input <- readdata( "ENERGY_MAPPINGS", "fuel_energy_input" )#
calibrated_techs <- readdata( "ENERGY_MAPPINGS", "calibrated_techs" )#
A23.sector <- readdata( "ENERGY_ASSUMPTIONS", "A23.sector" )#
A23.subsector_logit <- readdata( "ENERGY_ASSUMPTIONS", "A23.subsector_logit" )#
A23.subsector_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A23.subsector_shrwt" )#
A23.subsector_interp <- readdata( "ENERGY_ASSUMPTIONS", "A23.subsector_interp" )#
A23.subsector_shrwt_nuc_R <- readdata( "ENERGY_ASSUMPTIONS", "A23.subsector_shrwt_nuc_R" )#
A23.subsector_shrwt_renew_R <- readdata( "ENERGY_ASSUMPTIONS", "A23.subsector_shrwt_renew_R" )#
A23.globalinttech <- readdata( "ENERGY_ASSUMPTIONS", "A23.globalinttech" )#
A23.globaltech_shrwt <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_shrwt" )#
A23.globaltech_eff <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_eff" )#
A23.globaltech_capital <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_capital" )#
A23.globaltech_OMfixed <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_OMfixed" )#
A23.globaltech_OMvar <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_OMvar" )#
A23.globaltech_retirement <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_retirement" )#
A23.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_co2capture" )#
L1231.in_EJ_R_elec_F_tech_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1231.in_EJ_R_elec_F_tech_Yh" )#
L1231.out_EJ_R_elec_F_tech_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1231.out_EJ_R_elec_F_tech_Yh" )#
L1231.eff_R_elec_F_tech_Yh <- readdata( "ENERGY_LEVEL1_DATA", "L1231.eff_R_elec_F_tech_Yh" )
A23.globaltech_co2capture <- readdata( "ENERGY_ASSUMPTIONS", "A23.globaltech_co2capture" )
A23.globalinttech
A23.globaltech_shrwt
subset_inttechs
names_GlobalTechBackup
