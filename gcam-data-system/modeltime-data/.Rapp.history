L200.interyears <- for (i in 1:length( GCAM_timesteps ) ){#
	which( GCAM_timesteps[i] != GCAM_timesteps[i-1] )#
}
i
L200.interyears
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears <- GCAM_timesteps[i] != GCAM_timesteps[i-1] )#
}
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
L200.interyears
rm(i)
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
L200.interyears
i
rm(i)
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears <- GCAM_timesteps[GCAM_timesteps[i] != GCAM_timesteps[i-1]]#
}
L200.interyears
?for
help(for)
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
L200.interyears
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
	return(GCAM_timesteps[ L200.interyears == 1])#
}
L200.interyears == 1
for (i in 2:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
	return(GCAM_timesteps[ L200.interyears == 1])#
}
L200.interyears
for (i in 2:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]
}
L200.interyears
L200.interyears <- for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
rm(L200.interyears)
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[GCAM_timesteps[i] != GCAM_timesteps[i-1]]#
}
L200.interyears <- GCAM_timesteps#
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
rm(L200.interyears)
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[GCAM_timesteps[i] != GCAM_timesteps[i-1]]#
}
L200.interyears
L200.interyears <- 1:length(GCAM_timesteps)#
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[GCAM_timesteps[i] != GCAM_timesteps[i-1]]#
}
L200.interyears <- GCAM_timesteps#
for (i in 1:length( GCAM_timesteps ) ){#
	L200.interyears[i] <- GCAM_timesteps[i] != GCAM_timesteps[i-1]#
}
L200.interyears <- for (i in 1:length( GCAM_timesteps ) ){#
	which( GCAM_timesteps[i] != GCAM_timesteps[i-1] )#
}
L200.interyears
i
L200.interyears <- for (i in 2:length( GCAM_timesteps ) ){#
	which( GCAM_timesteps[i] != GCAM_timesteps[i-1] )#
}
L200.interyears
i
L200.interyears <- for (i in 1:length( GCAM_timesteps ) - 1 ){#
	which( GCAM_timesteps[i] != GCAM_timesteps[i-1] )#
}
i
L200.interyears
which(GCAM_timesteps==5)
which( GCAM_timesteps != GCAM_timesteps[1])
interyear1 <- which( GCAM_timesteps != GCAM_timesteps[1])[1]
interyear1
interyear1 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[1])[1]]
interyear1
interyear1.timestep <- GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1])[1]]
interyear1.timestep
L200.interyears <- for (i in 1:length( GCAM_years ) ){#
	GCAM_years[which( GCAM_timesteps[i] != GCAM_timesteps[i-1])]#
}
L200.interyears
class(GCAM_timesteps)
summary(GCAM_timesteps)
GCAM_timesteps
L200.interyears <- for (i in 1:length( GCAM_years ) ){#
	GCAM_years[which( GCAM_timesteps[i] != GCAM_timesteps[i-1][1])]#
}
L200.interyears
L200.interyears <- for (i in 2:length( GCAM_years ) ){#
	GCAM_years[which( GCAM_timesteps[i] != GCAM_timesteps[i-1][1])]#
}
L200.interyears
1:length( GCAM_years )
2:length( GCAM_years )
2:length( GCAM_years ) - 1 )
2:( length( GCAM_years ) - 1 ) )
( length( GCAM_years ) - 1 )
2:( length( GCAM_years ) - 1 )
L200.interyears <- for (i in 2:( length( GCAM_years ) - 1 ) ){#
	GCAM_years[which( GCAM_timesteps[i] != GCAM_timesteps[i-1][1])]#
}
L200.interyears
GCAM_years <- c( model_base_years, 2015,2020,2025,2030,2035,2050,2065,2080,2095,2100)
GCAM_years
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]
GCAM_timesteps
interyear1 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
interyear1.timestep <- GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1])[1]]
interyear1
interyear2 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1]])[1]]
GCAM_years <- c( model_base_years, model_future_years )#
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]#
#
L200.ModelTime <- data.frame(#
      start.year.timestep = GCAM_timesteps[ 1 ],#
      start.year = min( model_base_years ),#
      final.calibration.year = max( model_base_years ),#
      end.year = max( model_future_years ) )#
printlog( "L200.ModelTimeInterYears: Specify variable timesteps")#
interyear1 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
interyear1.timestep <- GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1])[1]]
interyear1.timestep
L200.interyears <- for (i in 2:( length( GCAM_years ) - 1 ) ){#
	return( GCAM_years[which( GCAM_timesteps[i] != GCAM_timesteps[i-1][1])] )#
}
apply(GCAM_years, 2, sum)
apply(GCAM_years, 1, sum)
apply(GCAM_years, FUN=sum)
for (i in 2:length( GCAM_timesteps ) ){#
	interyears <- GCAM_years[which(GCAM_timesteps[i] != GCAM_timesteps[i-1][1])]#
	return(interyears)#
}
for (i in 2:length( GCAM_years ) ){#
	interyears <- GCAM_years[which(GCAM_years[i] - GCAM_years[i-1] != GCAM_years[i-1] - GCAM_years[i-2] ) ]#
}
interyears
class(GCAM_years)
summary(GCAM_years)
summary(interyears)
class(interyears)
?lapply
tmp <- lapply( GCAM_years, function(x){x!=x-1})
tmp
tmp <- lapply( GCAM_years, function(x){GCAM_years[x] != GCAM_years[x-1]})
tmp
tmp <- lapply( GCAM_years, for (x in 2:length(GCAM_years)) {function(x){GCAM_years[x] != GCAM_years[x-1]})}
tmp <- lapply( GCAM_years, for (x in 2:length(GCAM_years)) {function(x){GCAM_years[x] != GCAM_years[x-1]}})
for (i in 3:length( GCAM_years ) ){#
	interyears <- GCAM_years[which(GCAM_years[i] - GCAM_years[i-1] != GCAM_years[i-1] - GCAM_years[i-2] ) ]#
}
interyears
length( GCAM_years
)
for (i in 3:length( GCAM_years ) ){#
	interyears <- GCAM_years[which(GCAM_years[i] - GCAM_years[i-1] != GCAM_years[i-1] - GCAM_years[i-2] )[1] ]#
}
interyears
GCAM_years[which(GCAM_years[3] - GCAM_years[3-1] != GCAM_years[3-1] - GCAM_years[3-2] )
]
GCAM_years[which(( GCAM_years[3] - GCAM_years[3-1] ) != ( GCAM_years[3-1] - GCAM_years[3-2] ) )[1] ]
GCAM_years[which(( GCAM_years[3] - GCAM_years[3-1] ) != ( GCAM_years[3-1] - GCAM_years[3-2] ) ) ]
GCAM_years[3]
GCAM_years[3-1]
GCAM_years[3-2]
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[GCAM_timesteps[i] != GCAM_timesteps[i-1]]#
}
interyears
GCAM_timesteps[GCAM_timesteps[2] != GCAM_timesteps[2-1]]
GCAM_timesteps
GCAM_timesteps[GCAM_timesteps[3] != GCAM_timesteps[3-1]]
GCAM_timesteps[GCAM_timesteps[4] != GCAM_timesteps[4-1]]
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[i][GCAM_timesteps[i]!=GCAM_timesteps[i-1]]#
}
interyears
GCAM_timesteps[3][GCAM_timesteps[3]!=GCAM_timesteps[3-1]]
GCAM_timesteps[2][GCAM_timesteps[2]!=GCAM_timesteps[2-1]]
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- which(GCAM_timesteps[i][GCAM_timesteps[i]!=GCAM_timesteps[i-1]])#
}
which(GCAM_timesteps[3][GCAM_timesteps[3]!=GCAM_timesteps[3-1]])
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- match(GCAM_timesteps[i][GCAM_timesteps[i]!=GCAM_timesteps[i-1]])#
}
match(GCAM_timesteps[3][GCAM_timesteps[3]!=GCAM_timesteps[3-1]])
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- which(GCAM_timesteps[GCAM_timesteps[i]!=GCAM_timesteps[i-1]])#
}
GCAM_timesteps[GCAM_timesteps[3] != GCAM_timesteps[3-1]]
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[which( GCAM_timesteps[i] != GCAM_timesteps[i-1]])#
}
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[which( GCAM_timesteps[i] != GCAM_timesteps[i-1])]#
}
interyears
for ( i in 1:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[which( GCAM_timesteps[i] != GCAM_timesteps[i-1])]#
}
interyears
for ( i in 3:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[which( GCAM_timesteps[i] != GCAM_timesteps[i-1])]#
}
interyears
index()
GCAM_timesteps
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
changeyears
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
changeyears
for (i in 3:length( GCAM_years ) ){#
	interyears[i] <- GCAM_years[which(( GCAM_years[i] - GCAM_years[i-1] ) != ( GCAM_years[i-1] - GCAM_years[i-2] ) )[1] ]#
}
interyears
for (i in 3:length( GCAM_years ) ){#
	interyears[i] <- GCAM_years[which(( GCAM_years[i] - GCAM_years[i-1] ) != ( GCAM_years[i-1] - GCAM_years[i-2] ) ) ]#
}
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- GCAM_years[which( GCAM_timesteps[i] != GCAM_timesteps[i-1] )]#
}
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_years[ changeyears ]
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_years[ interyears ]
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_years[ interyears ]
GCAM_years
interyears
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
rm(interyears)
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- GCAM_timesteps[2:length(GCAM_timesteps)]#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
for ( i in 1:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
rm(interyears)
2:length(GCAM_timesteps)
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
GCAM_timesteps
for ( i in 2:length(GCAM_timesteps) ){#
	interyears <- 2:length(GCAM_timesteps)#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
rm(interyears)
interyears <- !is.na(GCAM_timesteps)
interyears
interyears <- !is.na(GCAM_timesteps[2:length(GCAM_timesteps)])
interyears
length()
length(interyears)
interyears <- !is.na(GCAM_timesteps[2:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
length(interyears)
length(GCAM_years)
GCAM_years[ interyears ]
length(interyears)
length(GCAM_years)
potential_interyears <- GCAM_years[2:length(GCAM_years)-1]
potential_interyears
potential_interyears <- GCAM_years[2:(length(GCAM_years)-1)]
potential_interyears
length(potential_interyears)
GCAM_interyears <- potential_interyears[ interyears ]
GCAM_interyears
interyears <- !is.na(GCAM_timesteps[2:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
interyears <- !is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 1:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears <- !is.na(GCAM_timesteps[1:length(GCAM_timesteps)])
interyears <- !is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
interyears <- is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	interyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
interyears
changeyears <- is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
changeyears
length(GCAM_years)
length(interyears)
GCAM_interyears <- GCAM_years[ interyears ]
GCAM_interyears
GCAM_timesteps[ interyears ]
GCAM_timesteps
interyears
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )
GCAM_interyear.timesteps <- GCAM_timesteps[ interyears ]
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )
L200.ModelTimeInterYears
GCAM_years <- c( model_base_years, seq(2015, 2050, 5), seq(2055,2100,15))
GCAM_years
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]#
#
L200.ModelTime <- data.frame(#
      start.year.timestep = GCAM_timesteps[ 1 ],#
      start.year = min( model_base_years ),#
      final.calibration.year = max( model_base_years ),#
      end.year = max( model_future_years ) )#
printlog( "L200.ModelTimeInterYears: Specify variable timesteps")#
interyear1 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
interyear1.timestep <- GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
#
##need to return the index number of each timestep that is not equal to the prior timestep#
changeyears <- is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_interyears <- GCAM_years[ interyears ]#
GCAM_interyear.timesteps <- GCAM_timesteps[ interyears ]#
#
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )
L200.ModelTimeInterYears
GCAM_years <- c( model_base_years, seq(2015, 2050, 5), seq(2055,2100,15))#
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]
GCAM_timesteps
changeyears <- is.na(GCAM_timesteps[1:length(GCAM_timesteps)])
changeyears
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}
changeyears
GCAM_interyears <- GCAM_years[ interyears ]
GCAM_interyears
GCAM_interyears <- GCAM_years[ changeyears ]
GCAM_interyears
GCAM_interyear.timesteps <- GCAM_timesteps[ changeyears ]
GCAM_interyear.timesteps
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )
L200.ModelTimeInterYears
GCAM_years <- c( model_base_years, seq(2015, 2050, 5), seq(2055,2100,1))#
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]#
#
L200.ModelTime <- data.frame(#
      start.year.timestep = GCAM_timesteps[ 1 ],#
      start.year = min( model_base_years ),#
      final.calibration.year = max( model_base_years ),#
      end.year = max( model_future_years ) )#
printlog( "L200.ModelTimeInterYears: Specify variable timesteps")#
interyear1 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
interyear1.timestep <- GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
#
##need to return the index number of each timestep that is not equal to the prior timestep#
changeyears <- is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_interyears <- GCAM_years[ changeyears ]#
GCAM_interyear.timesteps <- GCAM_timesteps[ changeyears ]#
#
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )
L200.ModelTimeInterYears
GCAM_years <- c( 1971,1975,1990,2000,2005,2010, seq(2015, 2050, 5), seq(2055,2100,1))#
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]#
#
L200.ModelTime <- data.frame(#
      start.year.timestep = GCAM_timesteps[ 1 ],#
      start.year = min( model_base_years ),#
      final.calibration.year = max( model_base_years ),#
      end.year = max( model_future_years ) )#
printlog( "L200.ModelTimeInterYears: Specify variable timesteps")#
interyear1 <- GCAM_years[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
interyear1.timestep <- GCAM_timesteps[which( GCAM_timesteps != GCAM_timesteps[1])[1]]#
#
##need to return the index number of each timestep that is not equal to the prior timestep#
changeyears <- is.na(GCAM_timesteps[1:length(GCAM_timesteps)])#
for ( i in 2:length(GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_interyears <- GCAM_years[ changeyears ]#
GCAM_interyear.timesteps <- GCAM_timesteps[ changeyears ]#
#
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )
L200.ModelTimeInterYears
L200.ModelTime
L200.MAGICC <- data.frame( #
      last.historical.year <- Magicc_last_historical_year,#
      bc.unit.forcing <- Magicc_bc_unit_forcing,#
      carbon.model.start.year <- Magicc_C_start_year )
Magicc_last_historical_year <- 2005#
Magicc_bc_unit_forcing <- 0#
Magicc_C_start_year <- 1705
L200.MAGICC <- data.frame( #
      last.historical.year <- Magicc_last_historical_year,#
      bc.unit.forcing <- Magicc_bc_unit_forcing,#
      carbon.model.start.year <- Magicc_C_start_year )
L200.MAGICC
L200.MAGICC <- data.frame( #
      last.historical.year = Magicc_last_historical_year,#
      bc.unit.forcing = Magicc_bc_unit_forcing,#
      carbon.model.start.year = Magicc_C_start_year )
L200.MAGICC
Before we can load headers we need some paths defined.  They#
# may be provided by a system environment variable or just#
# having already been set in the workspace#
if( !exists( "ENERGYPROC_DIR" ) ){#
    if( Sys.getenv( "ENERGYPROC" ) != "" ){#
        ENERGYPROC_DIR <- Sys.getenv( "ENERGYPROC" )#
    } else {#
        stop("Could not determine location of energy data system. Please set the R var ENERGYPROC_DIR to the appropriate location")#
    }#
}#
#
# Universal header file - provides logging, file support, etc.#
source(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
logstart( "L200.metainfo.R" )#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(ENERGYPROC_DIR,"/../_common/headers/ENERGY_header.R",sep=""))#
printlog( "Resource supply information" )#
#
# -----------------------------------------------------------------------------#
# 1. Read files#
#
sourcedata( "COMMON_ASSUMPTIONS", "assumptions", extension = ".R" )#
sourcedata( "COMMON_ASSUMPTIONS", "unit_conversions", extension = ".R" )#
sourcedata( "ENERGY_ASSUMPTIONS", "assumptions", extension = ".R" )#
GCAM_region_names <- readdata( "COMMON_MAPPINGS", "GCAM_region_names")#
A00.CarbonCoef <- readdata( "ENERGY_ASSUMPTIONS", "A00.CarbonCoef")#
#
# -----------------------------------------------------------------------------#
# 2. Build tables for CSVs#
printlog( "L200.ModelTime: Specify start year, starting timestep length, end year, and final calibration year")#
#Calculate the read-in timesteps in the model#
GCAM_years <- c( model_base_years, model_future_years )#
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]#
#
L200.ModelTime <- data.frame(#
      start.year.timestep = GCAM_timesteps[ 1 ],#
      start.year = min( model_base_years ),#
      final.calibration.year = max( model_base_years ),#
      end.year = max( model_future_years ) )#
printlog( "L200.ModelTimeInterYears: Specify variable timesteps")#
#build a true/false vector that is true for every period where the timestep length changes. start with all false values.#
changeyears <- is.na( GCAM_timesteps )#
for ( i in 2:length( GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_interyears <- GCAM_years[ changeyears ]#
GCAM_interyear.timesteps <- GCAM_timesteps[ changeyears ]#
#
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )#
#
#Magicc model data#
printlog( "L200.MAGICC: Input parameters from GCAM to MAGICC" )#
L200.MAGICC <- data.frame( #
      last.historical.year = Magicc_last_historical_year,#
      bc.unit.forcing = Magicc_bc_unit_forcing,#
      carbon.model.start.year = Magicc_C_start_year )#
#
#Carbon contents#
printlog( "L200.C_Coefs: Carbon contents of fuels in all regions" )#
L200.CarbonCoef <- write_to_all_regions( A00.CarbonCoef )#
L200.CarbonCoef <- L200.CarbonCoef[ c( "region", "fuel", "PrimaryFuelCO2Coef")]#
#
# -----------------------------------------------------------------------------#
# 3. Write all csvs as tables, and paste csv filenames into a single batch XML file#
#
write_mi_data( L200.ModelTime, IDstring="ModelTime", domain="ENERGY_LEVEL2_DATA", fn="L200.ModelTime", batch_XML_domain="ENERGY_XML_BATCH", batch_XML_file="batch_metainfo.xml" ) #
write_mi_data( L200.ModelTimeInterYears, "ModelTimeInterYears", "ENERGY_LEVEL2_DATA", "L200.ModelTimeInterYears", "ENERGY_XML_BATCH", "batch_metainfo.xml" ) #
write_mi_data( L200.MAGICC, IDstring="MAGICC", domain="ENERGY_LEVEL2_DATA", fn="L200.MAGICC", batch_XML_domain="ENERGY_XML_BATCH", batch_XML_file="batch_metainfo.xml" ) #
write_mi_data( L200.CarbonCoef, "CarbonCoef", "ENERGY_LEVEL2_DATA", "L200.CarbonCoef", "ENERGY_XML_BATCH", "batch_metainfo.xml" ) #
#
insert_file_into_batchxml( "ENERGY_XML_BATCH", "batch_metainfo.xml", "ENERGY_XML_FINAL", "metainfo.xml", "", xml_tag="outFile" )#
#
logstop()
MODELTIMEPROC_DIR <- ("../modeltime-processing-code/x")
source("../modeltime-processing-code/level2/L200.modeltime.R")
if( !exists( "MODELTIMEPROC_DIR" ) ){#
    if( Sys.getenv( "MODELTIMEPROC" ) != "" ){#
        MODELTIMEPROC_DIR <- Sys.getenv( "MODELTIMEPROC" )#
    } else {#
        stop("Could not determine location of modeltime data system. Please set the R var MODELTIMEPROC_DIR to the appropriate location")#
    }#
}
MODELTIMEPROC_DIR
MODELTIMEPROC_DIR <- ("../modeltime-processing-code/")
logstop()
logstop()
source(paste(MODELTIMEPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
logstart( "L200.modeltime.R" )#
adddep(paste(MODELTIMEPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
printlog( "GCAM model time" )
source(paste(MODELTIMEPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
source(paste(MODELTIMEPROC_DIR,"/../_common/headers/MODELTIME_header.R",sep=""))
logstart( "L200.modeltime.R" )
adddep(paste(MODELTIMEPROC_DIR,"/../_common/headers/GCAM_header.R",sep=""))#
adddep(paste(MODELTIMEPROC_DIR,"/../_common/headers/MODELTIME_header.R",sep=""))
printlog( "GCAM model time" )
sourcedata( "COMMON_ASSUMPTIONS", "assumptions", extension = ".R" )#
sourcedata( "MODELTIME_ASSUMPTIONS", "assumptions", extension = ".R" )
printlog( "L200.ModelTime: Specify start year, starting timestep length, end year, and final calibration year")#
#Calculate the read-in timesteps in the model#
GCAM_years <- c( model_base_years, model_future_years )#
GCAM_timesteps <- GCAM_years[ 2:length( GCAM_years ) ] - GCAM_years[ 1:length( GCAM_years ) - 1 ]#
#
L200.ModelTime <- data.frame(#
      start.year.timestep = GCAM_timesteps[ 1 ],#
      start.year = min( model_base_years ),#
      final.calibration.year = max( model_base_years ),#
      end.year = max( model_future_years ) )#
printlog( "L200.ModelTimeInterYears: Specify variable timesteps")#
#build a true/false vector that is true for every period where the timestep length changes. start with all false values.#
changeyears <- is.na( GCAM_timesteps )#
for ( i in 2:length( GCAM_timesteps) ){#
	changeyears[i] <- ifelse( GCAM_timesteps[i] != GCAM_timesteps[i-1], T, F )#
}#
GCAM_interyears <- GCAM_years[ changeyears ]#
GCAM_interyear.timesteps <- GCAM_timesteps[ changeyears ]#
#
L200.ModelTimeInterYears <- data.frame(#
      inter.year.timestep = GCAM_interyear.timesteps,#
      inter.year = GCAM_interyears )#
#
#Magicc model data#
printlog( "L200.MAGICC: Input parameters from GCAM to MAGICC" )#
L200.MAGICC <- data.frame( #
      last.historical.year = Magicc_last_historical_year,#
      bc.unit.forcing = Magicc_bc_unit_forcing,#
      carbon.model.start.year = Magicc_C_start_year )
write_mi_data( L200.ModelTime, IDstring="ModelTime", domain="MODELTIME_LEVEL2_DATA", fn="L200.ModelTime", batch_XML_domain="MODELTIME_XML_BATCH", batch_XML_file="batch_modeltime.xml" ) #
write_mi_data( L200.ModelTimeInterYears, "ModelTimeInterYears", "MODELTIME_LEVEL2_DATA", "L200.ModelTimeInterYears", "MODELTIME_XML_BATCH", "batch_modeltime.xml" ) #
write_mi_data( L200.MAGICC, "MAGICC", "MODELTIME_LEVEL2_DATA", "L200.MAGICC", "MODELTIME_XML_BATCH", "batch_modeltime.xml" )
insert_file_into_batchxml( "MODELTIME_XML_BATCH", "batch_modeltime.xml", "MODELTIME_XML_FINAL", "modeltime.xml", "", xml_tag="outFile" )
logstop()
